name: Release

on:
  push:
    tags:
  workflow_dispatch:
  release:

jobs:
# Build XCFramework
  xcframework:
    name: XCFramework
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Xcode Version
        run: |
          sudo xcode-select -s /Applications/Xcode_12.app
           xcodebuild -version
           swift --version
      - name: Swift Version
        run: swift --version
      # Create a release
      - name: Install Mint
        run: brew install mint
      - name: Install swift-create-xcframework
        run: mint install unsignedapps/swift-create-xcframework
      - name: Build XCFramework
        run: swift-create-xcframework

# Build .so on Linux
  linux-swift-x86_64:
    name: Linux x86_64
    runs-on: ubuntu-20.04
    container: swift:5.3-focal
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Make Logs Directory
      run: mkdir logs
    - name: Swift Version
      run: swift --version
    - name: Build (Release)
      run: swift build -c release
    - name: Upload Logs
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: logs
        path: logs

  linux-swift-armv7:
        name: Linux ARMv7
        runs-on: [self-hosted, linux, arm]
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Swift Version
          run: swift --version
        - name: Build (Release)
          run: swift build -c release -j 1
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs
