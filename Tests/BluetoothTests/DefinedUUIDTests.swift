//
//  DefinedUUIDTests.swift
//  Bluetooth
//
//  Generated by Alsey Coleman Miller on 4/12/18.
//

import XCTest
import Foundation
@testable import Bluetooth

final class DefinedUUIDTests: XCTestCase {

    static let allTests = [
        ("testSdp", testSdp),
        ("testRfcomm", testRfcomm),
        ("testTcsBin", testTcsBin),
        ("testAtt", testAtt),
        ("testObex", testObex),
        ("testBnep", testBnep),
        ("testUpnp", testUpnp),
        ("testHidp", testHidp),
        ("testHardcopyControlChannel", testHardcopyControlChannel),
        ("testHardcopyDataChannel", testHardcopyDataChannel),
        ("testHardcopyNotification", testHardcopyNotification),
        ("testAvctp", testAvctp),
        ("testAvdtp", testAvdtp),
        ("testCmtp", testCmtp),
        ("testMcapControlChannel", testMcapControlChannel),
        ("testMcapDataChannel", testMcapDataChannel),
        ("testL2Cap", testL2Cap),
        ("testServiceDiscoveryServerServiceClass", testServiceDiscoveryServerServiceClass),
        ("testBrowseGroupDescriptorServiceClass", testBrowseGroupDescriptorServiceClass),
        ("testPublicBrowseRoot", testPublicBrowseRoot),
        ("testSerialPort", testSerialPort),
        ("testLanAccessUsingPpp", testLanAccessUsingPpp),
        ("testDialupNetworking", testDialupNetworking),
        ("testIrmcSync", testIrmcSync),
        ("testObexObjectPush", testObexObjectPush),
        ("testObexFileTransfer", testObexFileTransfer),
        ("testIrmcSyncCommand", testIrmcSyncCommand),
        ("testHeadset", testHeadset),
        ("testCordlessTelephony", testCordlessTelephony),
        ("testAudioSource", testAudioSource),
        ("testAudioSink", testAudioSink),
        ("testAvRemoteControlTarget", testAvRemoteControlTarget),
        ("testAdvancedAudioDistribution", testAdvancedAudioDistribution),
        ("testAvRemoteControl", testAvRemoteControl),
        ("testAvRemoteControlController", testAvRemoteControlController),
        ("testIntercom", testIntercom),
        ("testFax", testFax),
        ("testHeadsetAg", testHeadsetAg),
        ("testWap", testWap),
        ("testWapClient", testWapClient),
        ("testPanu", testPanu),
        ("testNap", testNap),
        ("testGn", testGn),
        ("testDirectPrinting", testDirectPrinting),
        ("testReferencePrinting", testReferencePrinting),
        ("testBasicImagingProfile", testBasicImagingProfile),
        ("testImagingResponder", testImagingResponder),
        ("testImagingAutomaticArchive", testImagingAutomaticArchive),
        ("testImagingReferencedObjects", testImagingReferencedObjects),
        ("testHandsfree", testHandsfree),
        ("testHandsfreeAudioGateway", testHandsfreeAudioGateway),
        ("testDirectPrintingRefrenceObjectsService", testDirectPrintingRefrenceObjectsService),
        ("testReflectedUi", testReflectedUi),
        ("testBasicPrinting", testBasicPrinting),
        ("testPrintingStatus", testPrintingStatus),
        ("testHumanInterfaceDeviceService", testHumanInterfaceDeviceService),
        ("testHardcopyCableReplacement", testHardcopyCableReplacement),
        ("testHcrPrint", testHcrPrint),
        ("testHcrScan", testHcrScan),
        ("testCommonIsdnAccess", testCommonIsdnAccess),
        ("testSimAccess", testSimAccess),
        ("testPhonebookAccessClient", testPhonebookAccessClient),
        ("testPhonebookAccessServer", testPhonebookAccessServer),
        ("testPhonebookAccess", testPhonebookAccess),
        ("testHeadsetHs", testHeadsetHs),
        ("testMessageAccessServer", testMessageAccessServer),
        ("testMessageNotificationServer", testMessageNotificationServer),
        ("testMessageAccessProfile", testMessageAccessProfile),
        ("testGnss", testGnss),
        ("testGnssServer", testGnssServer),
        ("testUuid3Ddisplay", testUuid3Ddisplay),
        ("testUuid3Dglasses", testUuid3Dglasses),
        ("testUuid3Dsynchronization", testUuid3Dsynchronization),
        ("testMpsProfile", testMpsProfile),
        ("testMpsService", testMpsService),
        ("testPnpInformation", testPnpInformation),
        ("testGenericNetworking", testGenericNetworking),
        ("testGenericFileTransfer", testGenericFileTransfer),
        ("testGenericAudio", testGenericAudio),
        ("testGenericTelephony", testGenericTelephony),
        ("testUpnpService", testUpnpService),
        ("testUpnpIpService", testUpnpIpService),
        ("testUpnpIpPan", testUpnpIpPan),
        ("testUpnpIpLap", testUpnpIpLap),
        ("testUpnpIpL2Cap", testUpnpIpL2Cap),
        ("testVideoSource", testVideoSource),
        ("testVideoSink", testVideoSink),
        ("testVideoDistribution", testVideoDistribution),
        ("testHdp", testHdp),
        ("testHdpSource", testHdpSource),
        ("testHdpSink", testHdpSink),
        ("testGenericAccessProfile", testGenericAccessProfile),
        ("testGenericAttributeProfile", testGenericAttributeProfile),
        ("testImmediateAlert", testImmediateAlert),
        ("testLinkLoss", testLinkLoss),
        ("testTxPower", testTxPower),
        ("testCurrentTimeService", testCurrentTimeService),
        ("testReferenceTimeUpdateService", testReferenceTimeUpdateService),
        ("testNextDstChangeService", testNextDstChangeService),
        ("testGlucose", testGlucose),
        ("testHealthThermometer", testHealthThermometer),
        ("testDeviceInformation", testDeviceInformation),
        ("testHeartRate", testHeartRate),
        ("testPhoneAlertStatusService", testPhoneAlertStatusService),
        ("testBatteryService", testBatteryService),
        ("testBloodPressure", testBloodPressure),
        ("testAlertNotificationService", testAlertNotificationService),
        ("testHumanInterfaceDevice", testHumanInterfaceDevice),
        ("testScanParameters", testScanParameters),
        ("testRunningSpeedAndCadence", testRunningSpeedAndCadence),
        ("testAutomationIo", testAutomationIo),
        ("testCyclingSpeedAndCadence", testCyclingSpeedAndCadence),
        ("testCyclingPower", testCyclingPower),
        ("testLocationAndNavigation", testLocationAndNavigation),
        ("testEnvironmentalSensing", testEnvironmentalSensing),
        ("testBodyComposition", testBodyComposition),
        ("testUserData", testUserData),
        ("testWeightScale", testWeightScale),
        ("testBondManagement", testBondManagement),
        ("testContinuousGlucoseMonitoring", testContinuousGlucoseMonitoring),
        ("testInternetProtocolSupport", testInternetProtocolSupport),
        ("testIndoorPositioning", testIndoorPositioning),
        ("testPulseOximeter", testPulseOximeter),
        ("testHttpProxy", testHttpProxy),
        ("testTransportDiscovery", testTransportDiscovery),
        ("testObjectTransfer", testObjectTransfer),
        ("testPrimaryService", testPrimaryService),
        ("testSecondaryService", testSecondaryService),
        ("testInclude", testInclude),
        ("testCharacteristic", testCharacteristic),
        ("testCharacteristicExtendedProperties", testCharacteristicExtendedProperties),
        ("testCharacteristicUserDescription", testCharacteristicUserDescription),
        ("testClientCharacteristicConfiguration", testClientCharacteristicConfiguration),
        ("testServerCharacteristicConfiguration", testServerCharacteristicConfiguration),
        ("testCharacteristicFormat", testCharacteristicFormat),
        ("testCharacteristicAggregateFormat", testCharacteristicAggregateFormat),
        ("testValidRange", testValidRange),
        ("testExternalReportReference", testExternalReportReference),
        ("testReportReference", testReportReference),
        ("testNumberOfDigitals", testNumberOfDigitals),
        ("testValueTriggerSetting", testValueTriggerSetting),
        ("testEnvironmentalSensingConfiguration", testEnvironmentalSensingConfiguration),
        ("testEnvironmentalSensingMeasurement", testEnvironmentalSensingMeasurement),
        ("testEnvironmentalSensingTriggerSetting", testEnvironmentalSensingTriggerSetting),
        ("testTimeTriggerSetting", testTimeTriggerSetting),
        ("testDeviceName", testDeviceName),
        ("testAppearance", testAppearance),
        ("testPeripheralPrivacyFlag", testPeripheralPrivacyFlag),
        ("testReconnectionAddress", testReconnectionAddress),
        ("testPeripheralPreferredConnectionParameters", testPeripheralPreferredConnectionParameters),
        ("testServiceChanged", testServiceChanged),
        ("testAlertLevel", testAlertLevel),
        ("testTxPowerLevel", testTxPowerLevel),
        ("testDateTime", testDateTime),
        ("testDayOfWeek", testDayOfWeek),
        ("testDayDateTime", testDayDateTime),
        ("testExactTime256", testExactTime256),
        ("testDstOffset", testDstOffset),
        ("testTimeZone", testTimeZone),
        ("testLocalTimeInformation", testLocalTimeInformation),
        ("testTimeWithDst", testTimeWithDst),
        ("testTimeAccuracy", testTimeAccuracy),
        ("testTimeSource", testTimeSource),
        ("testReferenceTimeInformation", testReferenceTimeInformation),
        ("testTimeUpdateControlPoint", testTimeUpdateControlPoint),
        ("testTimeUpdateState", testTimeUpdateState),
        ("testGlucoseMeasurement", testGlucoseMeasurement),
        ("testBatteryLevel", testBatteryLevel),
        ("testTemperatureMeasurement", testTemperatureMeasurement),
        ("testTemperatureType", testTemperatureType),
        ("testIntermediateTemperature", testIntermediateTemperature),
        ("testMeasurementInterval", testMeasurementInterval),
        ("testBootKeyboardInputReport", testBootKeyboardInputReport),
        ("testSystemId", testSystemId),
        ("testModelNumberString", testModelNumberString),
        ("testSerialNumberString", testSerialNumberString),
        ("testFirmwareRevisionString", testFirmwareRevisionString),
        ("testHardwareRevisionString", testHardwareRevisionString),
        ("testSoftwareRevisionString", testSoftwareRevisionString),
        ("testManufacturerNameString", testManufacturerNameString),
        ("testIeee1107320601RegulatoryCertDataList", testIeee1107320601RegulatoryCertDataList),
        ("testCurrentTime", testCurrentTime),
        ("testMagneticDeclination", testMagneticDeclination),
        ("testScanRefresh", testScanRefresh),
        ("testBootKeyboardOutputReport", testBootKeyboardOutputReport),
        ("testBootMouseInputReport", testBootMouseInputReport),
        ("testGlucoseMeasurementContext", testGlucoseMeasurementContext),
        ("testBloodPressureMeasurement", testBloodPressureMeasurement),
        ("testIntermediateCuffPressure", testIntermediateCuffPressure),
        ("testHeartRateMeasurement", testHeartRateMeasurement),
        ("testBodySensorLocation", testBodySensorLocation),
        ("testHeartRateControlPoint", testHeartRateControlPoint),
        ("testAlertStatus", testAlertStatus),
        ("testRingerControlPoint", testRingerControlPoint),
        ("testRingerSetting", testRingerSetting),
        ("testAlertCategoryIdBitMask", testAlertCategoryIdBitMask),
        ("testAlertCategoryId", testAlertCategoryId),
        ("testAlertNotificationControlPoint", testAlertNotificationControlPoint),
        ("testUnreadAlertStatus", testUnreadAlertStatus),
        ("testNewAlert", testNewAlert),
        ("testSupportedNewAlertCategory", testSupportedNewAlertCategory),
        ("testSupportedUnreadAlertCategory", testSupportedUnreadAlertCategory),
        ("testBloodPressureFeature", testBloodPressureFeature),
        ("testHidInformation", testHidInformation),
        ("testReportMap", testReportMap),
        ("testHidControlPoint", testHidControlPoint),
        ("testReport", testReport),
        ("testProtocolMode", testProtocolMode),
        ("testScanIntervalWindow", testScanIntervalWindow),
        ("testPnpId", testPnpId),
        ("testGlucoseFeature", testGlucoseFeature),
        ("testRecordAccessControlPoint", testRecordAccessControlPoint),
        ("testRscMeasurement", testRscMeasurement),
        ("testRscFeature", testRscFeature),
        ("testScControlPoint", testScControlPoint),
        ("testDigital", testDigital),
        ("testAnalog", testAnalog),
        ("testAggregate", testAggregate),
        ("testCscMeasurement", testCscMeasurement),
        ("testCscFeature", testCscFeature),
        ("testSensorLocation", testSensorLocation),
        ("testCyclingPowerMeasurement", testCyclingPowerMeasurement),
        ("testCyclingPowerVector", testCyclingPowerVector),
        ("testCyclingPowerFeature", testCyclingPowerFeature),
        ("testCyclingPowerControlPoint", testCyclingPowerControlPoint),
        ("testLocationAndSpeed", testLocationAndSpeed),
        ("testNavigation", testNavigation),
        ("testPositionQuality", testPositionQuality),
        ("testLnFeature", testLnFeature),
        ("testLnControlPoint", testLnControlPoint),
        ("testElevation", testElevation),
        ("testPressure", testPressure),
        ("testTemperature", testTemperature),
        ("testHumidity", testHumidity),
        ("testTrueWindSpeed", testTrueWindSpeed),
        ("testTrueWindDirection", testTrueWindDirection),
        ("testApparentWindSpeed", testApparentWindSpeed),
        ("testApparentWindDirection", testApparentWindDirection),
        ("testGustFactor", testGustFactor),
        ("testPollenConcentration", testPollenConcentration),
        ("testUvIndex", testUvIndex),
        ("testIrradiance", testIrradiance),
        ("testRainfall", testRainfall),
        ("testWindChill", testWindChill),
        ("testHeatIndex", testHeatIndex),
        ("testDewPoint", testDewPoint),
        ("testTrend", testTrend),
        ("testDescriptorValueChanged", testDescriptorValueChanged),
        ("testAerobicHeartRateLowerLimit", testAerobicHeartRateLowerLimit),
        ("testAerobicThreshold", testAerobicThreshold),
        ("testAge", testAge),
        ("testAnaerobicHeartRateLowerLimit", testAnaerobicHeartRateLowerLimit),
        ("testAnaerobicHeartRateUpperLimit", testAnaerobicHeartRateUpperLimit),
        ("testAnaerobicThreshold", testAnaerobicThreshold),
        ("testAerobicHeartRateUpperLimit", testAerobicHeartRateUpperLimit),
        ("testDateOfBirth", testDateOfBirth),
        ("testDateOfThresholdAssessment", testDateOfThresholdAssessment),
        ("testEmailAddress", testEmailAddress),
        ("testFatBurnHeartRateLowerLimit", testFatBurnHeartRateLowerLimit),
        ("testFatBurnHeartRateUpperLimit", testFatBurnHeartRateUpperLimit),
        ("testFirstName", testFirstName),
        ("testFiveZoneHeartRateLimits", testFiveZoneHeartRateLimits),
        ("testGender", testGender),
        ("testHeartRateMax", testHeartRateMax),
        ("testHeight", testHeight),
        ("testHipCircumference", testHipCircumference),
        ("testLastName", testLastName),
        ("testMaximumRecommendedHeartRate", testMaximumRecommendedHeartRate),
        ("testRestingHeartRate", testRestingHeartRate),
        ("testSportTypeForAerobicAnaerobicThresholds", testSportTypeForAerobicAnaerobicThresholds),
        ("testThreeZoneHeartRateLimits", testThreeZoneHeartRateLimits),
        ("testTwoZoneHeartRateLimit", testTwoZoneHeartRateLimit),
        ("testVo2Max", testVo2Max),
        ("testWaistCircumference", testWaistCircumference),
        ("testWeight", testWeight),
        ("testDatabaseChangerement", testDatabaseChangerement),
        ("testUserIndex", testUserIndex),
        ("testBodyCompositionFeature", testBodyCompositionFeature),
        ("testBodyCompositionMeasurement", testBodyCompositionMeasurement),
        ("testWeightMeasurement", testWeightMeasurement),
        ("testWeightScaleFeature", testWeightScaleFeature),
        ("testUserControlPoint", testUserControlPoint),
        ("testMagneticFluxDensity2D", testMagneticFluxDensity2D),
        ("testMagneticFluxDensity3D", testMagneticFluxDensity3D),
        ("testLanguage", testLanguage),
        ("testBarometricPressureTrend", testBarometricPressureTrend),
        ("testBondManagementControlPoint", testBondManagementControlPoint),
        ("testBondManagementFeature", testBondManagementFeature),
        ("testCentralAddressResolution", testCentralAddressResolution),
        ("testCgmMeasurement", testCgmMeasurement),
        ("testCgmFeature", testCgmFeature),
        ("testCgmStatus", testCgmStatus),
        ("testCgmSessionStartTime", testCgmSessionStartTime),
        ("testCgmSessionRunTime", testCgmSessionRunTime),
        ("testCgmSpecificOpsControlPoint", testCgmSpecificOpsControlPoint),
        ("testIndoorPositioningConfiguration", testIndoorPositioningConfiguration),
        ("testLatitude", testLatitude),
        ("testLongitude", testLongitude),
        ("testLocalNorthCoordinate", testLocalNorthCoordinate),
        ("testLocalEastCoordinate", testLocalEastCoordinate),
        ("testFloorNumber", testFloorNumber),
        ("testAltitude", testAltitude),
        ("testUncertainty", testUncertainty),
        ("testLocationName", testLocationName),
        ("testUri", testUri),
        ("testHttpHeaders", testHttpHeaders),
        ("testHttpStatusCode", testHttpStatusCode),
        ("testHttpEntityBody", testHttpEntityBody),
        ("testHttpControlPoint", testHttpControlPoint),
        ("testHttpsSecurity", testHttpsSecurity),
        ("testTdsControlPoint", testTdsControlPoint),
        ("testOtsFeature", testOtsFeature),
        ("testObjectName", testObjectName),
        ("testObjectType", testObjectType),
        ("testObjectSize", testObjectSize),
        ("testObjectFirstCreated", testObjectFirstCreated),
        ("testObjectLastModified", testObjectLastModified),
        ("testObjectId", testObjectId),
        ("testObjectProperties", testObjectProperties),
        ("testObjectActionControlPoint", testObjectActionControlPoint),
        ("testObjectListControlPoint", testObjectListControlPoint),
        ("testObjectListFilter", testObjectListFilter),
        ("testObjectChanged", testObjectChanged),
        ("testIntelCorporation", testIntelCorporation),
        ("testLabSensorSolutions", testLabSensorSolutions),
        ("testQualcommLife", testQualcommLife),
        ("testQualcommLife2", testQualcommLife2),
        ("testKontaktMicroLocation", testKontaktMicroLocation),
        ("testTaserInternational", testTaserInternational),
        ("testTaserInternational2", testTaserInternational2),
        ("testUniversityOfTokyo", testUniversityOfTokyo),
        ("testUniversityOfTokyo2", testUniversityOfTokyo2),
        ("testLineCorporation", testLineCorporation),
        ("testBeijingJingdongCenturyTrading", testBeijingJingdongCenturyTrading),
        ("testPlumeDesign", testPlumeDesign),
        ("testStJudeMedical", testStJudeMedical),
        ("testStJudeMedical2", testStJudeMedical2),
        ("testUnwire", testUnwire),
        ("testTangome", testTangome),
        ("testTangome2", testTangome2),
        ("testHewlettPackardCompany", testHewlettPackardCompany),
        ("testHewlettPackardCompany2", testHewlettPackardCompany2),
        ("testZebraTechnologies", testZebraTechnologies),
        ("testBragiGmbh", testBragiGmbh),
        ("testOrionLabs", testOrionLabs),
        ("testStollmannEVGmbh", testStollmannEVGmbh),
        ("testAtericaHealth", testAtericaHealth),
        ("testAwearSolutions", testAwearSolutions),
        ("testDopplerLab", testDopplerLab),
        ("testDopplerLab2", testDopplerLab2),
        ("testMedtronic", testMedtronic),
        ("testMedtronic2", testMedtronic2),
        ("testBlueBite", testBlueBite),
        ("testRfDigitalCorp", testRfDigitalCorp),
        ("testRfDigitalCorp2", testRfDigitalCorp2),
        ("testHuaweiTechnologies华为技术有限公司", testHuaweiTechnologies华为技术有限公司),
        ("testQingdaoYeelinkInformationTechnology青岛亿联客信息技术有限公司", testQingdaoYeelinkInformationTechnology青岛亿联客信息技术有限公司),
        ("testSaltoSystemsSL", testSaltoSystemsSL),
        ("testBOPlayAS", testBOPlayAS),
        ("testApple", testApple),
        ("testApple2", testApple2),
        ("testTronForum", testTronForum),
        ("testInteraxon", testInteraxon),
        ("testArm", testArm),
        ("testCsr", testCsr),
        ("testJuma", testJuma),
        ("testShanghaiImilabTechnology", testShanghaiImilabTechnology),
        ("testJardenSafetySecurity", testJardenSafetySecurity),
        ("testOttoq", testOttoq),
        ("testOttoq2", testOttoq2),
        ("testXiaomi", testXiaomi),
        ("testTeslaMotor", testTeslaMotor),
        ("testTeslaMotor2", testTeslaMotor2),
        ("testCurrant", testCurrant),
        ("testCurrant2", testCurrant2),
        ("testEstimote", testEstimote),
        ("testSamsaraNetworks", testSamsaraNetworks),
        ("testGsiLaboratories", testGsiLaboratories),
        ("testMobiquityNetworks", testMobiquityNetworks),
        ("testDialogSemiconductorBV", testDialogSemiconductorBV),
        ("testGoogle", testGoogle),
        ("testGoogle2", testGoogle2),
        ("testIntrepidControlSystems", testIntrepidControlSystems),
        ("testIntrepidControlSystems2", testIntrepidControlSystems2),
        ("testIttIndustries", testIttIndustries),
        ("testPaxtonAccess", testPaxtonAccess),
        ("testGopro", testGopro),
        ("testGopro2", testGopro2),
        ("testUtcFireAndSecurity", testUtcFireAndSecurity),
        ("testSavantSystems", testSavantSystems),
        ("testSavantSystems2", testSavantSystems2),
        ("testGoogle3", testGoogle3),
        ("testNokiaCorporation", testNokiaCorporation),
        ("testNokiaCorporation2", testNokiaCorporation2),
        ("testNokiaCorporation3", testNokiaCorporation3),
        ("testNokiaCorporation4", testNokiaCorporation4),
        ("testNestLabs", testNestLabs),
        ("testNestLabs2", testNestLabs2),
        ("testElectronicsTomorrowLimited", testElectronicsTomorrowLimited),
        ("testMicrosoftCorporation", testMicrosoftCorporation),
        ("testTaobao", testTaobao),
        ("testWisilica", testWisilica),
        ("testWisilica2", testWisilica2),
        ("testVencerCo", testVencerCo),
        ("testFacebook", testFacebook),
        ("testFacebook2", testFacebook2),
        ("testLgElectronics", testLgElectronics),
        ("testTencentHoldingsLimited", testTencentHoldingsLimited),
        ("testAdafruitIndustries", testAdafruitIndustries),
        ("testDexcom", testDexcom),
        ("testCloverNetwork", testCloverNetwork),
        ("testBoseCorporation", testBoseCorporation),
        ("testNod", testNod),
        ("testKddiCorporation", testKddiCorporation),
        ("testKddiCorporation2", testKddiCorporation2),
        ("testBlueSparkTechnologies", testBlueSparkTechnologies),
        ("testUuid360Fly", testUuid360Fly),
        ("testPlusLocationSystems", testPlusLocationSystems),
        ("testRealtekSemiconductorCorp", testRealtekSemiconductorCorp),
        ("testKocomojo", testKocomojo),
        ("testApple3", testApple3),
        ("testApple4", testApple4),
        ("testApple5", testApple5),
        ("testApple6", testApple6),
        ("testApple7", testApple7),
        ("testApple8", testApple8),
        ("testApple9", testApple9),
        ("testApple10", testApple10),
        ("testApple11", testApple11),
        ("testApple12", testApple12),
        ("testApple13", testApple13),
        ("testApple14", testApple14),
        ("testApple15", testApple15),
        ("testApple16", testApple16),
        ("testPlantronics", testPlantronics),
        ("testBroadcomCorporation", testBroadcomCorporation),
        ("testBroadcomCorporation2", testBroadcomCorporation2),
        ("testGoogle4", testGoogle4),
        ("testPebbleTechnologyCorporation", testPebbleTechnologyCorporation),
        ("testIsscTechnologiesCorporation", testIsscTechnologiesCorporation),
        ("testPerka", testPerka),
        ("testJawbone", testJawbone),
        ("testJawbone2", testJawbone2),
        ("testCoin", testCoin),
        ("testDesignShift", testDesignShift),
        ("testAnhuiHuamiInformationTechnologyCo", testAnhuiHuamiInformationTechnologyCo),
        ("testAnhuiHuamiInformationTechnologyCo2", testAnhuiHuamiInformationTechnologyCo2),
        ("testAnki", testAnki),
        ("testAnki2", testAnki2),
        ("testNordicSemiconductorAsa", testNordicSemiconductorAsa),
        ("testNordicSemiconductorAsa2", testNordicSemiconductorAsa2),
        ("testSeedLabs", testSeedLabs),
        ("testTencentHoldingsLimited2", testTencentHoldingsLimited2),
        ("testQuinticCorp", testQuinticCorp),
        ("testQuinticCorp2", testQuinticCorp2),
        ("testSwirlNetworks", testSwirlNetworks),
        ("testSwirlNetworks2", testSwirlNetworks2),
        ("testTile", testTile),
        ("testTile2", testTile2),
        ("testPolarElectroOy", testPolarElectroOy),
        ("testPolarElectroOy2", testPolarElectroOy2),
        ("testIntel", testIntel),
        ("testCsr2", testCsr2),
        ("testCsr3", testCsr3),
        ("testGoogle5", testGoogle5),
        ("testGoogle6", testGoogle6),
        ("testDialogSemiconductorGmbh", testDialogSemiconductorGmbh),
        ("testWicentric", testWicentric),
        ("testAplixCorporation", testAplixCorporation),
        ("testAplixCorporation2", testAplixCorporation2),
        ("testPaypal", testPaypal),
        ("testPaypal2", testPaypal2),
        ("testStollmannEVGmbh2", testStollmannEVGmbh2),
        ("testGimbal", testGimbal),
        ("testGimbal2", testGimbal2),
        ("testGnResoundAS", testGnResoundAS),
        ("testGnNetcom", testGnNetcom),
        ("testFastIdentityOnlineAllianceFido", testFastIdentityOnlineAllianceFido),
        ("testAllianceForWirelessPowerA4Wp", testAllianceForWirelessPowerA4Wp),
        ]

    /// Test SDP
    func testSdp() {

         XCTAssertEqual(BluetoothUUID.sdp.rawValue, 0x0001)
         XCTAssertEqual(BluetoothUUID.sdp.rawValue, 1)
         XCTAssertEqual(BluetoothUUID.sdp, .bit16(0x0001))
         XCTAssertEqual(BluetoothUUID.sdp.name, "SDP")

    }

    /// Test RFCOMM
    func testRfcomm() {

         XCTAssertEqual(BluetoothUUID.rfcomm.rawValue, 0x0003)
         XCTAssertEqual(BluetoothUUID.rfcomm.rawValue, 3)
         XCTAssertEqual(BluetoothUUID.rfcomm, .bit16(0x0003))
         XCTAssertEqual(BluetoothUUID.rfcomm.name, "RFCOMM")

    }

    /// Test TCS-BIN
    func testTcsBin() {

         XCTAssertEqual(BluetoothUUID.tcsBin.rawValue, 0x0005)
         XCTAssertEqual(BluetoothUUID.tcsBin.rawValue, 5)
         XCTAssertEqual(BluetoothUUID.tcsBin, .bit16(0x0005))
         XCTAssertEqual(BluetoothUUID.tcsBin.name, "TCS-BIN")

    }

    /// Test ATT
    func testAtt() {

         XCTAssertEqual(BluetoothUUID.att.rawValue, 0x0007)
         XCTAssertEqual(BluetoothUUID.att.rawValue, 7)
         XCTAssertEqual(BluetoothUUID.att, .bit16(0x0007))
         XCTAssertEqual(BluetoothUUID.att.name, "ATT")

    }

    /// Test OBEX
    func testObex() {

         XCTAssertEqual(BluetoothUUID.obex.rawValue, 0x0008)
         XCTAssertEqual(BluetoothUUID.obex.rawValue, 8)
         XCTAssertEqual(BluetoothUUID.obex, .bit16(0x0008))
         XCTAssertEqual(BluetoothUUID.obex.name, "OBEX")

    }

    /// Test BNEP
    func testBnep() {

         XCTAssertEqual(BluetoothUUID.bnep.rawValue, 0x000F)
         XCTAssertEqual(BluetoothUUID.bnep.rawValue, 15)
         XCTAssertEqual(BluetoothUUID.bnep, .bit16(0x000F))
         XCTAssertEqual(BluetoothUUID.bnep.name, "BNEP")

    }

    /// Test UPNP
    func testUpnp() {

         XCTAssertEqual(BluetoothUUID.upnp.rawValue, 0x0010)
         XCTAssertEqual(BluetoothUUID.upnp.rawValue, 16)
         XCTAssertEqual(BluetoothUUID.upnp, .bit16(0x0010))
         XCTAssertEqual(BluetoothUUID.upnp.name, "UPNP")

    }

    /// Test HIDP
    func testHidp() {

         XCTAssertEqual(BluetoothUUID.hidp.rawValue, 0x0011)
         XCTAssertEqual(BluetoothUUID.hidp.rawValue, 17)
         XCTAssertEqual(BluetoothUUID.hidp, .bit16(0x0011))
         XCTAssertEqual(BluetoothUUID.hidp.name, "HIDP")

    }

    /// Test Hardcopy Control Channel
    func testHardcopyControlChannel() {

         XCTAssertEqual(BluetoothUUID.hardcopyControlChannel.rawValue, 0x0012)
         XCTAssertEqual(BluetoothUUID.hardcopyControlChannel.rawValue, 18)
         XCTAssertEqual(BluetoothUUID.hardcopyControlChannel, .bit16(0x0012))
         XCTAssertEqual(BluetoothUUID.hardcopyControlChannel.name, "Hardcopy Control Channel")

    }

    /// Test Hardcopy Data Channel
    func testHardcopyDataChannel() {

         XCTAssertEqual(BluetoothUUID.hardcopyDataChannel.rawValue, 0x0014)
         XCTAssertEqual(BluetoothUUID.hardcopyDataChannel.rawValue, 20)
         XCTAssertEqual(BluetoothUUID.hardcopyDataChannel, .bit16(0x0014))
         XCTAssertEqual(BluetoothUUID.hardcopyDataChannel.name, "Hardcopy Data Channel")

    }

    /// Test Hardcopy Notification
    func testHardcopyNotification() {

         XCTAssertEqual(BluetoothUUID.hardcopyNotification.rawValue, 0x0016)
         XCTAssertEqual(BluetoothUUID.hardcopyNotification.rawValue, 22)
         XCTAssertEqual(BluetoothUUID.hardcopyNotification, .bit16(0x0016))
         XCTAssertEqual(BluetoothUUID.hardcopyNotification.name, "Hardcopy Notification")

    }

    /// Test AVCTP
    func testAvctp() {

         XCTAssertEqual(BluetoothUUID.avctp.rawValue, 0x0017)
         XCTAssertEqual(BluetoothUUID.avctp.rawValue, 23)
         XCTAssertEqual(BluetoothUUID.avctp, .bit16(0x0017))
         XCTAssertEqual(BluetoothUUID.avctp.name, "AVCTP")

    }

    /// Test AVDTP
    func testAvdtp() {

         XCTAssertEqual(BluetoothUUID.avdtp.rawValue, 0x0019)
         XCTAssertEqual(BluetoothUUID.avdtp.rawValue, 25)
         XCTAssertEqual(BluetoothUUID.avdtp, .bit16(0x0019))
         XCTAssertEqual(BluetoothUUID.avdtp.name, "AVDTP")

    }

    /// Test CMTP
    func testCmtp() {

         XCTAssertEqual(BluetoothUUID.cmtp.rawValue, 0x001B)
         XCTAssertEqual(BluetoothUUID.cmtp.rawValue, 27)
         XCTAssertEqual(BluetoothUUID.cmtp, .bit16(0x001B))
         XCTAssertEqual(BluetoothUUID.cmtp.name, "CMTP")

    }

    /// Test MCAP Control Channel
    func testMcapControlChannel() {

         XCTAssertEqual(BluetoothUUID.mcapControlChannel.rawValue, 0x001E)
         XCTAssertEqual(BluetoothUUID.mcapControlChannel.rawValue, 30)
         XCTAssertEqual(BluetoothUUID.mcapControlChannel, .bit16(0x001E))
         XCTAssertEqual(BluetoothUUID.mcapControlChannel.name, "MCAP Control Channel")

    }

    /// Test MCAP Data Channel
    func testMcapDataChannel() {

         XCTAssertEqual(BluetoothUUID.mcapDataChannel.rawValue, 0x001F)
         XCTAssertEqual(BluetoothUUID.mcapDataChannel.rawValue, 31)
         XCTAssertEqual(BluetoothUUID.mcapDataChannel, .bit16(0x001F))
         XCTAssertEqual(BluetoothUUID.mcapDataChannel.name, "MCAP Data Channel")

    }

    /// Test L2CAP
    func testL2Cap() {

         XCTAssertEqual(BluetoothUUID.l2Cap.rawValue, 0x0100)
         XCTAssertEqual(BluetoothUUID.l2Cap.rawValue, 256)
         XCTAssertEqual(BluetoothUUID.l2Cap, .bit16(0x0100))
         XCTAssertEqual(BluetoothUUID.l2Cap.name, "L2CAP")

    }

    /// Test Service Discovery Server Service Class
    func testServiceDiscoveryServerServiceClass() {

         XCTAssertEqual(BluetoothUUID.serviceDiscoveryServerServiceClass.rawValue, 0x1000)
         XCTAssertEqual(BluetoothUUID.serviceDiscoveryServerServiceClass.rawValue, 4096)
         XCTAssertEqual(BluetoothUUID.serviceDiscoveryServerServiceClass, .bit16(0x1000))
         XCTAssertEqual(BluetoothUUID.serviceDiscoveryServerServiceClass.name, "Service Discovery Server Service Class")

    }

    /// Test Browse Group Descriptor Service Class
    func testBrowseGroupDescriptorServiceClass() {

         XCTAssertEqual(BluetoothUUID.browseGroupDescriptorServiceClass.rawValue, 0x1001)
         XCTAssertEqual(BluetoothUUID.browseGroupDescriptorServiceClass.rawValue, 4097)
         XCTAssertEqual(BluetoothUUID.browseGroupDescriptorServiceClass, .bit16(0x1001))
         XCTAssertEqual(BluetoothUUID.browseGroupDescriptorServiceClass.name, "Browse Group Descriptor Service Class")

    }

    /// Test Public Browse Root
    func testPublicBrowseRoot() {

         XCTAssertEqual(BluetoothUUID.publicBrowseRoot.rawValue, 0x1002)
         XCTAssertEqual(BluetoothUUID.publicBrowseRoot.rawValue, 4098)
         XCTAssertEqual(BluetoothUUID.publicBrowseRoot, .bit16(0x1002))
         XCTAssertEqual(BluetoothUUID.publicBrowseRoot.name, "Public Browse Root")

    }

    /// Test Serial Port
    func testSerialPort() {

         XCTAssertEqual(BluetoothUUID.serialPort.rawValue, 0x1101)
         XCTAssertEqual(BluetoothUUID.serialPort.rawValue, 4353)
         XCTAssertEqual(BluetoothUUID.serialPort, .bit16(0x1101))
         XCTAssertEqual(BluetoothUUID.serialPort.name, "Serial Port")

    }

    /// Test LAN Access Using PPP
    func testLanAccessUsingPpp() {

         XCTAssertEqual(BluetoothUUID.lanAccessUsingPpp.rawValue, 0x1102)
         XCTAssertEqual(BluetoothUUID.lanAccessUsingPpp.rawValue, 4354)
         XCTAssertEqual(BluetoothUUID.lanAccessUsingPpp, .bit16(0x1102))
         XCTAssertEqual(BluetoothUUID.lanAccessUsingPpp.name, "LAN Access Using PPP")

    }

    /// Test Dialup Networking
    func testDialupNetworking() {

         XCTAssertEqual(BluetoothUUID.dialupNetworking.rawValue, 0x1103)
         XCTAssertEqual(BluetoothUUID.dialupNetworking.rawValue, 4355)
         XCTAssertEqual(BluetoothUUID.dialupNetworking, .bit16(0x1103))
         XCTAssertEqual(BluetoothUUID.dialupNetworking.name, "Dialup Networking")

    }

    /// Test IrMC Sync
    func testIrmcSync() {

         XCTAssertEqual(BluetoothUUID.irmcSync.rawValue, 0x1104)
         XCTAssertEqual(BluetoothUUID.irmcSync.rawValue, 4356)
         XCTAssertEqual(BluetoothUUID.irmcSync, .bit16(0x1104))
         XCTAssertEqual(BluetoothUUID.irmcSync.name, "IrMC Sync")

    }

    /// Test OBEX Object Push
    func testObexObjectPush() {

         XCTAssertEqual(BluetoothUUID.obexObjectPush.rawValue, 0x1105)
         XCTAssertEqual(BluetoothUUID.obexObjectPush.rawValue, 4357)
         XCTAssertEqual(BluetoothUUID.obexObjectPush, .bit16(0x1105))
         XCTAssertEqual(BluetoothUUID.obexObjectPush.name, "OBEX Object Push")

    }

    /// Test OBEX File Transfer
    func testObexFileTransfer() {

         XCTAssertEqual(BluetoothUUID.obexFileTransfer.rawValue, 0x1106)
         XCTAssertEqual(BluetoothUUID.obexFileTransfer.rawValue, 4358)
         XCTAssertEqual(BluetoothUUID.obexFileTransfer, .bit16(0x1106))
         XCTAssertEqual(BluetoothUUID.obexFileTransfer.name, "OBEX File Transfer")

    }

    /// Test IrMC Sync Command
    func testIrmcSyncCommand() {

         XCTAssertEqual(BluetoothUUID.irmcSyncCommand.rawValue, 0x1107)
         XCTAssertEqual(BluetoothUUID.irmcSyncCommand.rawValue, 4359)
         XCTAssertEqual(BluetoothUUID.irmcSyncCommand, .bit16(0x1107))
         XCTAssertEqual(BluetoothUUID.irmcSyncCommand.name, "IrMC Sync Command")

    }

    /// Test Headset
    func testHeadset() {

         XCTAssertEqual(BluetoothUUID.headset.rawValue, 0x1108)
         XCTAssertEqual(BluetoothUUID.headset.rawValue, 4360)
         XCTAssertEqual(BluetoothUUID.headset, .bit16(0x1108))
         XCTAssertEqual(BluetoothUUID.headset.name, "Headset")

    }

    /// Test Cordless Telephony
    func testCordlessTelephony() {

         XCTAssertEqual(BluetoothUUID.cordlessTelephony.rawValue, 0x1109)
         XCTAssertEqual(BluetoothUUID.cordlessTelephony.rawValue, 4361)
         XCTAssertEqual(BluetoothUUID.cordlessTelephony, .bit16(0x1109))
         XCTAssertEqual(BluetoothUUID.cordlessTelephony.name, "Cordless Telephony")

    }

    /// Test Audio Source
    func testAudioSource() {

         XCTAssertEqual(BluetoothUUID.audioSource.rawValue, 0x110A)
         XCTAssertEqual(BluetoothUUID.audioSource.rawValue, 4362)
         XCTAssertEqual(BluetoothUUID.audioSource, .bit16(0x110A))
         XCTAssertEqual(BluetoothUUID.audioSource.name, "Audio Source")

    }

    /// Test Audio Sink
    func testAudioSink() {

         XCTAssertEqual(BluetoothUUID.audioSink.rawValue, 0x110B)
         XCTAssertEqual(BluetoothUUID.audioSink.rawValue, 4363)
         XCTAssertEqual(BluetoothUUID.audioSink, .bit16(0x110B))
         XCTAssertEqual(BluetoothUUID.audioSink.name, "Audio Sink")

    }

    /// Test A/V Remote Control Target
    func testAvRemoteControlTarget() {

         XCTAssertEqual(BluetoothUUID.avRemoteControlTarget.rawValue, 0x110C)
         XCTAssertEqual(BluetoothUUID.avRemoteControlTarget.rawValue, 4364)
         XCTAssertEqual(BluetoothUUID.avRemoteControlTarget, .bit16(0x110C))
         XCTAssertEqual(BluetoothUUID.avRemoteControlTarget.name, "A/V Remote Control Target")

    }

    /// Test Advanced Audio Distribution
    func testAdvancedAudioDistribution() {

         XCTAssertEqual(BluetoothUUID.advancedAudioDistribution.rawValue, 0x110D)
         XCTAssertEqual(BluetoothUUID.advancedAudioDistribution.rawValue, 4365)
         XCTAssertEqual(BluetoothUUID.advancedAudioDistribution, .bit16(0x110D))
         XCTAssertEqual(BluetoothUUID.advancedAudioDistribution.name, "Advanced Audio Distribution")

    }

    /// Test A/V Remote Control
    func testAvRemoteControl() {

         XCTAssertEqual(BluetoothUUID.avRemoteControl.rawValue, 0x110E)
         XCTAssertEqual(BluetoothUUID.avRemoteControl.rawValue, 4366)
         XCTAssertEqual(BluetoothUUID.avRemoteControl, .bit16(0x110E))
         XCTAssertEqual(BluetoothUUID.avRemoteControl.name, "A/V Remote Control")

    }

    /// Test A/V Remote Control Controller
    func testAvRemoteControlController() {

         XCTAssertEqual(BluetoothUUID.avRemoteControlController.rawValue, 0x110F)
         XCTAssertEqual(BluetoothUUID.avRemoteControlController.rawValue, 4367)
         XCTAssertEqual(BluetoothUUID.avRemoteControlController, .bit16(0x110F))
         XCTAssertEqual(BluetoothUUID.avRemoteControlController.name, "A/V Remote Control Controller")

    }

    /// Test Intercom
    func testIntercom() {

         XCTAssertEqual(BluetoothUUID.intercom.rawValue, 0x1110)
         XCTAssertEqual(BluetoothUUID.intercom.rawValue, 4368)
         XCTAssertEqual(BluetoothUUID.intercom, .bit16(0x1110))
         XCTAssertEqual(BluetoothUUID.intercom.name, "Intercom")

    }

    /// Test Fax
    func testFax() {

         XCTAssertEqual(BluetoothUUID.fax.rawValue, 0x1111)
         XCTAssertEqual(BluetoothUUID.fax.rawValue, 4369)
         XCTAssertEqual(BluetoothUUID.fax, .bit16(0x1111))
         XCTAssertEqual(BluetoothUUID.fax.name, "Fax")

    }

    /// Test Headset AG
    func testHeadsetAg() {

         XCTAssertEqual(BluetoothUUID.headsetAg.rawValue, 0x1112)
         XCTAssertEqual(BluetoothUUID.headsetAg.rawValue, 4370)
         XCTAssertEqual(BluetoothUUID.headsetAg, .bit16(0x1112))
         XCTAssertEqual(BluetoothUUID.headsetAg.name, "Headset AG")

    }

    /// Test WAP
    func testWap() {

         XCTAssertEqual(BluetoothUUID.wap.rawValue, 0x1113)
         XCTAssertEqual(BluetoothUUID.wap.rawValue, 4371)
         XCTAssertEqual(BluetoothUUID.wap, .bit16(0x1113))
         XCTAssertEqual(BluetoothUUID.wap.name, "WAP")

    }

    /// Test WAP Client
    func testWapClient() {

         XCTAssertEqual(BluetoothUUID.wapClient.rawValue, 0x1114)
         XCTAssertEqual(BluetoothUUID.wapClient.rawValue, 4372)
         XCTAssertEqual(BluetoothUUID.wapClient, .bit16(0x1114))
         XCTAssertEqual(BluetoothUUID.wapClient.name, "WAP Client")

    }

    /// Test PANU
    func testPanu() {

         XCTAssertEqual(BluetoothUUID.panu.rawValue, 0x1115)
         XCTAssertEqual(BluetoothUUID.panu.rawValue, 4373)
         XCTAssertEqual(BluetoothUUID.panu, .bit16(0x1115))
         XCTAssertEqual(BluetoothUUID.panu.name, "PANU")

    }

    /// Test NAP
    func testNap() {

         XCTAssertEqual(BluetoothUUID.nap.rawValue, 0x1116)
         XCTAssertEqual(BluetoothUUID.nap.rawValue, 4374)
         XCTAssertEqual(BluetoothUUID.nap, .bit16(0x1116))
         XCTAssertEqual(BluetoothUUID.nap.name, "NAP")

    }

    /// Test GN
    func testGn() {

         XCTAssertEqual(BluetoothUUID.gn.rawValue, 0x1117)
         XCTAssertEqual(BluetoothUUID.gn.rawValue, 4375)
         XCTAssertEqual(BluetoothUUID.gn, .bit16(0x1117))
         XCTAssertEqual(BluetoothUUID.gn.name, "GN")

    }

    /// Test Direct Printing
    func testDirectPrinting() {

         XCTAssertEqual(BluetoothUUID.directPrinting.rawValue, 0x1118)
         XCTAssertEqual(BluetoothUUID.directPrinting.rawValue, 4376)
         XCTAssertEqual(BluetoothUUID.directPrinting, .bit16(0x1118))
         XCTAssertEqual(BluetoothUUID.directPrinting.name, "Direct Printing")

    }

    /// Test Reference Printing
    func testReferencePrinting() {

         XCTAssertEqual(BluetoothUUID.referencePrinting.rawValue, 0x1119)
         XCTAssertEqual(BluetoothUUID.referencePrinting.rawValue, 4377)
         XCTAssertEqual(BluetoothUUID.referencePrinting, .bit16(0x1119))
         XCTAssertEqual(BluetoothUUID.referencePrinting.name, "Reference Printing")

    }

    /// Test Basic Imaging Profile
    func testBasicImagingProfile() {

         XCTAssertEqual(BluetoothUUID.basicImagingProfile.rawValue, 0x111A)
         XCTAssertEqual(BluetoothUUID.basicImagingProfile.rawValue, 4378)
         XCTAssertEqual(BluetoothUUID.basicImagingProfile, .bit16(0x111A))
         XCTAssertEqual(BluetoothUUID.basicImagingProfile.name, "Basic Imaging Profile")

    }

    /// Test Imaging Responder
    func testImagingResponder() {

         XCTAssertEqual(BluetoothUUID.imagingResponder.rawValue, 0x111B)
         XCTAssertEqual(BluetoothUUID.imagingResponder.rawValue, 4379)
         XCTAssertEqual(BluetoothUUID.imagingResponder, .bit16(0x111B))
         XCTAssertEqual(BluetoothUUID.imagingResponder.name, "Imaging Responder")

    }

    /// Test Imaging Automatic Archive
    func testImagingAutomaticArchive() {

         XCTAssertEqual(BluetoothUUID.imagingAutomaticArchive.rawValue, 0x111C)
         XCTAssertEqual(BluetoothUUID.imagingAutomaticArchive.rawValue, 4380)
         XCTAssertEqual(BluetoothUUID.imagingAutomaticArchive, .bit16(0x111C))
         XCTAssertEqual(BluetoothUUID.imagingAutomaticArchive.name, "Imaging Automatic Archive")

    }

    /// Test Imaging Referenced Objects
    func testImagingReferencedObjects() {

         XCTAssertEqual(BluetoothUUID.imagingReferencedObjects.rawValue, 0x111D)
         XCTAssertEqual(BluetoothUUID.imagingReferencedObjects.rawValue, 4381)
         XCTAssertEqual(BluetoothUUID.imagingReferencedObjects, .bit16(0x111D))
         XCTAssertEqual(BluetoothUUID.imagingReferencedObjects.name, "Imaging Referenced Objects")

    }

    /// Test Handsfree
    func testHandsfree() {

         XCTAssertEqual(BluetoothUUID.handsfree.rawValue, 0x111E)
         XCTAssertEqual(BluetoothUUID.handsfree.rawValue, 4382)
         XCTAssertEqual(BluetoothUUID.handsfree, .bit16(0x111E))
         XCTAssertEqual(BluetoothUUID.handsfree.name, "Handsfree")

    }

    /// Test Handsfree Audio Gateway
    func testHandsfreeAudioGateway() {

         XCTAssertEqual(BluetoothUUID.handsfreeAudioGateway.rawValue, 0x111F)
         XCTAssertEqual(BluetoothUUID.handsfreeAudioGateway.rawValue, 4383)
         XCTAssertEqual(BluetoothUUID.handsfreeAudioGateway, .bit16(0x111F))
         XCTAssertEqual(BluetoothUUID.handsfreeAudioGateway.name, "Handsfree Audio Gateway")

    }

    /// Test Direct Printing Refrence Objects Service
    func testDirectPrintingRefrenceObjectsService() {

         XCTAssertEqual(BluetoothUUID.directPrintingRefrenceObjectsService.rawValue, 0x1120)
         XCTAssertEqual(BluetoothUUID.directPrintingRefrenceObjectsService.rawValue, 4384)
         XCTAssertEqual(BluetoothUUID.directPrintingRefrenceObjectsService, .bit16(0x1120))
         XCTAssertEqual(BluetoothUUID.directPrintingRefrenceObjectsService.name, "Direct Printing Refrence Objects Service")

    }

    /// Test Reflected UI
    func testReflectedUi() {

         XCTAssertEqual(BluetoothUUID.reflectedUi.rawValue, 0x1121)
         XCTAssertEqual(BluetoothUUID.reflectedUi.rawValue, 4385)
         XCTAssertEqual(BluetoothUUID.reflectedUi, .bit16(0x1121))
         XCTAssertEqual(BluetoothUUID.reflectedUi.name, "Reflected UI")

    }

    /// Test Basic Printing
    func testBasicPrinting() {

         XCTAssertEqual(BluetoothUUID.basicPrinting.rawValue, 0x1122)
         XCTAssertEqual(BluetoothUUID.basicPrinting.rawValue, 4386)
         XCTAssertEqual(BluetoothUUID.basicPrinting, .bit16(0x1122))
         XCTAssertEqual(BluetoothUUID.basicPrinting.name, "Basic Printing")

    }

    /// Test Printing Status
    func testPrintingStatus() {

         XCTAssertEqual(BluetoothUUID.printingStatus.rawValue, 0x1123)
         XCTAssertEqual(BluetoothUUID.printingStatus.rawValue, 4387)
         XCTAssertEqual(BluetoothUUID.printingStatus, .bit16(0x1123))
         XCTAssertEqual(BluetoothUUID.printingStatus.name, "Printing Status")

    }

    /// Test Human Interface Device Service
    func testHumanInterfaceDeviceService() {

         XCTAssertEqual(BluetoothUUID.humanInterfaceDeviceService.rawValue, 0x1124)
         XCTAssertEqual(BluetoothUUID.humanInterfaceDeviceService.rawValue, 4388)
         XCTAssertEqual(BluetoothUUID.humanInterfaceDeviceService, .bit16(0x1124))
         XCTAssertEqual(BluetoothUUID.humanInterfaceDeviceService.name, "Human Interface Device Service")

    }

    /// Test Hardcopy Cable Replacement
    func testHardcopyCableReplacement() {

         XCTAssertEqual(BluetoothUUID.hardcopyCableReplacement.rawValue, 0x1125)
         XCTAssertEqual(BluetoothUUID.hardcopyCableReplacement.rawValue, 4389)
         XCTAssertEqual(BluetoothUUID.hardcopyCableReplacement, .bit16(0x1125))
         XCTAssertEqual(BluetoothUUID.hardcopyCableReplacement.name, "Hardcopy Cable Replacement")

    }

    /// Test HCR Print
    func testHcrPrint() {

         XCTAssertEqual(BluetoothUUID.hcrPrint.rawValue, 0x1126)
         XCTAssertEqual(BluetoothUUID.hcrPrint.rawValue, 4390)
         XCTAssertEqual(BluetoothUUID.hcrPrint, .bit16(0x1126))
         XCTAssertEqual(BluetoothUUID.hcrPrint.name, "HCR Print")

    }

    /// Test HCR Scan
    func testHcrScan() {

         XCTAssertEqual(BluetoothUUID.hcrScan.rawValue, 0x1127)
         XCTAssertEqual(BluetoothUUID.hcrScan.rawValue, 4391)
         XCTAssertEqual(BluetoothUUID.hcrScan, .bit16(0x1127))
         XCTAssertEqual(BluetoothUUID.hcrScan.name, "HCR Scan")

    }

    /// Test Common ISDN Access
    func testCommonIsdnAccess() {

         XCTAssertEqual(BluetoothUUID.commonIsdnAccess.rawValue, 0x1128)
         XCTAssertEqual(BluetoothUUID.commonIsdnAccess.rawValue, 4392)
         XCTAssertEqual(BluetoothUUID.commonIsdnAccess, .bit16(0x1128))
         XCTAssertEqual(BluetoothUUID.commonIsdnAccess.name, "Common ISDN Access")

    }

    /// Test SIM Access
    func testSimAccess() {

         XCTAssertEqual(BluetoothUUID.simAccess.rawValue, 0x112D)
         XCTAssertEqual(BluetoothUUID.simAccess.rawValue, 4397)
         XCTAssertEqual(BluetoothUUID.simAccess, .bit16(0x112D))
         XCTAssertEqual(BluetoothUUID.simAccess.name, "SIM Access")

    }

    /// Test Phonebook Access Client
    func testPhonebookAccessClient() {

         XCTAssertEqual(BluetoothUUID.phonebookAccessClient.rawValue, 0x112E)
         XCTAssertEqual(BluetoothUUID.phonebookAccessClient.rawValue, 4398)
         XCTAssertEqual(BluetoothUUID.phonebookAccessClient, .bit16(0x112E))
         XCTAssertEqual(BluetoothUUID.phonebookAccessClient.name, "Phonebook Access Client")

    }

    /// Test Phonebook Access Server
    func testPhonebookAccessServer() {

         XCTAssertEqual(BluetoothUUID.phonebookAccessServer.rawValue, 0x112F)
         XCTAssertEqual(BluetoothUUID.phonebookAccessServer.rawValue, 4399)
         XCTAssertEqual(BluetoothUUID.phonebookAccessServer, .bit16(0x112F))
         XCTAssertEqual(BluetoothUUID.phonebookAccessServer.name, "Phonebook Access Server")

    }

    /// Test Phonebook Access
    func testPhonebookAccess() {

         XCTAssertEqual(BluetoothUUID.phonebookAccess.rawValue, 0x1130)
         XCTAssertEqual(BluetoothUUID.phonebookAccess.rawValue, 4400)
         XCTAssertEqual(BluetoothUUID.phonebookAccess, .bit16(0x1130))
         XCTAssertEqual(BluetoothUUID.phonebookAccess.name, "Phonebook Access")

    }

    /// Test Headset HS
    func testHeadsetHs() {

         XCTAssertEqual(BluetoothUUID.headsetHs.rawValue, 0x1131)
         XCTAssertEqual(BluetoothUUID.headsetHs.rawValue, 4401)
         XCTAssertEqual(BluetoothUUID.headsetHs, .bit16(0x1131))
         XCTAssertEqual(BluetoothUUID.headsetHs.name, "Headset HS")

    }

    /// Test Message Access Server
    func testMessageAccessServer() {

         XCTAssertEqual(BluetoothUUID.messageAccessServer.rawValue, 0x1132)
         XCTAssertEqual(BluetoothUUID.messageAccessServer.rawValue, 4402)
         XCTAssertEqual(BluetoothUUID.messageAccessServer, .bit16(0x1132))
         XCTAssertEqual(BluetoothUUID.messageAccessServer.name, "Message Access Server")

    }

    /// Test Message Notification Server
    func testMessageNotificationServer() {

         XCTAssertEqual(BluetoothUUID.messageNotificationServer.rawValue, 0x1133)
         XCTAssertEqual(BluetoothUUID.messageNotificationServer.rawValue, 4403)
         XCTAssertEqual(BluetoothUUID.messageNotificationServer, .bit16(0x1133))
         XCTAssertEqual(BluetoothUUID.messageNotificationServer.name, "Message Notification Server")

    }

    /// Test Message Access Profile
    func testMessageAccessProfile() {

         XCTAssertEqual(BluetoothUUID.messageAccessProfile.rawValue, 0x1134)
         XCTAssertEqual(BluetoothUUID.messageAccessProfile.rawValue, 4404)
         XCTAssertEqual(BluetoothUUID.messageAccessProfile, .bit16(0x1134))
         XCTAssertEqual(BluetoothUUID.messageAccessProfile.name, "Message Access Profile")

    }

    /// Test GNSS
    func testGnss() {

         XCTAssertEqual(BluetoothUUID.gnss.rawValue, 0x1135)
         XCTAssertEqual(BluetoothUUID.gnss.rawValue, 4405)
         XCTAssertEqual(BluetoothUUID.gnss, .bit16(0x1135))
         XCTAssertEqual(BluetoothUUID.gnss.name, "GNSS")

    }

    /// Test GNSS Server
    func testGnssServer() {

         XCTAssertEqual(BluetoothUUID.gnssServer.rawValue, 0x1136)
         XCTAssertEqual(BluetoothUUID.gnssServer.rawValue, 4406)
         XCTAssertEqual(BluetoothUUID.gnssServer, .bit16(0x1136))
         XCTAssertEqual(BluetoothUUID.gnssServer.name, "GNSS Server")

    }

    /// Test 3D Display
    func testUuid3Ddisplay() {

         XCTAssertEqual(BluetoothUUID.uuid3Ddisplay.rawValue, 0x1137)
         XCTAssertEqual(BluetoothUUID.uuid3Ddisplay.rawValue, 4407)
         XCTAssertEqual(BluetoothUUID.uuid3Ddisplay, .bit16(0x1137))
         XCTAssertEqual(BluetoothUUID.uuid3Ddisplay.name, "3D Display")

    }

    /// Test 3D Glasses
    func testUuid3Dglasses() {

         XCTAssertEqual(BluetoothUUID.uuid3Dglasses.rawValue, 0x1138)
         XCTAssertEqual(BluetoothUUID.uuid3Dglasses.rawValue, 4408)
         XCTAssertEqual(BluetoothUUID.uuid3Dglasses, .bit16(0x1138))
         XCTAssertEqual(BluetoothUUID.uuid3Dglasses.name, "3D Glasses")

    }

    /// Test 3D Synchronization
    func testUuid3Dsynchronization() {

         XCTAssertEqual(BluetoothUUID.uuid3Dsynchronization.rawValue, 0x1139)
         XCTAssertEqual(BluetoothUUID.uuid3Dsynchronization.rawValue, 4409)
         XCTAssertEqual(BluetoothUUID.uuid3Dsynchronization, .bit16(0x1139))
         XCTAssertEqual(BluetoothUUID.uuid3Dsynchronization.name, "3D Synchronization")

    }

    /// Test MPS Profile
    func testMpsProfile() {

         XCTAssertEqual(BluetoothUUID.mpsProfile.rawValue, 0x113A)
         XCTAssertEqual(BluetoothUUID.mpsProfile.rawValue, 4410)
         XCTAssertEqual(BluetoothUUID.mpsProfile, .bit16(0x113A))
         XCTAssertEqual(BluetoothUUID.mpsProfile.name, "MPS Profile")

    }

    /// Test MPS Service
    func testMpsService() {

         XCTAssertEqual(BluetoothUUID.mpsService.rawValue, 0x113B)
         XCTAssertEqual(BluetoothUUID.mpsService.rawValue, 4411)
         XCTAssertEqual(BluetoothUUID.mpsService, .bit16(0x113B))
         XCTAssertEqual(BluetoothUUID.mpsService.name, "MPS Service")

    }

    /// Test PnP Information
    func testPnpInformation() {

         XCTAssertEqual(BluetoothUUID.pnpInformation.rawValue, 0x1200)
         XCTAssertEqual(BluetoothUUID.pnpInformation.rawValue, 4608)
         XCTAssertEqual(BluetoothUUID.pnpInformation, .bit16(0x1200))
         XCTAssertEqual(BluetoothUUID.pnpInformation.name, "PnP Information")

    }

    /// Test Generic Networking
    func testGenericNetworking() {

         XCTAssertEqual(BluetoothUUID.genericNetworking.rawValue, 0x1201)
         XCTAssertEqual(BluetoothUUID.genericNetworking.rawValue, 4609)
         XCTAssertEqual(BluetoothUUID.genericNetworking, .bit16(0x1201))
         XCTAssertEqual(BluetoothUUID.genericNetworking.name, "Generic Networking")

    }

    /// Test Generic File Transfer
    func testGenericFileTransfer() {

         XCTAssertEqual(BluetoothUUID.genericFileTransfer.rawValue, 0x1202)
         XCTAssertEqual(BluetoothUUID.genericFileTransfer.rawValue, 4610)
         XCTAssertEqual(BluetoothUUID.genericFileTransfer, .bit16(0x1202))
         XCTAssertEqual(BluetoothUUID.genericFileTransfer.name, "Generic File Transfer")

    }

    /// Test Generic Audio
    func testGenericAudio() {

         XCTAssertEqual(BluetoothUUID.genericAudio.rawValue, 0x1203)
         XCTAssertEqual(BluetoothUUID.genericAudio.rawValue, 4611)
         XCTAssertEqual(BluetoothUUID.genericAudio, .bit16(0x1203))
         XCTAssertEqual(BluetoothUUID.genericAudio.name, "Generic Audio")

    }

    /// Test Generic Telephony
    func testGenericTelephony() {

         XCTAssertEqual(BluetoothUUID.genericTelephony.rawValue, 0x1204)
         XCTAssertEqual(BluetoothUUID.genericTelephony.rawValue, 4612)
         XCTAssertEqual(BluetoothUUID.genericTelephony, .bit16(0x1204))
         XCTAssertEqual(BluetoothUUID.genericTelephony.name, "Generic Telephony")

    }

    /// Test UPNP Service
    func testUpnpService() {

         XCTAssertEqual(BluetoothUUID.upnpService.rawValue, 0x1205)
         XCTAssertEqual(BluetoothUUID.upnpService.rawValue, 4613)
         XCTAssertEqual(BluetoothUUID.upnpService, .bit16(0x1205))
         XCTAssertEqual(BluetoothUUID.upnpService.name, "UPNP Service")

    }

    /// Test UPNP IP Service
    func testUpnpIpService() {

         XCTAssertEqual(BluetoothUUID.upnpIpService.rawValue, 0x1206)
         XCTAssertEqual(BluetoothUUID.upnpIpService.rawValue, 4614)
         XCTAssertEqual(BluetoothUUID.upnpIpService, .bit16(0x1206))
         XCTAssertEqual(BluetoothUUID.upnpIpService.name, "UPNP IP Service")

    }

    /// Test UPNP IP PAN
    func testUpnpIpPan() {

         XCTAssertEqual(BluetoothUUID.upnpIpPan.rawValue, 0x1300)
         XCTAssertEqual(BluetoothUUID.upnpIpPan.rawValue, 4864)
         XCTAssertEqual(BluetoothUUID.upnpIpPan, .bit16(0x1300))
         XCTAssertEqual(BluetoothUUID.upnpIpPan.name, "UPNP IP PAN")

    }

    /// Test UPNP IP LAP
    func testUpnpIpLap() {

         XCTAssertEqual(BluetoothUUID.upnpIpLap.rawValue, 0x1301)
         XCTAssertEqual(BluetoothUUID.upnpIpLap.rawValue, 4865)
         XCTAssertEqual(BluetoothUUID.upnpIpLap, .bit16(0x1301))
         XCTAssertEqual(BluetoothUUID.upnpIpLap.name, "UPNP IP LAP")

    }

    /// Test UPNP IP L2CAP
    func testUpnpIpL2Cap() {

         XCTAssertEqual(BluetoothUUID.upnpIpL2Cap.rawValue, 0x1302)
         XCTAssertEqual(BluetoothUUID.upnpIpL2Cap.rawValue, 4866)
         XCTAssertEqual(BluetoothUUID.upnpIpL2Cap, .bit16(0x1302))
         XCTAssertEqual(BluetoothUUID.upnpIpL2Cap.name, "UPNP IP L2CAP")

    }

    /// Test Video Source
    func testVideoSource() {

         XCTAssertEqual(BluetoothUUID.videoSource.rawValue, 0x1303)
         XCTAssertEqual(BluetoothUUID.videoSource.rawValue, 4867)
         XCTAssertEqual(BluetoothUUID.videoSource, .bit16(0x1303))
         XCTAssertEqual(BluetoothUUID.videoSource.name, "Video Source")

    }

    /// Test Video Sink
    func testVideoSink() {

         XCTAssertEqual(BluetoothUUID.videoSink.rawValue, 0x1304)
         XCTAssertEqual(BluetoothUUID.videoSink.rawValue, 4868)
         XCTAssertEqual(BluetoothUUID.videoSink, .bit16(0x1304))
         XCTAssertEqual(BluetoothUUID.videoSink.name, "Video Sink")

    }

    /// Test Video Distribution
    func testVideoDistribution() {

         XCTAssertEqual(BluetoothUUID.videoDistribution.rawValue, 0x1305)
         XCTAssertEqual(BluetoothUUID.videoDistribution.rawValue, 4869)
         XCTAssertEqual(BluetoothUUID.videoDistribution, .bit16(0x1305))
         XCTAssertEqual(BluetoothUUID.videoDistribution.name, "Video Distribution")

    }

    /// Test HDP
    func testHdp() {

         XCTAssertEqual(BluetoothUUID.hdp.rawValue, 0x1400)
         XCTAssertEqual(BluetoothUUID.hdp.rawValue, 5120)
         XCTAssertEqual(BluetoothUUID.hdp, .bit16(0x1400))
         XCTAssertEqual(BluetoothUUID.hdp.name, "HDP")

    }

    /// Test HDP Source
    func testHdpSource() {

         XCTAssertEqual(BluetoothUUID.hdpSource.rawValue, 0x1401)
         XCTAssertEqual(BluetoothUUID.hdpSource.rawValue, 5121)
         XCTAssertEqual(BluetoothUUID.hdpSource, .bit16(0x1401))
         XCTAssertEqual(BluetoothUUID.hdpSource.name, "HDP Source")

    }

    /// Test HDP Sink
    func testHdpSink() {

         XCTAssertEqual(BluetoothUUID.hdpSink.rawValue, 0x1402)
         XCTAssertEqual(BluetoothUUID.hdpSink.rawValue, 5122)
         XCTAssertEqual(BluetoothUUID.hdpSink, .bit16(0x1402))
         XCTAssertEqual(BluetoothUUID.hdpSink.name, "HDP Sink")

    }

    /// Test Generic Access Profile
    func testGenericAccessProfile() {

         XCTAssertEqual(BluetoothUUID.genericAccessProfile.rawValue, 0x1800)
         XCTAssertEqual(BluetoothUUID.genericAccessProfile.rawValue, 6144)
         XCTAssertEqual(BluetoothUUID.genericAccessProfile, .bit16(0x1800))
         XCTAssertEqual(BluetoothUUID.genericAccessProfile.name, "Generic Access Profile")

    }

    /// Test Generic Attribute Profile
    func testGenericAttributeProfile() {

         XCTAssertEqual(BluetoothUUID.genericAttributeProfile.rawValue, 0x1801)
         XCTAssertEqual(BluetoothUUID.genericAttributeProfile.rawValue, 6145)
         XCTAssertEqual(BluetoothUUID.genericAttributeProfile, .bit16(0x1801))
         XCTAssertEqual(BluetoothUUID.genericAttributeProfile.name, "Generic Attribute Profile")

    }

    /// Test Immediate Alert
    func testImmediateAlert() {

         XCTAssertEqual(BluetoothUUID.immediateAlert.rawValue, 0x1802)
         XCTAssertEqual(BluetoothUUID.immediateAlert.rawValue, 6146)
         XCTAssertEqual(BluetoothUUID.immediateAlert, .bit16(0x1802))
         XCTAssertEqual(BluetoothUUID.immediateAlert.name, "Immediate Alert")

    }

    /// Test Link Loss
    func testLinkLoss() {

         XCTAssertEqual(BluetoothUUID.linkLoss.rawValue, 0x1803)
         XCTAssertEqual(BluetoothUUID.linkLoss.rawValue, 6147)
         XCTAssertEqual(BluetoothUUID.linkLoss, .bit16(0x1803))
         XCTAssertEqual(BluetoothUUID.linkLoss.name, "Link Loss")

    }

    /// Test Tx Power
    func testTxPower() {

         XCTAssertEqual(BluetoothUUID.txPower.rawValue, 0x1804)
         XCTAssertEqual(BluetoothUUID.txPower.rawValue, 6148)
         XCTAssertEqual(BluetoothUUID.txPower, .bit16(0x1804))
         XCTAssertEqual(BluetoothUUID.txPower.name, "Tx Power")

    }

    /// Test Current Time Service
    func testCurrentTimeService() {

         XCTAssertEqual(BluetoothUUID.currentTimeService.rawValue, 0x1805)
         XCTAssertEqual(BluetoothUUID.currentTimeService.rawValue, 6149)
         XCTAssertEqual(BluetoothUUID.currentTimeService, .bit16(0x1805))
         XCTAssertEqual(BluetoothUUID.currentTimeService.name, "Current Time Service")

    }

    /// Test Reference Time Update Service
    func testReferenceTimeUpdateService() {

         XCTAssertEqual(BluetoothUUID.referenceTimeUpdateService.rawValue, 0x1806)
         XCTAssertEqual(BluetoothUUID.referenceTimeUpdateService.rawValue, 6150)
         XCTAssertEqual(BluetoothUUID.referenceTimeUpdateService, .bit16(0x1806))
         XCTAssertEqual(BluetoothUUID.referenceTimeUpdateService.name, "Reference Time Update Service")

    }

    /// Test Next DST Change Service
    func testNextDstChangeService() {

         XCTAssertEqual(BluetoothUUID.nextDstChangeService.rawValue, 0x1807)
         XCTAssertEqual(BluetoothUUID.nextDstChangeService.rawValue, 6151)
         XCTAssertEqual(BluetoothUUID.nextDstChangeService, .bit16(0x1807))
         XCTAssertEqual(BluetoothUUID.nextDstChangeService.name, "Next DST Change Service")

    }

    /// Test Glucose
    func testGlucose() {

         XCTAssertEqual(BluetoothUUID.glucose.rawValue, 0x1808)
         XCTAssertEqual(BluetoothUUID.glucose.rawValue, 6152)
         XCTAssertEqual(BluetoothUUID.glucose, .bit16(0x1808))
         XCTAssertEqual(BluetoothUUID.glucose.name, "Glucose")

    }

    /// Test Health Thermometer
    func testHealthThermometer() {

         XCTAssertEqual(BluetoothUUID.healthThermometer.rawValue, 0x1809)
         XCTAssertEqual(BluetoothUUID.healthThermometer.rawValue, 6153)
         XCTAssertEqual(BluetoothUUID.healthThermometer, .bit16(0x1809))
         XCTAssertEqual(BluetoothUUID.healthThermometer.name, "Health Thermometer")

    }

    /// Test Device Information
    func testDeviceInformation() {

         XCTAssertEqual(BluetoothUUID.deviceInformation.rawValue, 0x180A)
         XCTAssertEqual(BluetoothUUID.deviceInformation.rawValue, 6154)
         XCTAssertEqual(BluetoothUUID.deviceInformation, .bit16(0x180A))
         XCTAssertEqual(BluetoothUUID.deviceInformation.name, "Device Information")

    }

    /// Test Heart Rate
    func testHeartRate() {

         XCTAssertEqual(BluetoothUUID.heartRate.rawValue, 0x180D)
         XCTAssertEqual(BluetoothUUID.heartRate.rawValue, 6157)
         XCTAssertEqual(BluetoothUUID.heartRate, .bit16(0x180D))
         XCTAssertEqual(BluetoothUUID.heartRate.name, "Heart Rate")

    }

    /// Test Phone Alert Status Service
    func testPhoneAlertStatusService() {

         XCTAssertEqual(BluetoothUUID.phoneAlertStatusService.rawValue, 0x180E)
         XCTAssertEqual(BluetoothUUID.phoneAlertStatusService.rawValue, 6158)
         XCTAssertEqual(BluetoothUUID.phoneAlertStatusService, .bit16(0x180E))
         XCTAssertEqual(BluetoothUUID.phoneAlertStatusService.name, "Phone Alert Status Service")

    }

    /// Test Battery Service
    func testBatteryService() {

         XCTAssertEqual(BluetoothUUID.batteryService.rawValue, 0x180F)
         XCTAssertEqual(BluetoothUUID.batteryService.rawValue, 6159)
         XCTAssertEqual(BluetoothUUID.batteryService, .bit16(0x180F))
         XCTAssertEqual(BluetoothUUID.batteryService.name, "Battery Service")

    }

    /// Test Blood Pressure
    func testBloodPressure() {

         XCTAssertEqual(BluetoothUUID.bloodPressure.rawValue, 0x1810)
         XCTAssertEqual(BluetoothUUID.bloodPressure.rawValue, 6160)
         XCTAssertEqual(BluetoothUUID.bloodPressure, .bit16(0x1810))
         XCTAssertEqual(BluetoothUUID.bloodPressure.name, "Blood Pressure")

    }

    /// Test Alert Notification Service
    func testAlertNotificationService() {

         XCTAssertEqual(BluetoothUUID.alertNotificationService.rawValue, 0x1811)
         XCTAssertEqual(BluetoothUUID.alertNotificationService.rawValue, 6161)
         XCTAssertEqual(BluetoothUUID.alertNotificationService, .bit16(0x1811))
         XCTAssertEqual(BluetoothUUID.alertNotificationService.name, "Alert Notification Service")

    }

    /// Test Human Interface Device
    func testHumanInterfaceDevice() {

         XCTAssertEqual(BluetoothUUID.humanInterfaceDevice.rawValue, 0x1812)
         XCTAssertEqual(BluetoothUUID.humanInterfaceDevice.rawValue, 6162)
         XCTAssertEqual(BluetoothUUID.humanInterfaceDevice, .bit16(0x1812))
         XCTAssertEqual(BluetoothUUID.humanInterfaceDevice.name, "Human Interface Device")

    }

    /// Test Scan Parameters
    func testScanParameters() {

         XCTAssertEqual(BluetoothUUID.scanParameters.rawValue, 0x1813)
         XCTAssertEqual(BluetoothUUID.scanParameters.rawValue, 6163)
         XCTAssertEqual(BluetoothUUID.scanParameters, .bit16(0x1813))
         XCTAssertEqual(BluetoothUUID.scanParameters.name, "Scan Parameters")

    }

    /// Test Running Speed and Cadence
    func testRunningSpeedAndCadence() {

         XCTAssertEqual(BluetoothUUID.runningSpeedAndCadence.rawValue, 0x1814)
         XCTAssertEqual(BluetoothUUID.runningSpeedAndCadence.rawValue, 6164)
         XCTAssertEqual(BluetoothUUID.runningSpeedAndCadence, .bit16(0x1814))
         XCTAssertEqual(BluetoothUUID.runningSpeedAndCadence.name, "Running Speed and Cadence")

    }

    /// Test Automation IO
    func testAutomationIo() {

         XCTAssertEqual(BluetoothUUID.automationIo.rawValue, 0x1815)
         XCTAssertEqual(BluetoothUUID.automationIo.rawValue, 6165)
         XCTAssertEqual(BluetoothUUID.automationIo, .bit16(0x1815))
         XCTAssertEqual(BluetoothUUID.automationIo.name, "Automation IO")

    }

    /// Test Cycling Speed and Cadence
    func testCyclingSpeedAndCadence() {

         XCTAssertEqual(BluetoothUUID.cyclingSpeedAndCadence.rawValue, 0x1816)
         XCTAssertEqual(BluetoothUUID.cyclingSpeedAndCadence.rawValue, 6166)
         XCTAssertEqual(BluetoothUUID.cyclingSpeedAndCadence, .bit16(0x1816))
         XCTAssertEqual(BluetoothUUID.cyclingSpeedAndCadence.name, "Cycling Speed and Cadence")

    }

    /// Test Cycling Power
    func testCyclingPower() {

         XCTAssertEqual(BluetoothUUID.cyclingPower.rawValue, 0x1818)
         XCTAssertEqual(BluetoothUUID.cyclingPower.rawValue, 6168)
         XCTAssertEqual(BluetoothUUID.cyclingPower, .bit16(0x1818))
         XCTAssertEqual(BluetoothUUID.cyclingPower.name, "Cycling Power")

    }

    /// Test Location and Navigation
    func testLocationAndNavigation() {

         XCTAssertEqual(BluetoothUUID.locationAndNavigation.rawValue, 0x1819)
         XCTAssertEqual(BluetoothUUID.locationAndNavigation.rawValue, 6169)
         XCTAssertEqual(BluetoothUUID.locationAndNavigation, .bit16(0x1819))
         XCTAssertEqual(BluetoothUUID.locationAndNavigation.name, "Location and Navigation")

    }

    /// Test Environmental Sensing
    func testEnvironmentalSensing() {

         XCTAssertEqual(BluetoothUUID.environmentalSensing.rawValue, 0x181A)
         XCTAssertEqual(BluetoothUUID.environmentalSensing.rawValue, 6170)
         XCTAssertEqual(BluetoothUUID.environmentalSensing, .bit16(0x181A))
         XCTAssertEqual(BluetoothUUID.environmentalSensing.name, "Environmental Sensing")

    }

    /// Test Body Composition
    func testBodyComposition() {

         XCTAssertEqual(BluetoothUUID.bodyComposition.rawValue, 0x181B)
         XCTAssertEqual(BluetoothUUID.bodyComposition.rawValue, 6171)
         XCTAssertEqual(BluetoothUUID.bodyComposition, .bit16(0x181B))
         XCTAssertEqual(BluetoothUUID.bodyComposition.name, "Body Composition")

    }

    /// Test User Data
    func testUserData() {

         XCTAssertEqual(BluetoothUUID.userData.rawValue, 0x181C)
         XCTAssertEqual(BluetoothUUID.userData.rawValue, 6172)
         XCTAssertEqual(BluetoothUUID.userData, .bit16(0x181C))
         XCTAssertEqual(BluetoothUUID.userData.name, "User Data")

    }

    /// Test Weight Scale
    func testWeightScale() {

         XCTAssertEqual(BluetoothUUID.weightScale.rawValue, 0x181D)
         XCTAssertEqual(BluetoothUUID.weightScale.rawValue, 6173)
         XCTAssertEqual(BluetoothUUID.weightScale, .bit16(0x181D))
         XCTAssertEqual(BluetoothUUID.weightScale.name, "Weight Scale")

    }

    /// Test Bond Management
    func testBondManagement() {

         XCTAssertEqual(BluetoothUUID.bondManagement.rawValue, 0x181E)
         XCTAssertEqual(BluetoothUUID.bondManagement.rawValue, 6174)
         XCTAssertEqual(BluetoothUUID.bondManagement, .bit16(0x181E))
         XCTAssertEqual(BluetoothUUID.bondManagement.name, "Bond Management")

    }

    /// Test Continuous Glucose Monitoring
    func testContinuousGlucoseMonitoring() {

         XCTAssertEqual(BluetoothUUID.continuousGlucoseMonitoring.rawValue, 0x181F)
         XCTAssertEqual(BluetoothUUID.continuousGlucoseMonitoring.rawValue, 6175)
         XCTAssertEqual(BluetoothUUID.continuousGlucoseMonitoring, .bit16(0x181F))
         XCTAssertEqual(BluetoothUUID.continuousGlucoseMonitoring.name, "Continuous Glucose Monitoring")

    }

    /// Test Internet Protocol Support
    func testInternetProtocolSupport() {

         XCTAssertEqual(BluetoothUUID.internetProtocolSupport.rawValue, 0x1820)
         XCTAssertEqual(BluetoothUUID.internetProtocolSupport.rawValue, 6176)
         XCTAssertEqual(BluetoothUUID.internetProtocolSupport, .bit16(0x1820))
         XCTAssertEqual(BluetoothUUID.internetProtocolSupport.name, "Internet Protocol Support")

    }

    /// Test Indoor Positioning
    func testIndoorPositioning() {

         XCTAssertEqual(BluetoothUUID.indoorPositioning.rawValue, 0x1821)
         XCTAssertEqual(BluetoothUUID.indoorPositioning.rawValue, 6177)
         XCTAssertEqual(BluetoothUUID.indoorPositioning, .bit16(0x1821))
         XCTAssertEqual(BluetoothUUID.indoorPositioning.name, "Indoor Positioning")

    }

    /// Test Pulse Oximeter
    func testPulseOximeter() {

         XCTAssertEqual(BluetoothUUID.pulseOximeter.rawValue, 0x1822)
         XCTAssertEqual(BluetoothUUID.pulseOximeter.rawValue, 6178)
         XCTAssertEqual(BluetoothUUID.pulseOximeter, .bit16(0x1822))
         XCTAssertEqual(BluetoothUUID.pulseOximeter.name, "Pulse Oximeter")

    }

    /// Test HTTP Proxy
    func testHttpProxy() {

         XCTAssertEqual(BluetoothUUID.httpProxy.rawValue, 0x1823)
         XCTAssertEqual(BluetoothUUID.httpProxy.rawValue, 6179)
         XCTAssertEqual(BluetoothUUID.httpProxy, .bit16(0x1823))
         XCTAssertEqual(BluetoothUUID.httpProxy.name, "HTTP Proxy")

    }

    /// Test Transport Discovery
    func testTransportDiscovery() {

         XCTAssertEqual(BluetoothUUID.transportDiscovery.rawValue, 0x1824)
         XCTAssertEqual(BluetoothUUID.transportDiscovery.rawValue, 6180)
         XCTAssertEqual(BluetoothUUID.transportDiscovery, .bit16(0x1824))
         XCTAssertEqual(BluetoothUUID.transportDiscovery.name, "Transport Discovery")

    }

    /// Test Object Transfer
    func testObjectTransfer() {

         XCTAssertEqual(BluetoothUUID.objectTransfer.rawValue, 0x1825)
         XCTAssertEqual(BluetoothUUID.objectTransfer.rawValue, 6181)
         XCTAssertEqual(BluetoothUUID.objectTransfer, .bit16(0x1825))
         XCTAssertEqual(BluetoothUUID.objectTransfer.name, "Object Transfer")

    }

    /// Test Primary Service
    func testPrimaryService() {

         XCTAssertEqual(BluetoothUUID.primaryService.rawValue, 0x2800)
         XCTAssertEqual(BluetoothUUID.primaryService.rawValue, 10240)
         XCTAssertEqual(BluetoothUUID.primaryService, .bit16(0x2800))
         XCTAssertEqual(BluetoothUUID.primaryService.name, "Primary Service")

    }

    /// Test Secondary Service
    func testSecondaryService() {

         XCTAssertEqual(BluetoothUUID.secondaryService.rawValue, 0x2801)
         XCTAssertEqual(BluetoothUUID.secondaryService.rawValue, 10241)
         XCTAssertEqual(BluetoothUUID.secondaryService, .bit16(0x2801))
         XCTAssertEqual(BluetoothUUID.secondaryService.name, "Secondary Service")

    }

    /// Test Include
    func testInclude() {

         XCTAssertEqual(BluetoothUUID.include.rawValue, 0x2802)
         XCTAssertEqual(BluetoothUUID.include.rawValue, 10242)
         XCTAssertEqual(BluetoothUUID.include, .bit16(0x2802))
         XCTAssertEqual(BluetoothUUID.include.name, "Include")

    }

    /// Test Characteristic
    func testCharacteristic() {

         XCTAssertEqual(BluetoothUUID.characteristic.rawValue, 0x2803)
         XCTAssertEqual(BluetoothUUID.characteristic.rawValue, 10243)
         XCTAssertEqual(BluetoothUUID.characteristic, .bit16(0x2803))
         XCTAssertEqual(BluetoothUUID.characteristic.name, "Characteristic")

    }

    /// Test Characteristic Extended Properties
    func testCharacteristicExtendedProperties() {

         XCTAssertEqual(BluetoothUUID.characteristicExtendedProperties.rawValue, 0x2900)
         XCTAssertEqual(BluetoothUUID.characteristicExtendedProperties.rawValue, 10496)
         XCTAssertEqual(BluetoothUUID.characteristicExtendedProperties, .bit16(0x2900))
         XCTAssertEqual(BluetoothUUID.characteristicExtendedProperties.name, "Characteristic Extended Properties")

    }

    /// Test Characteristic User Description
    func testCharacteristicUserDescription() {

         XCTAssertEqual(BluetoothUUID.characteristicUserDescription.rawValue, 0x2901)
         XCTAssertEqual(BluetoothUUID.characteristicUserDescription.rawValue, 10497)
         XCTAssertEqual(BluetoothUUID.characteristicUserDescription, .bit16(0x2901))
         XCTAssertEqual(BluetoothUUID.characteristicUserDescription.name, "Characteristic User Description")

    }

    /// Test Client Characteristic Configuration
    func testClientCharacteristicConfiguration() {

         XCTAssertEqual(BluetoothUUID.clientCharacteristicConfiguration.rawValue, 0x2902)
         XCTAssertEqual(BluetoothUUID.clientCharacteristicConfiguration.rawValue, 10498)
         XCTAssertEqual(BluetoothUUID.clientCharacteristicConfiguration, .bit16(0x2902))
         XCTAssertEqual(BluetoothUUID.clientCharacteristicConfiguration.name, "Client Characteristic Configuration")

    }

    /// Test Server Characteristic Configuration
    func testServerCharacteristicConfiguration() {

         XCTAssertEqual(BluetoothUUID.serverCharacteristicConfiguration.rawValue, 0x2903)
         XCTAssertEqual(BluetoothUUID.serverCharacteristicConfiguration.rawValue, 10499)
         XCTAssertEqual(BluetoothUUID.serverCharacteristicConfiguration, .bit16(0x2903))
         XCTAssertEqual(BluetoothUUID.serverCharacteristicConfiguration.name, "Server Characteristic Configuration")

    }

    /// Test Characteristic Format
    func testCharacteristicFormat() {

         XCTAssertEqual(BluetoothUUID.characteristicFormat.rawValue, 0x2904)
         XCTAssertEqual(BluetoothUUID.characteristicFormat.rawValue, 10500)
         XCTAssertEqual(BluetoothUUID.characteristicFormat, .bit16(0x2904))
         XCTAssertEqual(BluetoothUUID.characteristicFormat.name, "Characteristic Format")

    }

    /// Test Characteristic Aggregate Format
    func testCharacteristicAggregateFormat() {

         XCTAssertEqual(BluetoothUUID.characteristicAggregateFormat.rawValue, 0x2905)
         XCTAssertEqual(BluetoothUUID.characteristicAggregateFormat.rawValue, 10501)
         XCTAssertEqual(BluetoothUUID.characteristicAggregateFormat, .bit16(0x2905))
         XCTAssertEqual(BluetoothUUID.characteristicAggregateFormat.name, "Characteristic Aggregate Format")

    }

    /// Test Valid Range
    func testValidRange() {

         XCTAssertEqual(BluetoothUUID.validRange.rawValue, 0x2906)
         XCTAssertEqual(BluetoothUUID.validRange.rawValue, 10502)
         XCTAssertEqual(BluetoothUUID.validRange, .bit16(0x2906))
         XCTAssertEqual(BluetoothUUID.validRange.name, "Valid Range")

    }

    /// Test External Report Reference
    func testExternalReportReference() {

         XCTAssertEqual(BluetoothUUID.externalReportReference.rawValue, 0x2907)
         XCTAssertEqual(BluetoothUUID.externalReportReference.rawValue, 10503)
         XCTAssertEqual(BluetoothUUID.externalReportReference, .bit16(0x2907))
         XCTAssertEqual(BluetoothUUID.externalReportReference.name, "External Report Reference")

    }

    /// Test Report Reference
    func testReportReference() {

         XCTAssertEqual(BluetoothUUID.reportReference.rawValue, 0x2908)
         XCTAssertEqual(BluetoothUUID.reportReference.rawValue, 10504)
         XCTAssertEqual(BluetoothUUID.reportReference, .bit16(0x2908))
         XCTAssertEqual(BluetoothUUID.reportReference.name, "Report Reference")

    }

    /// Test Number of Digitals
    func testNumberOfDigitals() {

         XCTAssertEqual(BluetoothUUID.numberOfDigitals.rawValue, 0x2909)
         XCTAssertEqual(BluetoothUUID.numberOfDigitals.rawValue, 10505)
         XCTAssertEqual(BluetoothUUID.numberOfDigitals, .bit16(0x2909))
         XCTAssertEqual(BluetoothUUID.numberOfDigitals.name, "Number of Digitals")

    }

    /// Test Value Trigger Setting
    func testValueTriggerSetting() {

         XCTAssertEqual(BluetoothUUID.valueTriggerSetting.rawValue, 0x290A)
         XCTAssertEqual(BluetoothUUID.valueTriggerSetting.rawValue, 10506)
         XCTAssertEqual(BluetoothUUID.valueTriggerSetting, .bit16(0x290A))
         XCTAssertEqual(BluetoothUUID.valueTriggerSetting.name, "Value Trigger Setting")

    }

    /// Test Environmental Sensing Configuration
    func testEnvironmentalSensingConfiguration() {

         XCTAssertEqual(BluetoothUUID.environmentalSensingConfiguration.rawValue, 0x290B)
         XCTAssertEqual(BluetoothUUID.environmentalSensingConfiguration.rawValue, 10507)
         XCTAssertEqual(BluetoothUUID.environmentalSensingConfiguration, .bit16(0x290B))
         XCTAssertEqual(BluetoothUUID.environmentalSensingConfiguration.name, "Environmental Sensing Configuration")

    }

    /// Test Environmental Sensing Measurement
    func testEnvironmentalSensingMeasurement() {

         XCTAssertEqual(BluetoothUUID.environmentalSensingMeasurement.rawValue, 0x290C)
         XCTAssertEqual(BluetoothUUID.environmentalSensingMeasurement.rawValue, 10508)
         XCTAssertEqual(BluetoothUUID.environmentalSensingMeasurement, .bit16(0x290C))
         XCTAssertEqual(BluetoothUUID.environmentalSensingMeasurement.name, "Environmental Sensing Measurement")

    }

    /// Test Environmental Sensing Trigger Setting
    func testEnvironmentalSensingTriggerSetting() {

         XCTAssertEqual(BluetoothUUID.environmentalSensingTriggerSetting.rawValue, 0x290D)
         XCTAssertEqual(BluetoothUUID.environmentalSensingTriggerSetting.rawValue, 10509)
         XCTAssertEqual(BluetoothUUID.environmentalSensingTriggerSetting, .bit16(0x290D))
         XCTAssertEqual(BluetoothUUID.environmentalSensingTriggerSetting.name, "Environmental Sensing Trigger Setting")

    }

    /// Test Time Trigger Setting
    func testTimeTriggerSetting() {

         XCTAssertEqual(BluetoothUUID.timeTriggerSetting.rawValue, 0x290E)
         XCTAssertEqual(BluetoothUUID.timeTriggerSetting.rawValue, 10510)
         XCTAssertEqual(BluetoothUUID.timeTriggerSetting, .bit16(0x290E))
         XCTAssertEqual(BluetoothUUID.timeTriggerSetting.name, "Time Trigger Setting")

    }

    /// Test Device Name
    func testDeviceName() {

         XCTAssertEqual(BluetoothUUID.deviceName.rawValue, 0x2A00)
         XCTAssertEqual(BluetoothUUID.deviceName.rawValue, 10752)
         XCTAssertEqual(BluetoothUUID.deviceName, .bit16(0x2A00))
         XCTAssertEqual(BluetoothUUID.deviceName.name, "Device Name")

    }

    /// Test Appearance
    func testAppearance() {

         XCTAssertEqual(BluetoothUUID.appearance.rawValue, 0x2A01)
         XCTAssertEqual(BluetoothUUID.appearance.rawValue, 10753)
         XCTAssertEqual(BluetoothUUID.appearance, .bit16(0x2A01))
         XCTAssertEqual(BluetoothUUID.appearance.name, "Appearance")

    }

    /// Test Peripheral Privacy Flag
    func testPeripheralPrivacyFlag() {

         XCTAssertEqual(BluetoothUUID.peripheralPrivacyFlag.rawValue, 0x2A02)
         XCTAssertEqual(BluetoothUUID.peripheralPrivacyFlag.rawValue, 10754)
         XCTAssertEqual(BluetoothUUID.peripheralPrivacyFlag, .bit16(0x2A02))
         XCTAssertEqual(BluetoothUUID.peripheralPrivacyFlag.name, "Peripheral Privacy Flag")

    }

    /// Test Reconnection Address
    func testReconnectionAddress() {

         XCTAssertEqual(BluetoothUUID.reconnectionAddress.rawValue, 0x2A03)
         XCTAssertEqual(BluetoothUUID.reconnectionAddress.rawValue, 10755)
         XCTAssertEqual(BluetoothUUID.reconnectionAddress, .bit16(0x2A03))
         XCTAssertEqual(BluetoothUUID.reconnectionAddress.name, "Reconnection Address")

    }

    /// Test Peripheral Preferred Connection Parameters
    func testPeripheralPreferredConnectionParameters() {

         XCTAssertEqual(BluetoothUUID.peripheralPreferredConnectionParameters.rawValue, 0x2A04)
         XCTAssertEqual(BluetoothUUID.peripheralPreferredConnectionParameters.rawValue, 10756)
         XCTAssertEqual(BluetoothUUID.peripheralPreferredConnectionParameters, .bit16(0x2A04))
         XCTAssertEqual(BluetoothUUID.peripheralPreferredConnectionParameters.name, "Peripheral Preferred Connection Parameters")

    }

    /// Test Service Changed
    func testServiceChanged() {

         XCTAssertEqual(BluetoothUUID.serviceChanged.rawValue, 0x2A05)
         XCTAssertEqual(BluetoothUUID.serviceChanged.rawValue, 10757)
         XCTAssertEqual(BluetoothUUID.serviceChanged, .bit16(0x2A05))
         XCTAssertEqual(BluetoothUUID.serviceChanged.name, "Service Changed")

    }

    /// Test Alert Level
    func testAlertLevel() {

         XCTAssertEqual(BluetoothUUID.alertLevel.rawValue, 0x2A06)
         XCTAssertEqual(BluetoothUUID.alertLevel.rawValue, 10758)
         XCTAssertEqual(BluetoothUUID.alertLevel, .bit16(0x2A06))
         XCTAssertEqual(BluetoothUUID.alertLevel.name, "Alert Level")

    }

    /// Test Tx Power Level
    func testTxPowerLevel() {

         XCTAssertEqual(BluetoothUUID.txPowerLevel.rawValue, 0x2A07)
         XCTAssertEqual(BluetoothUUID.txPowerLevel.rawValue, 10759)
         XCTAssertEqual(BluetoothUUID.txPowerLevel, .bit16(0x2A07))
         XCTAssertEqual(BluetoothUUID.txPowerLevel.name, "Tx Power Level")

    }

    /// Test Date Time
    func testDateTime() {

         XCTAssertEqual(BluetoothUUID.dateTime.rawValue, 0x2A08)
         XCTAssertEqual(BluetoothUUID.dateTime.rawValue, 10760)
         XCTAssertEqual(BluetoothUUID.dateTime, .bit16(0x2A08))
         XCTAssertEqual(BluetoothUUID.dateTime.name, "Date Time")

    }

    /// Test Day of Week
    func testDayOfWeek() {

         XCTAssertEqual(BluetoothUUID.dayOfWeek.rawValue, 0x2A09)
         XCTAssertEqual(BluetoothUUID.dayOfWeek.rawValue, 10761)
         XCTAssertEqual(BluetoothUUID.dayOfWeek, .bit16(0x2A09))
         XCTAssertEqual(BluetoothUUID.dayOfWeek.name, "Day of Week")

    }

    /// Test Day Date Time
    func testDayDateTime() {

         XCTAssertEqual(BluetoothUUID.dayDateTime.rawValue, 0x2A0A)
         XCTAssertEqual(BluetoothUUID.dayDateTime.rawValue, 10762)
         XCTAssertEqual(BluetoothUUID.dayDateTime, .bit16(0x2A0A))
         XCTAssertEqual(BluetoothUUID.dayDateTime.name, "Day Date Time")

    }

    /// Test Exact Time 256
    func testExactTime256() {

         XCTAssertEqual(BluetoothUUID.exactTime256.rawValue, 0x2A0C)
         XCTAssertEqual(BluetoothUUID.exactTime256.rawValue, 10764)
         XCTAssertEqual(BluetoothUUID.exactTime256, .bit16(0x2A0C))
         XCTAssertEqual(BluetoothUUID.exactTime256.name, "Exact Time 256")

    }

    /// Test DST Offset
    func testDstOffset() {

         XCTAssertEqual(BluetoothUUID.dstOffset.rawValue, 0x2A0D)
         XCTAssertEqual(BluetoothUUID.dstOffset.rawValue, 10765)
         XCTAssertEqual(BluetoothUUID.dstOffset, .bit16(0x2A0D))
         XCTAssertEqual(BluetoothUUID.dstOffset.name, "DST Offset")

    }

    /// Test Time Zone
    func testTimeZone() {

         XCTAssertEqual(BluetoothUUID.timeZone.rawValue, 0x2A0E)
         XCTAssertEqual(BluetoothUUID.timeZone.rawValue, 10766)
         XCTAssertEqual(BluetoothUUID.timeZone, .bit16(0x2A0E))
         XCTAssertEqual(BluetoothUUID.timeZone.name, "Time Zone")

    }

    /// Test Local Time Information
    func testLocalTimeInformation() {

         XCTAssertEqual(BluetoothUUID.localTimeInformation.rawValue, 0x2A0F)
         XCTAssertEqual(BluetoothUUID.localTimeInformation.rawValue, 10767)
         XCTAssertEqual(BluetoothUUID.localTimeInformation, .bit16(0x2A0F))
         XCTAssertEqual(BluetoothUUID.localTimeInformation.name, "Local Time Information")

    }

    /// Test Time with DST
    func testTimeWithDst() {

         XCTAssertEqual(BluetoothUUID.timeWithDst.rawValue, 0x2A11)
         XCTAssertEqual(BluetoothUUID.timeWithDst.rawValue, 10769)
         XCTAssertEqual(BluetoothUUID.timeWithDst, .bit16(0x2A11))
         XCTAssertEqual(BluetoothUUID.timeWithDst.name, "Time with DST")

    }

    /// Test Time Accuracy
    func testTimeAccuracy() {

         XCTAssertEqual(BluetoothUUID.timeAccuracy.rawValue, 0x2A12)
         XCTAssertEqual(BluetoothUUID.timeAccuracy.rawValue, 10770)
         XCTAssertEqual(BluetoothUUID.timeAccuracy, .bit16(0x2A12))
         XCTAssertEqual(BluetoothUUID.timeAccuracy.name, "Time Accuracy")

    }

    /// Test Time Source
    func testTimeSource() {

         XCTAssertEqual(BluetoothUUID.timeSource.rawValue, 0x2A13)
         XCTAssertEqual(BluetoothUUID.timeSource.rawValue, 10771)
         XCTAssertEqual(BluetoothUUID.timeSource, .bit16(0x2A13))
         XCTAssertEqual(BluetoothUUID.timeSource.name, "Time Source")

    }

    /// Test Reference Time Information
    func testReferenceTimeInformation() {

         XCTAssertEqual(BluetoothUUID.referenceTimeInformation.rawValue, 0x2A14)
         XCTAssertEqual(BluetoothUUID.referenceTimeInformation.rawValue, 10772)
         XCTAssertEqual(BluetoothUUID.referenceTimeInformation, .bit16(0x2A14))
         XCTAssertEqual(BluetoothUUID.referenceTimeInformation.name, "Reference Time Information")

    }

    /// Test Time Update Control Point
    func testTimeUpdateControlPoint() {

         XCTAssertEqual(BluetoothUUID.timeUpdateControlPoint.rawValue, 0x2A16)
         XCTAssertEqual(BluetoothUUID.timeUpdateControlPoint.rawValue, 10774)
         XCTAssertEqual(BluetoothUUID.timeUpdateControlPoint, .bit16(0x2A16))
         XCTAssertEqual(BluetoothUUID.timeUpdateControlPoint.name, "Time Update Control Point")

    }

    /// Test Time Update State
    func testTimeUpdateState() {

         XCTAssertEqual(BluetoothUUID.timeUpdateState.rawValue, 0x2A17)
         XCTAssertEqual(BluetoothUUID.timeUpdateState.rawValue, 10775)
         XCTAssertEqual(BluetoothUUID.timeUpdateState, .bit16(0x2A17))
         XCTAssertEqual(BluetoothUUID.timeUpdateState.name, "Time Update State")

    }

    /// Test Glucose Measurement
    func testGlucoseMeasurement() {

         XCTAssertEqual(BluetoothUUID.glucoseMeasurement.rawValue, 0x2A18)
         XCTAssertEqual(BluetoothUUID.glucoseMeasurement.rawValue, 10776)
         XCTAssertEqual(BluetoothUUID.glucoseMeasurement, .bit16(0x2A18))
         XCTAssertEqual(BluetoothUUID.glucoseMeasurement.name, "Glucose Measurement")

    }

    /// Test Battery Level
    func testBatteryLevel() {

         XCTAssertEqual(BluetoothUUID.batteryLevel.rawValue, 0x2A19)
         XCTAssertEqual(BluetoothUUID.batteryLevel.rawValue, 10777)
         XCTAssertEqual(BluetoothUUID.batteryLevel, .bit16(0x2A19))
         XCTAssertEqual(BluetoothUUID.batteryLevel.name, "Battery Level")

    }

    /// Test Temperature Measurement
    func testTemperatureMeasurement() {

         XCTAssertEqual(BluetoothUUID.temperatureMeasurement.rawValue, 0x2A1C)
         XCTAssertEqual(BluetoothUUID.temperatureMeasurement.rawValue, 10780)
         XCTAssertEqual(BluetoothUUID.temperatureMeasurement, .bit16(0x2A1C))
         XCTAssertEqual(BluetoothUUID.temperatureMeasurement.name, "Temperature Measurement")

    }

    /// Test Temperature Type
    func testTemperatureType() {

         XCTAssertEqual(BluetoothUUID.temperatureType.rawValue, 0x2A1D)
         XCTAssertEqual(BluetoothUUID.temperatureType.rawValue, 10781)
         XCTAssertEqual(BluetoothUUID.temperatureType, .bit16(0x2A1D))
         XCTAssertEqual(BluetoothUUID.temperatureType.name, "Temperature Type")

    }

    /// Test Intermediate Temperature
    func testIntermediateTemperature() {

         XCTAssertEqual(BluetoothUUID.intermediateTemperature.rawValue, 0x2A1E)
         XCTAssertEqual(BluetoothUUID.intermediateTemperature.rawValue, 10782)
         XCTAssertEqual(BluetoothUUID.intermediateTemperature, .bit16(0x2A1E))
         XCTAssertEqual(BluetoothUUID.intermediateTemperature.name, "Intermediate Temperature")

    }

    /// Test Measurement Interval
    func testMeasurementInterval() {

         XCTAssertEqual(BluetoothUUID.measurementInterval.rawValue, 0x2A21)
         XCTAssertEqual(BluetoothUUID.measurementInterval.rawValue, 10785)
         XCTAssertEqual(BluetoothUUID.measurementInterval, .bit16(0x2A21))
         XCTAssertEqual(BluetoothUUID.measurementInterval.name, "Measurement Interval")

    }

    /// Test Boot Keyboard Input Report
    func testBootKeyboardInputReport() {

         XCTAssertEqual(BluetoothUUID.bootKeyboardInputReport.rawValue, 0x2A22)
         XCTAssertEqual(BluetoothUUID.bootKeyboardInputReport.rawValue, 10786)
         XCTAssertEqual(BluetoothUUID.bootKeyboardInputReport, .bit16(0x2A22))
         XCTAssertEqual(BluetoothUUID.bootKeyboardInputReport.name, "Boot Keyboard Input Report")

    }

    /// Test System ID
    func testSystemId() {

         XCTAssertEqual(BluetoothUUID.systemId.rawValue, 0x2A23)
         XCTAssertEqual(BluetoothUUID.systemId.rawValue, 10787)
         XCTAssertEqual(BluetoothUUID.systemId, .bit16(0x2A23))
         XCTAssertEqual(BluetoothUUID.systemId.name, "System ID")

    }

    /// Test Model Number String
    func testModelNumberString() {

         XCTAssertEqual(BluetoothUUID.modelNumberString.rawValue, 0x2A24)
         XCTAssertEqual(BluetoothUUID.modelNumberString.rawValue, 10788)
         XCTAssertEqual(BluetoothUUID.modelNumberString, .bit16(0x2A24))
         XCTAssertEqual(BluetoothUUID.modelNumberString.name, "Model Number String")

    }

    /// Test Serial Number String
    func testSerialNumberString() {

         XCTAssertEqual(BluetoothUUID.serialNumberString.rawValue, 0x2A25)
         XCTAssertEqual(BluetoothUUID.serialNumberString.rawValue, 10789)
         XCTAssertEqual(BluetoothUUID.serialNumberString, .bit16(0x2A25))
         XCTAssertEqual(BluetoothUUID.serialNumberString.name, "Serial Number String")

    }

    /// Test Firmware Revision String
    func testFirmwareRevisionString() {

         XCTAssertEqual(BluetoothUUID.firmwareRevisionString.rawValue, 0x2A26)
         XCTAssertEqual(BluetoothUUID.firmwareRevisionString.rawValue, 10790)
         XCTAssertEqual(BluetoothUUID.firmwareRevisionString, .bit16(0x2A26))
         XCTAssertEqual(BluetoothUUID.firmwareRevisionString.name, "Firmware Revision String")

    }

    /// Test Hardware Revision String
    func testHardwareRevisionString() {

         XCTAssertEqual(BluetoothUUID.hardwareRevisionString.rawValue, 0x2A27)
         XCTAssertEqual(BluetoothUUID.hardwareRevisionString.rawValue, 10791)
         XCTAssertEqual(BluetoothUUID.hardwareRevisionString, .bit16(0x2A27))
         XCTAssertEqual(BluetoothUUID.hardwareRevisionString.name, "Hardware Revision String")

    }

    /// Test Software Revision String
    func testSoftwareRevisionString() {

         XCTAssertEqual(BluetoothUUID.softwareRevisionString.rawValue, 0x2A28)
         XCTAssertEqual(BluetoothUUID.softwareRevisionString.rawValue, 10792)
         XCTAssertEqual(BluetoothUUID.softwareRevisionString, .bit16(0x2A28))
         XCTAssertEqual(BluetoothUUID.softwareRevisionString.name, "Software Revision String")

    }

    /// Test Manufacturer Name String
    func testManufacturerNameString() {

         XCTAssertEqual(BluetoothUUID.manufacturerNameString.rawValue, 0x2A29)
         XCTAssertEqual(BluetoothUUID.manufacturerNameString.rawValue, 10793)
         XCTAssertEqual(BluetoothUUID.manufacturerNameString, .bit16(0x2A29))
         XCTAssertEqual(BluetoothUUID.manufacturerNameString.name, "Manufacturer Name String")

    }

    /// Test IEEE 11073-20601 Regulatory Cert. Data List
    func testIeee1107320601RegulatoryCertDataList() {

         XCTAssertEqual(BluetoothUUID.ieee1107320601RegulatoryCertDataList.rawValue, 0x2A2A)
         XCTAssertEqual(BluetoothUUID.ieee1107320601RegulatoryCertDataList.rawValue, 10794)
         XCTAssertEqual(BluetoothUUID.ieee1107320601RegulatoryCertDataList, .bit16(0x2A2A))
         XCTAssertEqual(BluetoothUUID.ieee1107320601RegulatoryCertDataList.name, "IEEE 11073-20601 Regulatory Cert. Data List")

    }

    /// Test Current Time
    func testCurrentTime() {

         XCTAssertEqual(BluetoothUUID.currentTime.rawValue, 0x2A2B)
         XCTAssertEqual(BluetoothUUID.currentTime.rawValue, 10795)
         XCTAssertEqual(BluetoothUUID.currentTime, .bit16(0x2A2B))
         XCTAssertEqual(BluetoothUUID.currentTime.name, "Current Time")

    }

    /// Test Magnetic Declination
    func testMagneticDeclination() {

         XCTAssertEqual(BluetoothUUID.magneticDeclination.rawValue, 0x2A2C)
         XCTAssertEqual(BluetoothUUID.magneticDeclination.rawValue, 10796)
         XCTAssertEqual(BluetoothUUID.magneticDeclination, .bit16(0x2A2C))
         XCTAssertEqual(BluetoothUUID.magneticDeclination.name, "Magnetic Declination")

    }

    /// Test Scan Refresh
    func testScanRefresh() {

         XCTAssertEqual(BluetoothUUID.scanRefresh.rawValue, 0x2A31)
         XCTAssertEqual(BluetoothUUID.scanRefresh.rawValue, 10801)
         XCTAssertEqual(BluetoothUUID.scanRefresh, .bit16(0x2A31))
         XCTAssertEqual(BluetoothUUID.scanRefresh.name, "Scan Refresh")

    }

    /// Test Boot Keyboard Output Report
    func testBootKeyboardOutputReport() {

         XCTAssertEqual(BluetoothUUID.bootKeyboardOutputReport.rawValue, 0x2A32)
         XCTAssertEqual(BluetoothUUID.bootKeyboardOutputReport.rawValue, 10802)
         XCTAssertEqual(BluetoothUUID.bootKeyboardOutputReport, .bit16(0x2A32))
         XCTAssertEqual(BluetoothUUID.bootKeyboardOutputReport.name, "Boot Keyboard Output Report")

    }

    /// Test Boot Mouse Input Report
    func testBootMouseInputReport() {

         XCTAssertEqual(BluetoothUUID.bootMouseInputReport.rawValue, 0x2A33)
         XCTAssertEqual(BluetoothUUID.bootMouseInputReport.rawValue, 10803)
         XCTAssertEqual(BluetoothUUID.bootMouseInputReport, .bit16(0x2A33))
         XCTAssertEqual(BluetoothUUID.bootMouseInputReport.name, "Boot Mouse Input Report")

    }

    /// Test Glucose Measurement Context
    func testGlucoseMeasurementContext() {

         XCTAssertEqual(BluetoothUUID.glucoseMeasurementContext.rawValue, 0x2A34)
         XCTAssertEqual(BluetoothUUID.glucoseMeasurementContext.rawValue, 10804)
         XCTAssertEqual(BluetoothUUID.glucoseMeasurementContext, .bit16(0x2A34))
         XCTAssertEqual(BluetoothUUID.glucoseMeasurementContext.name, "Glucose Measurement Context")

    }

    /// Test Blood Pressure Measurement
    func testBloodPressureMeasurement() {

         XCTAssertEqual(BluetoothUUID.bloodPressureMeasurement.rawValue, 0x2A35)
         XCTAssertEqual(BluetoothUUID.bloodPressureMeasurement.rawValue, 10805)
         XCTAssertEqual(BluetoothUUID.bloodPressureMeasurement, .bit16(0x2A35))
         XCTAssertEqual(BluetoothUUID.bloodPressureMeasurement.name, "Blood Pressure Measurement")

    }

    /// Test Intermediate Cuff Pressure
    func testIntermediateCuffPressure() {

         XCTAssertEqual(BluetoothUUID.intermediateCuffPressure.rawValue, 0x2A36)
         XCTAssertEqual(BluetoothUUID.intermediateCuffPressure.rawValue, 10806)
         XCTAssertEqual(BluetoothUUID.intermediateCuffPressure, .bit16(0x2A36))
         XCTAssertEqual(BluetoothUUID.intermediateCuffPressure.name, "Intermediate Cuff Pressure")

    }

    /// Test Heart Rate Measurement
    func testHeartRateMeasurement() {

         XCTAssertEqual(BluetoothUUID.heartRateMeasurement.rawValue, 0x2A37)
         XCTAssertEqual(BluetoothUUID.heartRateMeasurement.rawValue, 10807)
         XCTAssertEqual(BluetoothUUID.heartRateMeasurement, .bit16(0x2A37))
         XCTAssertEqual(BluetoothUUID.heartRateMeasurement.name, "Heart Rate Measurement")

    }

    /// Test Body Sensor Location
    func testBodySensorLocation() {

         XCTAssertEqual(BluetoothUUID.bodySensorLocation.rawValue, 0x2A38)
         XCTAssertEqual(BluetoothUUID.bodySensorLocation.rawValue, 10808)
         XCTAssertEqual(BluetoothUUID.bodySensorLocation, .bit16(0x2A38))
         XCTAssertEqual(BluetoothUUID.bodySensorLocation.name, "Body Sensor Location")

    }

    /// Test Heart Rate Control Point
    func testHeartRateControlPoint() {

         XCTAssertEqual(BluetoothUUID.heartRateControlPoint.rawValue, 0x2A39)
         XCTAssertEqual(BluetoothUUID.heartRateControlPoint.rawValue, 10809)
         XCTAssertEqual(BluetoothUUID.heartRateControlPoint, .bit16(0x2A39))
         XCTAssertEqual(BluetoothUUID.heartRateControlPoint.name, "Heart Rate Control Point")

    }

    /// Test Alert Status
    func testAlertStatus() {

         XCTAssertEqual(BluetoothUUID.alertStatus.rawValue, 0x2A3F)
         XCTAssertEqual(BluetoothUUID.alertStatus.rawValue, 10815)
         XCTAssertEqual(BluetoothUUID.alertStatus, .bit16(0x2A3F))
         XCTAssertEqual(BluetoothUUID.alertStatus.name, "Alert Status")

    }

    /// Test Ringer Control Point
    func testRingerControlPoint() {

         XCTAssertEqual(BluetoothUUID.ringerControlPoint.rawValue, 0x2A40)
         XCTAssertEqual(BluetoothUUID.ringerControlPoint.rawValue, 10816)
         XCTAssertEqual(BluetoothUUID.ringerControlPoint, .bit16(0x2A40))
         XCTAssertEqual(BluetoothUUID.ringerControlPoint.name, "Ringer Control Point")

    }

    /// Test Ringer Setting
    func testRingerSetting() {

         XCTAssertEqual(BluetoothUUID.ringerSetting.rawValue, 0x2A41)
         XCTAssertEqual(BluetoothUUID.ringerSetting.rawValue, 10817)
         XCTAssertEqual(BluetoothUUID.ringerSetting, .bit16(0x2A41))
         XCTAssertEqual(BluetoothUUID.ringerSetting.name, "Ringer Setting")

    }

    /// Test Alert Category ID Bit Mask
    func testAlertCategoryIdBitMask() {

         XCTAssertEqual(BluetoothUUID.alertCategoryIdBitMask.rawValue, 0x2A42)
         XCTAssertEqual(BluetoothUUID.alertCategoryIdBitMask.rawValue, 10818)
         XCTAssertEqual(BluetoothUUID.alertCategoryIdBitMask, .bit16(0x2A42))
         XCTAssertEqual(BluetoothUUID.alertCategoryIdBitMask.name, "Alert Category ID Bit Mask")

    }

    /// Test Alert Category ID
    func testAlertCategoryId() {

         XCTAssertEqual(BluetoothUUID.alertCategoryId.rawValue, 0x2A43)
         XCTAssertEqual(BluetoothUUID.alertCategoryId.rawValue, 10819)
         XCTAssertEqual(BluetoothUUID.alertCategoryId, .bit16(0x2A43))
         XCTAssertEqual(BluetoothUUID.alertCategoryId.name, "Alert Category ID")

    }

    /// Test Alert Notification Control Point
    func testAlertNotificationControlPoint() {

         XCTAssertEqual(BluetoothUUID.alertNotificationControlPoint.rawValue, 0x2A44)
         XCTAssertEqual(BluetoothUUID.alertNotificationControlPoint.rawValue, 10820)
         XCTAssertEqual(BluetoothUUID.alertNotificationControlPoint, .bit16(0x2A44))
         XCTAssertEqual(BluetoothUUID.alertNotificationControlPoint.name, "Alert Notification Control Point")

    }

    /// Test Unread Alert Status
    func testUnreadAlertStatus() {

         XCTAssertEqual(BluetoothUUID.unreadAlertStatus.rawValue, 0x2A45)
         XCTAssertEqual(BluetoothUUID.unreadAlertStatus.rawValue, 10821)
         XCTAssertEqual(BluetoothUUID.unreadAlertStatus, .bit16(0x2A45))
         XCTAssertEqual(BluetoothUUID.unreadAlertStatus.name, "Unread Alert Status")

    }

    /// Test New Alert
    func testNewAlert() {

         XCTAssertEqual(BluetoothUUID.newAlert.rawValue, 0x2A46)
         XCTAssertEqual(BluetoothUUID.newAlert.rawValue, 10822)
         XCTAssertEqual(BluetoothUUID.newAlert, .bit16(0x2A46))
         XCTAssertEqual(BluetoothUUID.newAlert.name, "New Alert")

    }

    /// Test Supported New Alert Category
    func testSupportedNewAlertCategory() {

         XCTAssertEqual(BluetoothUUID.supportedNewAlertCategory.rawValue, 0x2A47)
         XCTAssertEqual(BluetoothUUID.supportedNewAlertCategory.rawValue, 10823)
         XCTAssertEqual(BluetoothUUID.supportedNewAlertCategory, .bit16(0x2A47))
         XCTAssertEqual(BluetoothUUID.supportedNewAlertCategory.name, "Supported New Alert Category")

    }

    /// Test Supported Unread Alert Category
    func testSupportedUnreadAlertCategory() {

         XCTAssertEqual(BluetoothUUID.supportedUnreadAlertCategory.rawValue, 0x2A48)
         XCTAssertEqual(BluetoothUUID.supportedUnreadAlertCategory.rawValue, 10824)
         XCTAssertEqual(BluetoothUUID.supportedUnreadAlertCategory, .bit16(0x2A48))
         XCTAssertEqual(BluetoothUUID.supportedUnreadAlertCategory.name, "Supported Unread Alert Category")

    }

    /// Test Blood Pressure Feature
    func testBloodPressureFeature() {

         XCTAssertEqual(BluetoothUUID.bloodPressureFeature.rawValue, 0x2A49)
         XCTAssertEqual(BluetoothUUID.bloodPressureFeature.rawValue, 10825)
         XCTAssertEqual(BluetoothUUID.bloodPressureFeature, .bit16(0x2A49))
         XCTAssertEqual(BluetoothUUID.bloodPressureFeature.name, "Blood Pressure Feature")

    }

    /// Test HID Information
    func testHidInformation() {

         XCTAssertEqual(BluetoothUUID.hidInformation.rawValue, 0x2A4A)
         XCTAssertEqual(BluetoothUUID.hidInformation.rawValue, 10826)
         XCTAssertEqual(BluetoothUUID.hidInformation, .bit16(0x2A4A))
         XCTAssertEqual(BluetoothUUID.hidInformation.name, "HID Information")

    }

    /// Test Report Map
    func testReportMap() {

         XCTAssertEqual(BluetoothUUID.reportMap.rawValue, 0x2A4B)
         XCTAssertEqual(BluetoothUUID.reportMap.rawValue, 10827)
         XCTAssertEqual(BluetoothUUID.reportMap, .bit16(0x2A4B))
         XCTAssertEqual(BluetoothUUID.reportMap.name, "Report Map")

    }

    /// Test HID Control Point
    func testHidControlPoint() {

         XCTAssertEqual(BluetoothUUID.hidControlPoint.rawValue, 0x2A4C)
         XCTAssertEqual(BluetoothUUID.hidControlPoint.rawValue, 10828)
         XCTAssertEqual(BluetoothUUID.hidControlPoint, .bit16(0x2A4C))
         XCTAssertEqual(BluetoothUUID.hidControlPoint.name, "HID Control Point")

    }

    /// Test Report
    func testReport() {

         XCTAssertEqual(BluetoothUUID.report.rawValue, 0x2A4D)
         XCTAssertEqual(BluetoothUUID.report.rawValue, 10829)
         XCTAssertEqual(BluetoothUUID.report, .bit16(0x2A4D))
         XCTAssertEqual(BluetoothUUID.report.name, "Report")

    }

    /// Test Protocol Mode
    func testProtocolMode() {

         XCTAssertEqual(BluetoothUUID.protocolMode.rawValue, 0x2A4E)
         XCTAssertEqual(BluetoothUUID.protocolMode.rawValue, 10830)
         XCTAssertEqual(BluetoothUUID.protocolMode, .bit16(0x2A4E))
         XCTAssertEqual(BluetoothUUID.protocolMode.name, "Protocol Mode")

    }

    /// Test Scan Interval Window
    func testScanIntervalWindow() {

         XCTAssertEqual(BluetoothUUID.scanIntervalWindow.rawValue, 0x2A4F)
         XCTAssertEqual(BluetoothUUID.scanIntervalWindow.rawValue, 10831)
         XCTAssertEqual(BluetoothUUID.scanIntervalWindow, .bit16(0x2A4F))
         XCTAssertEqual(BluetoothUUID.scanIntervalWindow.name, "Scan Interval Window")

    }

    /// Test PnP ID
    func testPnpId() {

         XCTAssertEqual(BluetoothUUID.pnpId.rawValue, 0x2A50)
         XCTAssertEqual(BluetoothUUID.pnpId.rawValue, 10832)
         XCTAssertEqual(BluetoothUUID.pnpId, .bit16(0x2A50))
         XCTAssertEqual(BluetoothUUID.pnpId.name, "PnP ID")

    }

    /// Test Glucose Feature
    func testGlucoseFeature() {

         XCTAssertEqual(BluetoothUUID.glucoseFeature.rawValue, 0x2A51)
         XCTAssertEqual(BluetoothUUID.glucoseFeature.rawValue, 10833)
         XCTAssertEqual(BluetoothUUID.glucoseFeature, .bit16(0x2A51))
         XCTAssertEqual(BluetoothUUID.glucoseFeature.name, "Glucose Feature")

    }

    /// Test Record Access Control Point
    func testRecordAccessControlPoint() {

         XCTAssertEqual(BluetoothUUID.recordAccessControlPoint.rawValue, 0x2A52)
         XCTAssertEqual(BluetoothUUID.recordAccessControlPoint.rawValue, 10834)
         XCTAssertEqual(BluetoothUUID.recordAccessControlPoint, .bit16(0x2A52))
         XCTAssertEqual(BluetoothUUID.recordAccessControlPoint.name, "Record Access Control Point")

    }

    /// Test RSC Measurement
    func testRscMeasurement() {

         XCTAssertEqual(BluetoothUUID.rscMeasurement.rawValue, 0x2A53)
         XCTAssertEqual(BluetoothUUID.rscMeasurement.rawValue, 10835)
         XCTAssertEqual(BluetoothUUID.rscMeasurement, .bit16(0x2A53))
         XCTAssertEqual(BluetoothUUID.rscMeasurement.name, "RSC Measurement")

    }

    /// Test RSC Feature
    func testRscFeature() {

         XCTAssertEqual(BluetoothUUID.rscFeature.rawValue, 0x2A54)
         XCTAssertEqual(BluetoothUUID.rscFeature.rawValue, 10836)
         XCTAssertEqual(BluetoothUUID.rscFeature, .bit16(0x2A54))
         XCTAssertEqual(BluetoothUUID.rscFeature.name, "RSC Feature")

    }

    /// Test SC Control Point
    func testScControlPoint() {

         XCTAssertEqual(BluetoothUUID.scControlPoint.rawValue, 0x2A55)
         XCTAssertEqual(BluetoothUUID.scControlPoint.rawValue, 10837)
         XCTAssertEqual(BluetoothUUID.scControlPoint, .bit16(0x2A55))
         XCTAssertEqual(BluetoothUUID.scControlPoint.name, "SC Control Point")

    }

    /// Test Digital
    func testDigital() {

         XCTAssertEqual(BluetoothUUID.digital.rawValue, 0x2A56)
         XCTAssertEqual(BluetoothUUID.digital.rawValue, 10838)
         XCTAssertEqual(BluetoothUUID.digital, .bit16(0x2A56))
         XCTAssertEqual(BluetoothUUID.digital.name, "Digital")

    }

    /// Test Analog
    func testAnalog() {

         XCTAssertEqual(BluetoothUUID.analog.rawValue, 0x2A58)
         XCTAssertEqual(BluetoothUUID.analog.rawValue, 10840)
         XCTAssertEqual(BluetoothUUID.analog, .bit16(0x2A58))
         XCTAssertEqual(BluetoothUUID.analog.name, "Analog")

    }

    /// Test Aggregate
    func testAggregate() {

         XCTAssertEqual(BluetoothUUID.aggregate.rawValue, 0x2A5A)
         XCTAssertEqual(BluetoothUUID.aggregate.rawValue, 10842)
         XCTAssertEqual(BluetoothUUID.aggregate, .bit16(0x2A5A))
         XCTAssertEqual(BluetoothUUID.aggregate.name, "Aggregate")

    }

    /// Test CSC Measurement
    func testCscMeasurement() {

         XCTAssertEqual(BluetoothUUID.cscMeasurement.rawValue, 0x2A5B)
         XCTAssertEqual(BluetoothUUID.cscMeasurement.rawValue, 10843)
         XCTAssertEqual(BluetoothUUID.cscMeasurement, .bit16(0x2A5B))
         XCTAssertEqual(BluetoothUUID.cscMeasurement.name, "CSC Measurement")

    }

    /// Test CSC Feature
    func testCscFeature() {

         XCTAssertEqual(BluetoothUUID.cscFeature.rawValue, 0x2A5C)
         XCTAssertEqual(BluetoothUUID.cscFeature.rawValue, 10844)
         XCTAssertEqual(BluetoothUUID.cscFeature, .bit16(0x2A5C))
         XCTAssertEqual(BluetoothUUID.cscFeature.name, "CSC Feature")

    }

    /// Test Sensor Location
    func testSensorLocation() {

         XCTAssertEqual(BluetoothUUID.sensorLocation.rawValue, 0x2A5D)
         XCTAssertEqual(BluetoothUUID.sensorLocation.rawValue, 10845)
         XCTAssertEqual(BluetoothUUID.sensorLocation, .bit16(0x2A5D))
         XCTAssertEqual(BluetoothUUID.sensorLocation.name, "Sensor Location")

    }

    /// Test Cycling Power Measurement
    func testCyclingPowerMeasurement() {

         XCTAssertEqual(BluetoothUUID.cyclingPowerMeasurement.rawValue, 0x2A63)
         XCTAssertEqual(BluetoothUUID.cyclingPowerMeasurement.rawValue, 10851)
         XCTAssertEqual(BluetoothUUID.cyclingPowerMeasurement, .bit16(0x2A63))
         XCTAssertEqual(BluetoothUUID.cyclingPowerMeasurement.name, "Cycling Power Measurement")

    }

    /// Test Cycling Power Vector
    func testCyclingPowerVector() {

         XCTAssertEqual(BluetoothUUID.cyclingPowerVector.rawValue, 0x2A64)
         XCTAssertEqual(BluetoothUUID.cyclingPowerVector.rawValue, 10852)
         XCTAssertEqual(BluetoothUUID.cyclingPowerVector, .bit16(0x2A64))
         XCTAssertEqual(BluetoothUUID.cyclingPowerVector.name, "Cycling Power Vector")

    }

    /// Test Cycling Power Feature
    func testCyclingPowerFeature() {

         XCTAssertEqual(BluetoothUUID.cyclingPowerFeature.rawValue, 0x2A65)
         XCTAssertEqual(BluetoothUUID.cyclingPowerFeature.rawValue, 10853)
         XCTAssertEqual(BluetoothUUID.cyclingPowerFeature, .bit16(0x2A65))
         XCTAssertEqual(BluetoothUUID.cyclingPowerFeature.name, "Cycling Power Feature")

    }

    /// Test Cycling Power Control Point
    func testCyclingPowerControlPoint() {

         XCTAssertEqual(BluetoothUUID.cyclingPowerControlPoint.rawValue, 0x2A66)
         XCTAssertEqual(BluetoothUUID.cyclingPowerControlPoint.rawValue, 10854)
         XCTAssertEqual(BluetoothUUID.cyclingPowerControlPoint, .bit16(0x2A66))
         XCTAssertEqual(BluetoothUUID.cyclingPowerControlPoint.name, "Cycling Power Control Point")

    }

    /// Test Location and Speed
    func testLocationAndSpeed() {

         XCTAssertEqual(BluetoothUUID.locationAndSpeed.rawValue, 0x2A67)
         XCTAssertEqual(BluetoothUUID.locationAndSpeed.rawValue, 10855)
         XCTAssertEqual(BluetoothUUID.locationAndSpeed, .bit16(0x2A67))
         XCTAssertEqual(BluetoothUUID.locationAndSpeed.name, "Location and Speed")

    }

    /// Test Navigation
    func testNavigation() {

         XCTAssertEqual(BluetoothUUID.navigation.rawValue, 0x2A68)
         XCTAssertEqual(BluetoothUUID.navigation.rawValue, 10856)
         XCTAssertEqual(BluetoothUUID.navigation, .bit16(0x2A68))
         XCTAssertEqual(BluetoothUUID.navigation.name, "Navigation")

    }

    /// Test Position Quality
    func testPositionQuality() {

         XCTAssertEqual(BluetoothUUID.positionQuality.rawValue, 0x2A69)
         XCTAssertEqual(BluetoothUUID.positionQuality.rawValue, 10857)
         XCTAssertEqual(BluetoothUUID.positionQuality, .bit16(0x2A69))
         XCTAssertEqual(BluetoothUUID.positionQuality.name, "Position Quality")

    }

    /// Test LN Feature
    func testLnFeature() {

         XCTAssertEqual(BluetoothUUID.lnFeature.rawValue, 0x2A6A)
         XCTAssertEqual(BluetoothUUID.lnFeature.rawValue, 10858)
         XCTAssertEqual(BluetoothUUID.lnFeature, .bit16(0x2A6A))
         XCTAssertEqual(BluetoothUUID.lnFeature.name, "LN Feature")

    }

    /// Test LN Control Point
    func testLnControlPoint() {

         XCTAssertEqual(BluetoothUUID.lnControlPoint.rawValue, 0x2A6B)
         XCTAssertEqual(BluetoothUUID.lnControlPoint.rawValue, 10859)
         XCTAssertEqual(BluetoothUUID.lnControlPoint, .bit16(0x2A6B))
         XCTAssertEqual(BluetoothUUID.lnControlPoint.name, "LN Control Point")

    }

    /// Test Elevation
    func testElevation() {

         XCTAssertEqual(BluetoothUUID.elevation.rawValue, 0x2A6C)
         XCTAssertEqual(BluetoothUUID.elevation.rawValue, 10860)
         XCTAssertEqual(BluetoothUUID.elevation, .bit16(0x2A6C))
         XCTAssertEqual(BluetoothUUID.elevation.name, "Elevation")

    }

    /// Test Pressure
    func testPressure() {

         XCTAssertEqual(BluetoothUUID.pressure.rawValue, 0x2A6D)
         XCTAssertEqual(BluetoothUUID.pressure.rawValue, 10861)
         XCTAssertEqual(BluetoothUUID.pressure, .bit16(0x2A6D))
         XCTAssertEqual(BluetoothUUID.pressure.name, "Pressure")

    }

    /// Test Temperature
    func testTemperature() {

         XCTAssertEqual(BluetoothUUID.temperature.rawValue, 0x2A6E)
         XCTAssertEqual(BluetoothUUID.temperature.rawValue, 10862)
         XCTAssertEqual(BluetoothUUID.temperature, .bit16(0x2A6E))
         XCTAssertEqual(BluetoothUUID.temperature.name, "Temperature")

    }

    /// Test Humidity
    func testHumidity() {

         XCTAssertEqual(BluetoothUUID.humidity.rawValue, 0x2A6F)
         XCTAssertEqual(BluetoothUUID.humidity.rawValue, 10863)
         XCTAssertEqual(BluetoothUUID.humidity, .bit16(0x2A6F))
         XCTAssertEqual(BluetoothUUID.humidity.name, "Humidity")

    }

    /// Test True Wind Speed
    func testTrueWindSpeed() {

         XCTAssertEqual(BluetoothUUID.trueWindSpeed.rawValue, 0x2A70)
         XCTAssertEqual(BluetoothUUID.trueWindSpeed.rawValue, 10864)
         XCTAssertEqual(BluetoothUUID.trueWindSpeed, .bit16(0x2A70))
         XCTAssertEqual(BluetoothUUID.trueWindSpeed.name, "True Wind Speed")

    }

    /// Test True Wind Direction
    func testTrueWindDirection() {

         XCTAssertEqual(BluetoothUUID.trueWindDirection.rawValue, 0x2A71)
         XCTAssertEqual(BluetoothUUID.trueWindDirection.rawValue, 10865)
         XCTAssertEqual(BluetoothUUID.trueWindDirection, .bit16(0x2A71))
         XCTAssertEqual(BluetoothUUID.trueWindDirection.name, "True Wind Direction")

    }

    /// Test Apparent Wind Speed
    func testApparentWindSpeed() {

         XCTAssertEqual(BluetoothUUID.apparentWindSpeed.rawValue, 0x2A72)
         XCTAssertEqual(BluetoothUUID.apparentWindSpeed.rawValue, 10866)
         XCTAssertEqual(BluetoothUUID.apparentWindSpeed, .bit16(0x2A72))
         XCTAssertEqual(BluetoothUUID.apparentWindSpeed.name, "Apparent Wind Speed")

    }

    /// Test Apparent Wind Direction
    func testApparentWindDirection() {

         XCTAssertEqual(BluetoothUUID.apparentWindDirection.rawValue, 0x2A73)
         XCTAssertEqual(BluetoothUUID.apparentWindDirection.rawValue, 10867)
         XCTAssertEqual(BluetoothUUID.apparentWindDirection, .bit16(0x2A73))
         XCTAssertEqual(BluetoothUUID.apparentWindDirection.name, "Apparent Wind Direction")

    }

    /// Test Gust Factor
    func testGustFactor() {

         XCTAssertEqual(BluetoothUUID.gustFactor.rawValue, 0x2A74)
         XCTAssertEqual(BluetoothUUID.gustFactor.rawValue, 10868)
         XCTAssertEqual(BluetoothUUID.gustFactor, .bit16(0x2A74))
         XCTAssertEqual(BluetoothUUID.gustFactor.name, "Gust Factor")

    }

    /// Test Pollen Concentration
    func testPollenConcentration() {

         XCTAssertEqual(BluetoothUUID.pollenConcentration.rawValue, 0x2A75)
         XCTAssertEqual(BluetoothUUID.pollenConcentration.rawValue, 10869)
         XCTAssertEqual(BluetoothUUID.pollenConcentration, .bit16(0x2A75))
         XCTAssertEqual(BluetoothUUID.pollenConcentration.name, "Pollen Concentration")

    }

    /// Test UV Index
    func testUvIndex() {

         XCTAssertEqual(BluetoothUUID.uvIndex.rawValue, 0x2A76)
         XCTAssertEqual(BluetoothUUID.uvIndex.rawValue, 10870)
         XCTAssertEqual(BluetoothUUID.uvIndex, .bit16(0x2A76))
         XCTAssertEqual(BluetoothUUID.uvIndex.name, "UV Index")

    }

    /// Test Irradiance
    func testIrradiance() {

         XCTAssertEqual(BluetoothUUID.irradiance.rawValue, 0x2A77)
         XCTAssertEqual(BluetoothUUID.irradiance.rawValue, 10871)
         XCTAssertEqual(BluetoothUUID.irradiance, .bit16(0x2A77))
         XCTAssertEqual(BluetoothUUID.irradiance.name, "Irradiance")

    }

    /// Test Rainfall
    func testRainfall() {

         XCTAssertEqual(BluetoothUUID.rainfall.rawValue, 0x2A78)
         XCTAssertEqual(BluetoothUUID.rainfall.rawValue, 10872)
         XCTAssertEqual(BluetoothUUID.rainfall, .bit16(0x2A78))
         XCTAssertEqual(BluetoothUUID.rainfall.name, "Rainfall")

    }

    /// Test Wind Chill
    func testWindChill() {

         XCTAssertEqual(BluetoothUUID.windChill.rawValue, 0x2A79)
         XCTAssertEqual(BluetoothUUID.windChill.rawValue, 10873)
         XCTAssertEqual(BluetoothUUID.windChill, .bit16(0x2A79))
         XCTAssertEqual(BluetoothUUID.windChill.name, "Wind Chill")

    }

    /// Test Heat Index
    func testHeatIndex() {

         XCTAssertEqual(BluetoothUUID.heatIndex.rawValue, 0x2A7A)
         XCTAssertEqual(BluetoothUUID.heatIndex.rawValue, 10874)
         XCTAssertEqual(BluetoothUUID.heatIndex, .bit16(0x2A7A))
         XCTAssertEqual(BluetoothUUID.heatIndex.name, "Heat Index")

    }

    /// Test Dew Point
    func testDewPoint() {

         XCTAssertEqual(BluetoothUUID.dewPoint.rawValue, 0x2A7B)
         XCTAssertEqual(BluetoothUUID.dewPoint.rawValue, 10875)
         XCTAssertEqual(BluetoothUUID.dewPoint, .bit16(0x2A7B))
         XCTAssertEqual(BluetoothUUID.dewPoint.name, "Dew Point")

    }

    /// Test Trend
    func testTrend() {

         XCTAssertEqual(BluetoothUUID.trend.rawValue, 0x2A7C)
         XCTAssertEqual(BluetoothUUID.trend.rawValue, 10876)
         XCTAssertEqual(BluetoothUUID.trend, .bit16(0x2A7C))
         XCTAssertEqual(BluetoothUUID.trend.name, "Trend")

    }

    /// Test Descriptor Value Changed
    func testDescriptorValueChanged() {

         XCTAssertEqual(BluetoothUUID.descriptorValueChanged.rawValue, 0x2A7D)
         XCTAssertEqual(BluetoothUUID.descriptorValueChanged.rawValue, 10877)
         XCTAssertEqual(BluetoothUUID.descriptorValueChanged, .bit16(0x2A7D))
         XCTAssertEqual(BluetoothUUID.descriptorValueChanged.name, "Descriptor Value Changed")

    }

    /// Test Aerobic Heart Rate Lower Limit
    func testAerobicHeartRateLowerLimit() {

         XCTAssertEqual(BluetoothUUID.aerobicHeartRateLowerLimit.rawValue, 0x2A7E)
         XCTAssertEqual(BluetoothUUID.aerobicHeartRateLowerLimit.rawValue, 10878)
         XCTAssertEqual(BluetoothUUID.aerobicHeartRateLowerLimit, .bit16(0x2A7E))
         XCTAssertEqual(BluetoothUUID.aerobicHeartRateLowerLimit.name, "Aerobic Heart Rate Lower Limit")

    }

    /// Test Aerobic Threshold
    func testAerobicThreshold() {

         XCTAssertEqual(BluetoothUUID.aerobicThreshold.rawValue, 0x2A7F)
         XCTAssertEqual(BluetoothUUID.aerobicThreshold.rawValue, 10879)
         XCTAssertEqual(BluetoothUUID.aerobicThreshold, .bit16(0x2A7F))
         XCTAssertEqual(BluetoothUUID.aerobicThreshold.name, "Aerobic Threshold")

    }

    /// Test Age
    func testAge() {

         XCTAssertEqual(BluetoothUUID.age.rawValue, 0x2A80)
         XCTAssertEqual(BluetoothUUID.age.rawValue, 10880)
         XCTAssertEqual(BluetoothUUID.age, .bit16(0x2A80))
         XCTAssertEqual(BluetoothUUID.age.name, "Age")

    }

    /// Test Anaerobic Heart Rate Lower Limit
    func testAnaerobicHeartRateLowerLimit() {

         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateLowerLimit.rawValue, 0x2A81)
         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateLowerLimit.rawValue, 10881)
         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateLowerLimit, .bit16(0x2A81))
         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateLowerLimit.name, "Anaerobic Heart Rate Lower Limit")

    }

    /// Test Anaerobic Heart Rate Upper Limit
    func testAnaerobicHeartRateUpperLimit() {

         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateUpperLimit.rawValue, 0x2A82)
         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateUpperLimit.rawValue, 10882)
         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateUpperLimit, .bit16(0x2A82))
         XCTAssertEqual(BluetoothUUID.anaerobicHeartRateUpperLimit.name, "Anaerobic Heart Rate Upper Limit")

    }

    /// Test Anaerobic Threshold
    func testAnaerobicThreshold() {

         XCTAssertEqual(BluetoothUUID.anaerobicThreshold.rawValue, 0x2A83)
         XCTAssertEqual(BluetoothUUID.anaerobicThreshold.rawValue, 10883)
         XCTAssertEqual(BluetoothUUID.anaerobicThreshold, .bit16(0x2A83))
         XCTAssertEqual(BluetoothUUID.anaerobicThreshold.name, "Anaerobic Threshold")

    }

    /// Test Aerobic Heart Rate Upper Limit
    func testAerobicHeartRateUpperLimit() {

         XCTAssertEqual(BluetoothUUID.aerobicHeartRateUpperLimit.rawValue, 0x2A84)
         XCTAssertEqual(BluetoothUUID.aerobicHeartRateUpperLimit.rawValue, 10884)
         XCTAssertEqual(BluetoothUUID.aerobicHeartRateUpperLimit, .bit16(0x2A84))
         XCTAssertEqual(BluetoothUUID.aerobicHeartRateUpperLimit.name, "Aerobic Heart Rate Upper Limit")

    }

    /// Test Date of Birth
    func testDateOfBirth() {

         XCTAssertEqual(BluetoothUUID.dateOfBirth.rawValue, 0x2A85)
         XCTAssertEqual(BluetoothUUID.dateOfBirth.rawValue, 10885)
         XCTAssertEqual(BluetoothUUID.dateOfBirth, .bit16(0x2A85))
         XCTAssertEqual(BluetoothUUID.dateOfBirth.name, "Date of Birth")

    }

    /// Test Date of Threshold Assessment
    func testDateOfThresholdAssessment() {

         XCTAssertEqual(BluetoothUUID.dateOfThresholdAssessment.rawValue, 0x2A86)
         XCTAssertEqual(BluetoothUUID.dateOfThresholdAssessment.rawValue, 10886)
         XCTAssertEqual(BluetoothUUID.dateOfThresholdAssessment, .bit16(0x2A86))
         XCTAssertEqual(BluetoothUUID.dateOfThresholdAssessment.name, "Date of Threshold Assessment")

    }

    /// Test Email Address
    func testEmailAddress() {

         XCTAssertEqual(BluetoothUUID.emailAddress.rawValue, 0x2A87)
         XCTAssertEqual(BluetoothUUID.emailAddress.rawValue, 10887)
         XCTAssertEqual(BluetoothUUID.emailAddress, .bit16(0x2A87))
         XCTAssertEqual(BluetoothUUID.emailAddress.name, "Email Address")

    }

    /// Test Fat Burn Heart Rate Lower Limit
    func testFatBurnHeartRateLowerLimit() {

         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateLowerLimit.rawValue, 0x2A88)
         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateLowerLimit.rawValue, 10888)
         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateLowerLimit, .bit16(0x2A88))
         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateLowerLimit.name, "Fat Burn Heart Rate Lower Limit")

    }

    /// Test Fat Burn Heart Rate Upper Limit
    func testFatBurnHeartRateUpperLimit() {

         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateUpperLimit.rawValue, 0x2A89)
         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateUpperLimit.rawValue, 10889)
         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateUpperLimit, .bit16(0x2A89))
         XCTAssertEqual(BluetoothUUID.fatBurnHeartRateUpperLimit.name, "Fat Burn Heart Rate Upper Limit")

    }

    /// Test First Name
    func testFirstName() {

         XCTAssertEqual(BluetoothUUID.firstName.rawValue, 0x2A8A)
         XCTAssertEqual(BluetoothUUID.firstName.rawValue, 10890)
         XCTAssertEqual(BluetoothUUID.firstName, .bit16(0x2A8A))
         XCTAssertEqual(BluetoothUUID.firstName.name, "First Name")

    }

    /// Test Five Zone Heart Rate Limits
    func testFiveZoneHeartRateLimits() {

         XCTAssertEqual(BluetoothUUID.fiveZoneHeartRateLimits.rawValue, 0x2A8B)
         XCTAssertEqual(BluetoothUUID.fiveZoneHeartRateLimits.rawValue, 10891)
         XCTAssertEqual(BluetoothUUID.fiveZoneHeartRateLimits, .bit16(0x2A8B))
         XCTAssertEqual(BluetoothUUID.fiveZoneHeartRateLimits.name, "Five Zone Heart Rate Limits")

    }

    /// Test Gender
    func testGender() {

         XCTAssertEqual(BluetoothUUID.gender.rawValue, 0x2A8C)
         XCTAssertEqual(BluetoothUUID.gender.rawValue, 10892)
         XCTAssertEqual(BluetoothUUID.gender, .bit16(0x2A8C))
         XCTAssertEqual(BluetoothUUID.gender.name, "Gender")

    }

    /// Test Heart Rate Max
    func testHeartRateMax() {

         XCTAssertEqual(BluetoothUUID.heartRateMax.rawValue, 0x2A8D)
         XCTAssertEqual(BluetoothUUID.heartRateMax.rawValue, 10893)
         XCTAssertEqual(BluetoothUUID.heartRateMax, .bit16(0x2A8D))
         XCTAssertEqual(BluetoothUUID.heartRateMax.name, "Heart Rate Max")

    }

    /// Test Height
    func testHeight() {

         XCTAssertEqual(BluetoothUUID.height.rawValue, 0x2A8E)
         XCTAssertEqual(BluetoothUUID.height.rawValue, 10894)
         XCTAssertEqual(BluetoothUUID.height, .bit16(0x2A8E))
         XCTAssertEqual(BluetoothUUID.height.name, "Height")

    }

    /// Test Hip Circumference
    func testHipCircumference() {

         XCTAssertEqual(BluetoothUUID.hipCircumference.rawValue, 0x2A8F)
         XCTAssertEqual(BluetoothUUID.hipCircumference.rawValue, 10895)
         XCTAssertEqual(BluetoothUUID.hipCircumference, .bit16(0x2A8F))
         XCTAssertEqual(BluetoothUUID.hipCircumference.name, "Hip Circumference")

    }

    /// Test Last Name
    func testLastName() {

         XCTAssertEqual(BluetoothUUID.lastName.rawValue, 0x2A90)
         XCTAssertEqual(BluetoothUUID.lastName.rawValue, 10896)
         XCTAssertEqual(BluetoothUUID.lastName, .bit16(0x2A90))
         XCTAssertEqual(BluetoothUUID.lastName.name, "Last Name")

    }

    /// Test Maximum Recommended Heart Rate
    func testMaximumRecommendedHeartRate() {

         XCTAssertEqual(BluetoothUUID.maximumRecommendedHeartRate.rawValue, 0x2A91)
         XCTAssertEqual(BluetoothUUID.maximumRecommendedHeartRate.rawValue, 10897)
         XCTAssertEqual(BluetoothUUID.maximumRecommendedHeartRate, .bit16(0x2A91))
         XCTAssertEqual(BluetoothUUID.maximumRecommendedHeartRate.name, "Maximum Recommended Heart Rate")

    }

    /// Test Resting Heart Rate
    func testRestingHeartRate() {

         XCTAssertEqual(BluetoothUUID.restingHeartRate.rawValue, 0x2A92)
         XCTAssertEqual(BluetoothUUID.restingHeartRate.rawValue, 10898)
         XCTAssertEqual(BluetoothUUID.restingHeartRate, .bit16(0x2A92))
         XCTAssertEqual(BluetoothUUID.restingHeartRate.name, "Resting Heart Rate")

    }

    /// Test Sport Type for Aerobic/Anaerobic Thresholds
    func testSportTypeForAerobicAnaerobicThresholds() {

         XCTAssertEqual(BluetoothUUID.sportTypeForAerobicAnaerobicThresholds.rawValue, 0x2A93)
         XCTAssertEqual(BluetoothUUID.sportTypeForAerobicAnaerobicThresholds.rawValue, 10899)
         XCTAssertEqual(BluetoothUUID.sportTypeForAerobicAnaerobicThresholds, .bit16(0x2A93))
         XCTAssertEqual(BluetoothUUID.sportTypeForAerobicAnaerobicThresholds.name, "Sport Type for Aerobic/Anaerobic Thresholds")

    }

    /// Test Three Zone Heart Rate Limits
    func testThreeZoneHeartRateLimits() {

         XCTAssertEqual(BluetoothUUID.threeZoneHeartRateLimits.rawValue, 0x2A94)
         XCTAssertEqual(BluetoothUUID.threeZoneHeartRateLimits.rawValue, 10900)
         XCTAssertEqual(BluetoothUUID.threeZoneHeartRateLimits, .bit16(0x2A94))
         XCTAssertEqual(BluetoothUUID.threeZoneHeartRateLimits.name, "Three Zone Heart Rate Limits")

    }

    /// Test Two Zone Heart Rate Limit
    func testTwoZoneHeartRateLimit() {

         XCTAssertEqual(BluetoothUUID.twoZoneHeartRateLimit.rawValue, 0x2A95)
         XCTAssertEqual(BluetoothUUID.twoZoneHeartRateLimit.rawValue, 10901)
         XCTAssertEqual(BluetoothUUID.twoZoneHeartRateLimit, .bit16(0x2A95))
         XCTAssertEqual(BluetoothUUID.twoZoneHeartRateLimit.name, "Two Zone Heart Rate Limit")

    }

    /// Test VO2 Max
    func testVo2Max() {

         XCTAssertEqual(BluetoothUUID.vo2Max.rawValue, 0x2A96)
         XCTAssertEqual(BluetoothUUID.vo2Max.rawValue, 10902)
         XCTAssertEqual(BluetoothUUID.vo2Max, .bit16(0x2A96))
         XCTAssertEqual(BluetoothUUID.vo2Max.name, "VO2 Max")

    }

    /// Test Waist Circumference
    func testWaistCircumference() {

         XCTAssertEqual(BluetoothUUID.waistCircumference.rawValue, 0x2A97)
         XCTAssertEqual(BluetoothUUID.waistCircumference.rawValue, 10903)
         XCTAssertEqual(BluetoothUUID.waistCircumference, .bit16(0x2A97))
         XCTAssertEqual(BluetoothUUID.waistCircumference.name, "Waist Circumference")

    }

    /// Test Weight
    func testWeight() {

         XCTAssertEqual(BluetoothUUID.weight.rawValue, 0x2A98)
         XCTAssertEqual(BluetoothUUID.weight.rawValue, 10904)
         XCTAssertEqual(BluetoothUUID.weight, .bit16(0x2A98))
         XCTAssertEqual(BluetoothUUID.weight.name, "Weight")

    }

    /// Test Database Change Increment
    func testDatabaseChangerement() {

         XCTAssertEqual(BluetoothUUID.databaseChangerement.rawValue, 0x2A99)
         XCTAssertEqual(BluetoothUUID.databaseChangerement.rawValue, 10905)
         XCTAssertEqual(BluetoothUUID.databaseChangerement, .bit16(0x2A99))
         XCTAssertEqual(BluetoothUUID.databaseChangerement.name, "Database Change Increment")

    }

    /// Test User Index
    func testUserIndex() {

         XCTAssertEqual(BluetoothUUID.userIndex.rawValue, 0x2A9A)
         XCTAssertEqual(BluetoothUUID.userIndex.rawValue, 10906)
         XCTAssertEqual(BluetoothUUID.userIndex, .bit16(0x2A9A))
         XCTAssertEqual(BluetoothUUID.userIndex.name, "User Index")

    }

    /// Test Body Composition Feature
    func testBodyCompositionFeature() {

         XCTAssertEqual(BluetoothUUID.bodyCompositionFeature.rawValue, 0x2A9B)
         XCTAssertEqual(BluetoothUUID.bodyCompositionFeature.rawValue, 10907)
         XCTAssertEqual(BluetoothUUID.bodyCompositionFeature, .bit16(0x2A9B))
         XCTAssertEqual(BluetoothUUID.bodyCompositionFeature.name, "Body Composition Feature")

    }

    /// Test Body Composition Measurement
    func testBodyCompositionMeasurement() {

         XCTAssertEqual(BluetoothUUID.bodyCompositionMeasurement.rawValue, 0x2A9C)
         XCTAssertEqual(BluetoothUUID.bodyCompositionMeasurement.rawValue, 10908)
         XCTAssertEqual(BluetoothUUID.bodyCompositionMeasurement, .bit16(0x2A9C))
         XCTAssertEqual(BluetoothUUID.bodyCompositionMeasurement.name, "Body Composition Measurement")

    }

    /// Test Weight Measurement
    func testWeightMeasurement() {

         XCTAssertEqual(BluetoothUUID.weightMeasurement.rawValue, 0x2A9D)
         XCTAssertEqual(BluetoothUUID.weightMeasurement.rawValue, 10909)
         XCTAssertEqual(BluetoothUUID.weightMeasurement, .bit16(0x2A9D))
         XCTAssertEqual(BluetoothUUID.weightMeasurement.name, "Weight Measurement")

    }

    /// Test Weight Scale Feature
    func testWeightScaleFeature() {

         XCTAssertEqual(BluetoothUUID.weightScaleFeature.rawValue, 0x2A9E)
         XCTAssertEqual(BluetoothUUID.weightScaleFeature.rawValue, 10910)
         XCTAssertEqual(BluetoothUUID.weightScaleFeature, .bit16(0x2A9E))
         XCTAssertEqual(BluetoothUUID.weightScaleFeature.name, "Weight Scale Feature")

    }

    /// Test User Control Point
    func testUserControlPoint() {

         XCTAssertEqual(BluetoothUUID.userControlPoint.rawValue, 0x2A9F)
         XCTAssertEqual(BluetoothUUID.userControlPoint.rawValue, 10911)
         XCTAssertEqual(BluetoothUUID.userControlPoint, .bit16(0x2A9F))
         XCTAssertEqual(BluetoothUUID.userControlPoint.name, "User Control Point")

    }

    /// Test Magnetic Flux Density - 2D
    func testMagneticFluxDensity2D() {

         XCTAssertEqual(BluetoothUUID.magneticFluxDensity2D.rawValue, 0x2AA0)
         XCTAssertEqual(BluetoothUUID.magneticFluxDensity2D.rawValue, 10912)
         XCTAssertEqual(BluetoothUUID.magneticFluxDensity2D, .bit16(0x2AA0))
         XCTAssertEqual(BluetoothUUID.magneticFluxDensity2D.name, "Magnetic Flux Density - 2D")

    }

    /// Test Magnetic Flux Density - 3D
    func testMagneticFluxDensity3D() {

         XCTAssertEqual(BluetoothUUID.magneticFluxDensity3D.rawValue, 0x2AA1)
         XCTAssertEqual(BluetoothUUID.magneticFluxDensity3D.rawValue, 10913)
         XCTAssertEqual(BluetoothUUID.magneticFluxDensity3D, .bit16(0x2AA1))
         XCTAssertEqual(BluetoothUUID.magneticFluxDensity3D.name, "Magnetic Flux Density - 3D")

    }

    /// Test Language
    func testLanguage() {

         XCTAssertEqual(BluetoothUUID.language.rawValue, 0x2AA2)
         XCTAssertEqual(BluetoothUUID.language.rawValue, 10914)
         XCTAssertEqual(BluetoothUUID.language, .bit16(0x2AA2))
         XCTAssertEqual(BluetoothUUID.language.name, "Language")

    }

    /// Test Barometric Pressure Trend
    func testBarometricPressureTrend() {

         XCTAssertEqual(BluetoothUUID.barometricPressureTrend.rawValue, 0x2AA3)
         XCTAssertEqual(BluetoothUUID.barometricPressureTrend.rawValue, 10915)
         XCTAssertEqual(BluetoothUUID.barometricPressureTrend, .bit16(0x2AA3))
         XCTAssertEqual(BluetoothUUID.barometricPressureTrend.name, "Barometric Pressure Trend")

    }

    /// Test Bond Management Control Point
    func testBondManagementControlPoint() {

         XCTAssertEqual(BluetoothUUID.bondManagementControlPoint.rawValue, 0x2AA4)
         XCTAssertEqual(BluetoothUUID.bondManagementControlPoint.rawValue, 10916)
         XCTAssertEqual(BluetoothUUID.bondManagementControlPoint, .bit16(0x2AA4))
         XCTAssertEqual(BluetoothUUID.bondManagementControlPoint.name, "Bond Management Control Point")

    }

    /// Test Bond Management Feature
    func testBondManagementFeature() {

         XCTAssertEqual(BluetoothUUID.bondManagementFeature.rawValue, 0x2AA5)
         XCTAssertEqual(BluetoothUUID.bondManagementFeature.rawValue, 10917)
         XCTAssertEqual(BluetoothUUID.bondManagementFeature, .bit16(0x2AA5))
         XCTAssertEqual(BluetoothUUID.bondManagementFeature.name, "Bond Management Feature")

    }

    /// Test Central Address Resolution
    func testCentralAddressResolution() {

         XCTAssertEqual(BluetoothUUID.centralAddressResolution.rawValue, 0x2AA6)
         XCTAssertEqual(BluetoothUUID.centralAddressResolution.rawValue, 10918)
         XCTAssertEqual(BluetoothUUID.centralAddressResolution, .bit16(0x2AA6))
         XCTAssertEqual(BluetoothUUID.centralAddressResolution.name, "Central Address Resolution")

    }

    /// Test CGM Measurement
    func testCgmMeasurement() {

         XCTAssertEqual(BluetoothUUID.cgmMeasurement.rawValue, 0x2AA7)
         XCTAssertEqual(BluetoothUUID.cgmMeasurement.rawValue, 10919)
         XCTAssertEqual(BluetoothUUID.cgmMeasurement, .bit16(0x2AA7))
         XCTAssertEqual(BluetoothUUID.cgmMeasurement.name, "CGM Measurement")

    }

    /// Test CGM Feature
    func testCgmFeature() {

         XCTAssertEqual(BluetoothUUID.cgmFeature.rawValue, 0x2AA8)
         XCTAssertEqual(BluetoothUUID.cgmFeature.rawValue, 10920)
         XCTAssertEqual(BluetoothUUID.cgmFeature, .bit16(0x2AA8))
         XCTAssertEqual(BluetoothUUID.cgmFeature.name, "CGM Feature")

    }

    /// Test CGM Status
    func testCgmStatus() {

         XCTAssertEqual(BluetoothUUID.cgmStatus.rawValue, 0x2AA9)
         XCTAssertEqual(BluetoothUUID.cgmStatus.rawValue, 10921)
         XCTAssertEqual(BluetoothUUID.cgmStatus, .bit16(0x2AA9))
         XCTAssertEqual(BluetoothUUID.cgmStatus.name, "CGM Status")

    }

    /// Test CGM Session Start Time
    func testCgmSessionStartTime() {

         XCTAssertEqual(BluetoothUUID.cgmSessionStartTime.rawValue, 0x2AAA)
         XCTAssertEqual(BluetoothUUID.cgmSessionStartTime.rawValue, 10922)
         XCTAssertEqual(BluetoothUUID.cgmSessionStartTime, .bit16(0x2AAA))
         XCTAssertEqual(BluetoothUUID.cgmSessionStartTime.name, "CGM Session Start Time")

    }

    /// Test CGM Session Run Time
    func testCgmSessionRunTime() {

         XCTAssertEqual(BluetoothUUID.cgmSessionRunTime.rawValue, 0x2AAB)
         XCTAssertEqual(BluetoothUUID.cgmSessionRunTime.rawValue, 10923)
         XCTAssertEqual(BluetoothUUID.cgmSessionRunTime, .bit16(0x2AAB))
         XCTAssertEqual(BluetoothUUID.cgmSessionRunTime.name, "CGM Session Run Time")

    }

    /// Test CGM Specific Ops Control Point
    func testCgmSpecificOpsControlPoint() {

         XCTAssertEqual(BluetoothUUID.cgmSpecificOpsControlPoint.rawValue, 0x2AAC)
         XCTAssertEqual(BluetoothUUID.cgmSpecificOpsControlPoint.rawValue, 10924)
         XCTAssertEqual(BluetoothUUID.cgmSpecificOpsControlPoint, .bit16(0x2AAC))
         XCTAssertEqual(BluetoothUUID.cgmSpecificOpsControlPoint.name, "CGM Specific Ops Control Point")

    }

    /// Test Indoor Positioning Configuration
    func testIndoorPositioningConfiguration() {

         XCTAssertEqual(BluetoothUUID.indoorPositioningConfiguration.rawValue, 0x2AAD)
         XCTAssertEqual(BluetoothUUID.indoorPositioningConfiguration.rawValue, 10925)
         XCTAssertEqual(BluetoothUUID.indoorPositioningConfiguration, .bit16(0x2AAD))
         XCTAssertEqual(BluetoothUUID.indoorPositioningConfiguration.name, "Indoor Positioning Configuration")

    }

    /// Test Latitude
    func testLatitude() {

         XCTAssertEqual(BluetoothUUID.latitude.rawValue, 0x2AAE)
         XCTAssertEqual(BluetoothUUID.latitude.rawValue, 10926)
         XCTAssertEqual(BluetoothUUID.latitude, .bit16(0x2AAE))
         XCTAssertEqual(BluetoothUUID.latitude.name, "Latitude")

    }

    /// Test Longitude
    func testLongitude() {

         XCTAssertEqual(BluetoothUUID.longitude.rawValue, 0x2AAF)
         XCTAssertEqual(BluetoothUUID.longitude.rawValue, 10927)
         XCTAssertEqual(BluetoothUUID.longitude, .bit16(0x2AAF))
         XCTAssertEqual(BluetoothUUID.longitude.name, "Longitude")

    }

    /// Test Local North Coordinate
    func testLocalNorthCoordinate() {

         XCTAssertEqual(BluetoothUUID.localNorthCoordinate.rawValue, 0x2AB0)
         XCTAssertEqual(BluetoothUUID.localNorthCoordinate.rawValue, 10928)
         XCTAssertEqual(BluetoothUUID.localNorthCoordinate, .bit16(0x2AB0))
         XCTAssertEqual(BluetoothUUID.localNorthCoordinate.name, "Local North Coordinate")

    }

    /// Test Local East Coordinate
    func testLocalEastCoordinate() {

         XCTAssertEqual(BluetoothUUID.localEastCoordinate.rawValue, 0x2AB1)
         XCTAssertEqual(BluetoothUUID.localEastCoordinate.rawValue, 10929)
         XCTAssertEqual(BluetoothUUID.localEastCoordinate, .bit16(0x2AB1))
         XCTAssertEqual(BluetoothUUID.localEastCoordinate.name, "Local East Coordinate")

    }

    /// Test Floor Number
    func testFloorNumber() {

         XCTAssertEqual(BluetoothUUID.floorNumber.rawValue, 0x2AB2)
         XCTAssertEqual(BluetoothUUID.floorNumber.rawValue, 10930)
         XCTAssertEqual(BluetoothUUID.floorNumber, .bit16(0x2AB2))
         XCTAssertEqual(BluetoothUUID.floorNumber.name, "Floor Number")

    }

    /// Test Altitude
    func testAltitude() {

         XCTAssertEqual(BluetoothUUID.altitude.rawValue, 0x2AB3)
         XCTAssertEqual(BluetoothUUID.altitude.rawValue, 10931)
         XCTAssertEqual(BluetoothUUID.altitude, .bit16(0x2AB3))
         XCTAssertEqual(BluetoothUUID.altitude.name, "Altitude")

    }

    /// Test Uncertainty
    func testUncertainty() {

         XCTAssertEqual(BluetoothUUID.uncertainty.rawValue, 0x2AB4)
         XCTAssertEqual(BluetoothUUID.uncertainty.rawValue, 10932)
         XCTAssertEqual(BluetoothUUID.uncertainty, .bit16(0x2AB4))
         XCTAssertEqual(BluetoothUUID.uncertainty.name, "Uncertainty")

    }

    /// Test Location Name
    func testLocationName() {

         XCTAssertEqual(BluetoothUUID.locationName.rawValue, 0x2AB5)
         XCTAssertEqual(BluetoothUUID.locationName.rawValue, 10933)
         XCTAssertEqual(BluetoothUUID.locationName, .bit16(0x2AB5))
         XCTAssertEqual(BluetoothUUID.locationName.name, "Location Name")

    }

    /// Test URI
    func testUri() {

         XCTAssertEqual(BluetoothUUID.uri.rawValue, 0x2AB6)
         XCTAssertEqual(BluetoothUUID.uri.rawValue, 10934)
         XCTAssertEqual(BluetoothUUID.uri, .bit16(0x2AB6))
         XCTAssertEqual(BluetoothUUID.uri.name, "URI")

    }

    /// Test HTTP Headers
    func testHttpHeaders() {

         XCTAssertEqual(BluetoothUUID.httpHeaders.rawValue, 0x2AB7)
         XCTAssertEqual(BluetoothUUID.httpHeaders.rawValue, 10935)
         XCTAssertEqual(BluetoothUUID.httpHeaders, .bit16(0x2AB7))
         XCTAssertEqual(BluetoothUUID.httpHeaders.name, "HTTP Headers")

    }

    /// Test HTTP Status Code
    func testHttpStatusCode() {

         XCTAssertEqual(BluetoothUUID.httpStatusCode.rawValue, 0x2AB8)
         XCTAssertEqual(BluetoothUUID.httpStatusCode.rawValue, 10936)
         XCTAssertEqual(BluetoothUUID.httpStatusCode, .bit16(0x2AB8))
         XCTAssertEqual(BluetoothUUID.httpStatusCode.name, "HTTP Status Code")

    }

    /// Test HTTP Entity Body
    func testHttpEntityBody() {

         XCTAssertEqual(BluetoothUUID.httpEntityBody.rawValue, 0x2AB9)
         XCTAssertEqual(BluetoothUUID.httpEntityBody.rawValue, 10937)
         XCTAssertEqual(BluetoothUUID.httpEntityBody, .bit16(0x2AB9))
         XCTAssertEqual(BluetoothUUID.httpEntityBody.name, "HTTP Entity Body")

    }

    /// Test HTTP Control Point
    func testHttpControlPoint() {

         XCTAssertEqual(BluetoothUUID.httpControlPoint.rawValue, 0x2ABA)
         XCTAssertEqual(BluetoothUUID.httpControlPoint.rawValue, 10938)
         XCTAssertEqual(BluetoothUUID.httpControlPoint, .bit16(0x2ABA))
         XCTAssertEqual(BluetoothUUID.httpControlPoint.name, "HTTP Control Point")

    }

    /// Test HTTPS Security
    func testHttpsSecurity() {

         XCTAssertEqual(BluetoothUUID.httpsSecurity.rawValue, 0x2ABB)
         XCTAssertEqual(BluetoothUUID.httpsSecurity.rawValue, 10939)
         XCTAssertEqual(BluetoothUUID.httpsSecurity, .bit16(0x2ABB))
         XCTAssertEqual(BluetoothUUID.httpsSecurity.name, "HTTPS Security")

    }

    /// Test TDS Control Point
    func testTdsControlPoint() {

         XCTAssertEqual(BluetoothUUID.tdsControlPoint.rawValue, 0x2ABC)
         XCTAssertEqual(BluetoothUUID.tdsControlPoint.rawValue, 10940)
         XCTAssertEqual(BluetoothUUID.tdsControlPoint, .bit16(0x2ABC))
         XCTAssertEqual(BluetoothUUID.tdsControlPoint.name, "TDS Control Point")

    }

    /// Test OTS Feature
    func testOtsFeature() {

         XCTAssertEqual(BluetoothUUID.otsFeature.rawValue, 0x2ABD)
         XCTAssertEqual(BluetoothUUID.otsFeature.rawValue, 10941)
         XCTAssertEqual(BluetoothUUID.otsFeature, .bit16(0x2ABD))
         XCTAssertEqual(BluetoothUUID.otsFeature.name, "OTS Feature")

    }

    /// Test Object Name
    func testObjectName() {

         XCTAssertEqual(BluetoothUUID.objectName.rawValue, 0x2ABE)
         XCTAssertEqual(BluetoothUUID.objectName.rawValue, 10942)
         XCTAssertEqual(BluetoothUUID.objectName, .bit16(0x2ABE))
         XCTAssertEqual(BluetoothUUID.objectName.name, "Object Name")

    }

    /// Test Object Type
    func testObjectType() {

         XCTAssertEqual(BluetoothUUID.objectType.rawValue, 0x2ABF)
         XCTAssertEqual(BluetoothUUID.objectType.rawValue, 10943)
         XCTAssertEqual(BluetoothUUID.objectType, .bit16(0x2ABF))
         XCTAssertEqual(BluetoothUUID.objectType.name, "Object Type")

    }

    /// Test Object Size
    func testObjectSize() {

         XCTAssertEqual(BluetoothUUID.objectSize.rawValue, 0x2AC0)
         XCTAssertEqual(BluetoothUUID.objectSize.rawValue, 10944)
         XCTAssertEqual(BluetoothUUID.objectSize, .bit16(0x2AC0))
         XCTAssertEqual(BluetoothUUID.objectSize.name, "Object Size")

    }

    /// Test Object First-Created
    func testObjectFirstCreated() {

         XCTAssertEqual(BluetoothUUID.objectFirstCreated.rawValue, 0x2AC1)
         XCTAssertEqual(BluetoothUUID.objectFirstCreated.rawValue, 10945)
         XCTAssertEqual(BluetoothUUID.objectFirstCreated, .bit16(0x2AC1))
         XCTAssertEqual(BluetoothUUID.objectFirstCreated.name, "Object First-Created")

    }

    /// Test Object Last-Modified
    func testObjectLastModified() {

         XCTAssertEqual(BluetoothUUID.objectLastModified.rawValue, 0x2AC2)
         XCTAssertEqual(BluetoothUUID.objectLastModified.rawValue, 10946)
         XCTAssertEqual(BluetoothUUID.objectLastModified, .bit16(0x2AC2))
         XCTAssertEqual(BluetoothUUID.objectLastModified.name, "Object Last-Modified")

    }

    /// Test Object ID
    func testObjectId() {

         XCTAssertEqual(BluetoothUUID.objectId.rawValue, 0x2AC3)
         XCTAssertEqual(BluetoothUUID.objectId.rawValue, 10947)
         XCTAssertEqual(BluetoothUUID.objectId, .bit16(0x2AC3))
         XCTAssertEqual(BluetoothUUID.objectId.name, "Object ID")

    }

    /// Test Object Properties
    func testObjectProperties() {

         XCTAssertEqual(BluetoothUUID.objectProperties.rawValue, 0x2AC4)
         XCTAssertEqual(BluetoothUUID.objectProperties.rawValue, 10948)
         XCTAssertEqual(BluetoothUUID.objectProperties, .bit16(0x2AC4))
         XCTAssertEqual(BluetoothUUID.objectProperties.name, "Object Properties")

    }

    /// Test Object Action Control Point
    func testObjectActionControlPoint() {

         XCTAssertEqual(BluetoothUUID.objectActionControlPoint.rawValue, 0x2AC5)
         XCTAssertEqual(BluetoothUUID.objectActionControlPoint.rawValue, 10949)
         XCTAssertEqual(BluetoothUUID.objectActionControlPoint, .bit16(0x2AC5))
         XCTAssertEqual(BluetoothUUID.objectActionControlPoint.name, "Object Action Control Point")

    }

    /// Test Object List Control Point
    func testObjectListControlPoint() {

         XCTAssertEqual(BluetoothUUID.objectListControlPoint.rawValue, 0x2AC6)
         XCTAssertEqual(BluetoothUUID.objectListControlPoint.rawValue, 10950)
         XCTAssertEqual(BluetoothUUID.objectListControlPoint, .bit16(0x2AC6))
         XCTAssertEqual(BluetoothUUID.objectListControlPoint.name, "Object List Control Point")

    }

    /// Test Object List Filter
    func testObjectListFilter() {

         XCTAssertEqual(BluetoothUUID.objectListFilter.rawValue, 0x2AC7)
         XCTAssertEqual(BluetoothUUID.objectListFilter.rawValue, 10951)
         XCTAssertEqual(BluetoothUUID.objectListFilter, .bit16(0x2AC7))
         XCTAssertEqual(BluetoothUUID.objectListFilter.name, "Object List Filter")

    }

    /// Test Object Changed
    func testObjectChanged() {

         XCTAssertEqual(BluetoothUUID.objectChanged.rawValue, 0x2AC8)
         XCTAssertEqual(BluetoothUUID.objectChanged.rawValue, 10952)
         XCTAssertEqual(BluetoothUUID.objectChanged, .bit16(0x2AC8))
         XCTAssertEqual(BluetoothUUID.objectChanged.name, "Object Changed")

    }

    /// Test Intel Corporation
    func testIntelCorporation() {

         XCTAssertEqual(BluetoothUUID.intelCorporation.rawValue, 0xFE66)
         XCTAssertEqual(BluetoothUUID.intelCorporation.rawValue, 65126)
         XCTAssertEqual(BluetoothUUID.intelCorporation, .bit16(0xFE66))
         XCTAssertEqual(BluetoothUUID.intelCorporation.name, "Intel Corporation")

    }

    /// Test Lab Sensor Solutions
    func testLabSensorSolutions() {

         XCTAssertEqual(BluetoothUUID.labSensorSolutions.rawValue, 0xFE67)
         XCTAssertEqual(BluetoothUUID.labSensorSolutions.rawValue, 65127)
         XCTAssertEqual(BluetoothUUID.labSensorSolutions, .bit16(0xFE67))
         XCTAssertEqual(BluetoothUUID.labSensorSolutions.name, "Lab Sensor Solutions")

    }

    /// Test Qualcomm Life Inc
    func testQualcommLife() {

         XCTAssertEqual(BluetoothUUID.qualcommLife.rawValue, 0xFE68)
         XCTAssertEqual(BluetoothUUID.qualcommLife.rawValue, 65128)
         XCTAssertEqual(BluetoothUUID.qualcommLife, .bit16(0xFE68))
         XCTAssertEqual(BluetoothUUID.qualcommLife.name, "Qualcomm Life Inc")

    }

    /// Test Qualcomm Life Inc
    func testQualcommLife2() {

         XCTAssertEqual(BluetoothUUID.qualcommLife2.rawValue, 0xFE69)
         XCTAssertEqual(BluetoothUUID.qualcommLife2.rawValue, 65129)
         XCTAssertEqual(BluetoothUUID.qualcommLife2, .bit16(0xFE69))
         XCTAssertEqual(BluetoothUUID.qualcommLife2.name, "Qualcomm Life Inc")

    }

    /// Test Kontakt Micro-Location Sp. z o.o.
    func testKontaktMicroLocation() {

         XCTAssertEqual(BluetoothUUID.kontaktMicroLocation.rawValue, 0xFE6A)
         XCTAssertEqual(BluetoothUUID.kontaktMicroLocation.rawValue, 65130)
         XCTAssertEqual(BluetoothUUID.kontaktMicroLocation, .bit16(0xFE6A))
         XCTAssertEqual(BluetoothUUID.kontaktMicroLocation.name, "Kontakt Micro-Location Sp. z o.o.")

    }

    /// Test TASER International, Inc.
    func testTaserInternational() {

         XCTAssertEqual(BluetoothUUID.taserInternational.rawValue, 0xFE6B)
         XCTAssertEqual(BluetoothUUID.taserInternational.rawValue, 65131)
         XCTAssertEqual(BluetoothUUID.taserInternational, .bit16(0xFE6B))
         XCTAssertEqual(BluetoothUUID.taserInternational.name, "TASER International, Inc.")

    }

    /// Test TASER International, Inc.
    func testTaserInternational2() {

         XCTAssertEqual(BluetoothUUID.taserInternational2.rawValue, 0xFE6C)
         XCTAssertEqual(BluetoothUUID.taserInternational2.rawValue, 65132)
         XCTAssertEqual(BluetoothUUID.taserInternational2, .bit16(0xFE6C))
         XCTAssertEqual(BluetoothUUID.taserInternational2.name, "TASER International, Inc.")

    }

    /// Test The University of Tokyo
    func testUniversityOfTokyo() {

         XCTAssertEqual(BluetoothUUID.universityOfTokyo.rawValue, 0xFE6D)
         XCTAssertEqual(BluetoothUUID.universityOfTokyo.rawValue, 65133)
         XCTAssertEqual(BluetoothUUID.universityOfTokyo, .bit16(0xFE6D))
         XCTAssertEqual(BluetoothUUID.universityOfTokyo.name, "The University of Tokyo")

    }

    /// Test The University of Tokyo
    func testUniversityOfTokyo2() {

         XCTAssertEqual(BluetoothUUID.universityOfTokyo2.rawValue, 0xFE6E)
         XCTAssertEqual(BluetoothUUID.universityOfTokyo2.rawValue, 65134)
         XCTAssertEqual(BluetoothUUID.universityOfTokyo2, .bit16(0xFE6E))
         XCTAssertEqual(BluetoothUUID.universityOfTokyo2.name, "The University of Tokyo")

    }

    /// Test LINE Corporation
    func testLineCorporation() {

         XCTAssertEqual(BluetoothUUID.lineCorporation.rawValue, 0xFE6F)
         XCTAssertEqual(BluetoothUUID.lineCorporation.rawValue, 65135)
         XCTAssertEqual(BluetoothUUID.lineCorporation, .bit16(0xFE6F))
         XCTAssertEqual(BluetoothUUID.lineCorporation.name, "LINE Corporation")

    }

    /// Test Beijing Jingdong Century Trading Co., Ltd.
    func testBeijingJingdongCenturyTrading() {

         XCTAssertEqual(BluetoothUUID.beijingJingdongCenturyTrading.rawValue, 0xFE70)
         XCTAssertEqual(BluetoothUUID.beijingJingdongCenturyTrading.rawValue, 65136)
         XCTAssertEqual(BluetoothUUID.beijingJingdongCenturyTrading, .bit16(0xFE70))
         XCTAssertEqual(BluetoothUUID.beijingJingdongCenturyTrading.name, "Beijing Jingdong Century Trading Co., Ltd.")

    }

    /// Test Plume Design Inc
    func testPlumeDesign() {

         XCTAssertEqual(BluetoothUUID.plumeDesign.rawValue, 0xFE71)
         XCTAssertEqual(BluetoothUUID.plumeDesign.rawValue, 65137)
         XCTAssertEqual(BluetoothUUID.plumeDesign, .bit16(0xFE71))
         XCTAssertEqual(BluetoothUUID.plumeDesign.name, "Plume Design Inc")

    }

    /// Test St. Jude Medical, Inc.
    func testStJudeMedical() {

         XCTAssertEqual(BluetoothUUID.stJudeMedical.rawValue, 0xFE72)
         XCTAssertEqual(BluetoothUUID.stJudeMedical.rawValue, 65138)
         XCTAssertEqual(BluetoothUUID.stJudeMedical, .bit16(0xFE72))
         XCTAssertEqual(BluetoothUUID.stJudeMedical.name, "St. Jude Medical, Inc.")

    }

    /// Test St. Jude Medical, Inc.
    func testStJudeMedical2() {

         XCTAssertEqual(BluetoothUUID.stJudeMedical2.rawValue, 0xFE73)
         XCTAssertEqual(BluetoothUUID.stJudeMedical2.rawValue, 65139)
         XCTAssertEqual(BluetoothUUID.stJudeMedical2, .bit16(0xFE73))
         XCTAssertEqual(BluetoothUUID.stJudeMedical2.name, "St. Jude Medical, Inc.")

    }

    /// Test unwire
    func testUnwire() {

         XCTAssertEqual(BluetoothUUID.unwire.rawValue, 0xFE74)
         XCTAssertEqual(BluetoothUUID.unwire.rawValue, 65140)
         XCTAssertEqual(BluetoothUUID.unwire, .bit16(0xFE74))
         XCTAssertEqual(BluetoothUUID.unwire.name, "unwire")

    }

    /// Test TangoMe
    func testTangome() {

         XCTAssertEqual(BluetoothUUID.tangome.rawValue, 0xFE75)
         XCTAssertEqual(BluetoothUUID.tangome.rawValue, 65141)
         XCTAssertEqual(BluetoothUUID.tangome, .bit16(0xFE75))
         XCTAssertEqual(BluetoothUUID.tangome.name, "TangoMe")

    }

    /// Test TangoMe
    func testTangome2() {

         XCTAssertEqual(BluetoothUUID.tangome2.rawValue, 0xFE76)
         XCTAssertEqual(BluetoothUUID.tangome2.rawValue, 65142)
         XCTAssertEqual(BluetoothUUID.tangome2, .bit16(0xFE76))
         XCTAssertEqual(BluetoothUUID.tangome2.name, "TangoMe")

    }

    /// Test Hewlett-Packard Company
    func testHewlettPackardCompany() {

         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany.rawValue, 0xFE77)
         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany.rawValue, 65143)
         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany, .bit16(0xFE77))
         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany.name, "Hewlett-Packard Company")

    }

    /// Test Hewlett-Packard Company
    func testHewlettPackardCompany2() {

         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany2.rawValue, 0xFE78)
         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany2.rawValue, 65144)
         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany2, .bit16(0xFE78))
         XCTAssertEqual(BluetoothUUID.hewlettPackardCompany2.name, "Hewlett-Packard Company")

    }

    /// Test Zebra Technologies
    func testZebraTechnologies() {

         XCTAssertEqual(BluetoothUUID.zebraTechnologies.rawValue, 0xFE79)
         XCTAssertEqual(BluetoothUUID.zebraTechnologies.rawValue, 65145)
         XCTAssertEqual(BluetoothUUID.zebraTechnologies, .bit16(0xFE79))
         XCTAssertEqual(BluetoothUUID.zebraTechnologies.name, "Zebra Technologies")

    }

    /// Test Bragi GmbH
    func testBragiGmbh() {

         XCTAssertEqual(BluetoothUUID.bragiGmbh.rawValue, 0xFE7A)
         XCTAssertEqual(BluetoothUUID.bragiGmbh.rawValue, 65146)
         XCTAssertEqual(BluetoothUUID.bragiGmbh, .bit16(0xFE7A))
         XCTAssertEqual(BluetoothUUID.bragiGmbh.name, "Bragi GmbH")

    }

    /// Test Orion Labs, Inc.
    func testOrionLabs() {

         XCTAssertEqual(BluetoothUUID.orionLabs.rawValue, 0xFE7B)
         XCTAssertEqual(BluetoothUUID.orionLabs.rawValue, 65147)
         XCTAssertEqual(BluetoothUUID.orionLabs, .bit16(0xFE7B))
         XCTAssertEqual(BluetoothUUID.orionLabs.name, "Orion Labs, Inc.")

    }

    /// Test Stollmann E+V GmbH
    func testStollmannEVGmbh() {

         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh.rawValue, 0xFE7C)
         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh.rawValue, 65148)
         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh, .bit16(0xFE7C))
         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh.name, "Stollmann E+V GmbH")

    }

    /// Test Aterica Health Inc.
    func testAtericaHealth() {

         XCTAssertEqual(BluetoothUUID.atericaHealth.rawValue, 0xFE7D)
         XCTAssertEqual(BluetoothUUID.atericaHealth.rawValue, 65149)
         XCTAssertEqual(BluetoothUUID.atericaHealth, .bit16(0xFE7D))
         XCTAssertEqual(BluetoothUUID.atericaHealth.name, "Aterica Health Inc.")

    }

    /// Test Awear Solutions Ltd
    func testAwearSolutions() {

         XCTAssertEqual(BluetoothUUID.awearSolutions.rawValue, 0xFE7E)
         XCTAssertEqual(BluetoothUUID.awearSolutions.rawValue, 65150)
         XCTAssertEqual(BluetoothUUID.awearSolutions, .bit16(0xFE7E))
         XCTAssertEqual(BluetoothUUID.awearSolutions.name, "Awear Solutions Ltd")

    }

    /// Test Doppler Lab
    func testDopplerLab() {

         XCTAssertEqual(BluetoothUUID.dopplerLab.rawValue, 0xFE7F)
         XCTAssertEqual(BluetoothUUID.dopplerLab.rawValue, 65151)
         XCTAssertEqual(BluetoothUUID.dopplerLab, .bit16(0xFE7F))
         XCTAssertEqual(BluetoothUUID.dopplerLab.name, "Doppler Lab")

    }

    /// Test Doppler Lab
    func testDopplerLab2() {

         XCTAssertEqual(BluetoothUUID.dopplerLab2.rawValue, 0xFE80)
         XCTAssertEqual(BluetoothUUID.dopplerLab2.rawValue, 65152)
         XCTAssertEqual(BluetoothUUID.dopplerLab2, .bit16(0xFE80))
         XCTAssertEqual(BluetoothUUID.dopplerLab2.name, "Doppler Lab")

    }

    /// Test Medtronic Inc.
    func testMedtronic() {

         XCTAssertEqual(BluetoothUUID.medtronic.rawValue, 0xFE81)
         XCTAssertEqual(BluetoothUUID.medtronic.rawValue, 65153)
         XCTAssertEqual(BluetoothUUID.medtronic, .bit16(0xFE81))
         XCTAssertEqual(BluetoothUUID.medtronic.name, "Medtronic Inc.")

    }

    /// Test Medtronic Inc.
    func testMedtronic2() {

         XCTAssertEqual(BluetoothUUID.medtronic2.rawValue, 0xFE82)
         XCTAssertEqual(BluetoothUUID.medtronic2.rawValue, 65154)
         XCTAssertEqual(BluetoothUUID.medtronic2, .bit16(0xFE82))
         XCTAssertEqual(BluetoothUUID.medtronic2.name, "Medtronic Inc.")

    }

    /// Test Blue Bite
    func testBlueBite() {

         XCTAssertEqual(BluetoothUUID.blueBite.rawValue, 0xFE83)
         XCTAssertEqual(BluetoothUUID.blueBite.rawValue, 65155)
         XCTAssertEqual(BluetoothUUID.blueBite, .bit16(0xFE83))
         XCTAssertEqual(BluetoothUUID.blueBite.name, "Blue Bite")

    }

    /// Test RF Digital Corp
    func testRfDigitalCorp() {

         XCTAssertEqual(BluetoothUUID.rfDigitalCorp.rawValue, 0xFE84)
         XCTAssertEqual(BluetoothUUID.rfDigitalCorp.rawValue, 65156)
         XCTAssertEqual(BluetoothUUID.rfDigitalCorp, .bit16(0xFE84))
         XCTAssertEqual(BluetoothUUID.rfDigitalCorp.name, "RF Digital Corp")

    }

    /// Test RF Digital Corp
    func testRfDigitalCorp2() {

         XCTAssertEqual(BluetoothUUID.rfDigitalCorp2.rawValue, 0xFE85)
         XCTAssertEqual(BluetoothUUID.rfDigitalCorp2.rawValue, 65157)
         XCTAssertEqual(BluetoothUUID.rfDigitalCorp2, .bit16(0xFE85))
         XCTAssertEqual(BluetoothUUID.rfDigitalCorp2.name, "RF Digital Corp")

    }

    /// Test HUAWEI Technologies Co., Ltd. ( 华为技术有限公司 )
    func testHuaweiTechnologies华为技术有限公司() {

         XCTAssertEqual(BluetoothUUID.huaweiTechnologies华为技术有限公司.rawValue, 0xFE86)
         XCTAssertEqual(BluetoothUUID.huaweiTechnologies华为技术有限公司.rawValue, 65158)
         XCTAssertEqual(BluetoothUUID.huaweiTechnologies华为技术有限公司, .bit16(0xFE86))
         XCTAssertEqual(BluetoothUUID.huaweiTechnologies华为技术有限公司.name, "HUAWEI Technologies Co., Ltd. ( 华为技术有限公司 )")

    }

    /// Test Qingdao Yeelink Information Technology Co., Ltd. ( 青岛亿联客信息技术有限公司 )
    func testQingdaoYeelinkInformationTechnology青岛亿联客信息技术有限公司() {

         XCTAssertEqual(BluetoothUUID.qingdaoYeelinkInformationTechnology青岛亿联客信息技术有限公司.rawValue, 0xFE87)
         XCTAssertEqual(BluetoothUUID.qingdaoYeelinkInformationTechnology青岛亿联客信息技术有限公司.rawValue, 65159)
         XCTAssertEqual(BluetoothUUID.qingdaoYeelinkInformationTechnology青岛亿联客信息技术有限公司, .bit16(0xFE87))
         XCTAssertEqual(BluetoothUUID.qingdaoYeelinkInformationTechnology青岛亿联客信息技术有限公司.name, "Qingdao Yeelink Information Technology Co., Ltd. ( 青岛亿联客信息技术有限公司 )")

    }

    /// Test SALTO SYSTEMS S.L.
    func testSaltoSystemsSL() {

         XCTAssertEqual(BluetoothUUID.saltoSystemsSL.rawValue, 0xFE88)
         XCTAssertEqual(BluetoothUUID.saltoSystemsSL.rawValue, 65160)
         XCTAssertEqual(BluetoothUUID.saltoSystemsSL, .bit16(0xFE88))
         XCTAssertEqual(BluetoothUUID.saltoSystemsSL.name, "SALTO SYSTEMS S.L.")

    }

    /// Test B&O Play A/S
    func testBOPlayAS() {

         XCTAssertEqual(BluetoothUUID.bOPlayAS.rawValue, 0xFE89)
         XCTAssertEqual(BluetoothUUID.bOPlayAS.rawValue, 65161)
         XCTAssertEqual(BluetoothUUID.bOPlayAS, .bit16(0xFE89))
         XCTAssertEqual(BluetoothUUID.bOPlayAS.name, "B&O Play A/S")

    }

    /// Test Apple, Inc.
    func testApple() {

         XCTAssertEqual(BluetoothUUID.apple.rawValue, 0xFE8A)
         XCTAssertEqual(BluetoothUUID.apple.rawValue, 65162)
         XCTAssertEqual(BluetoothUUID.apple, .bit16(0xFE8A))
         XCTAssertEqual(BluetoothUUID.apple.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple2() {

         XCTAssertEqual(BluetoothUUID.apple2.rawValue, 0xFE8B)
         XCTAssertEqual(BluetoothUUID.apple2.rawValue, 65163)
         XCTAssertEqual(BluetoothUUID.apple2, .bit16(0xFE8B))
         XCTAssertEqual(BluetoothUUID.apple2.name, "Apple, Inc.")

    }

    /// Test TRON Forum
    func testTronForum() {

         XCTAssertEqual(BluetoothUUID.tronForum.rawValue, 0xFE8C)
         XCTAssertEqual(BluetoothUUID.tronForum.rawValue, 65164)
         XCTAssertEqual(BluetoothUUID.tronForum, .bit16(0xFE8C))
         XCTAssertEqual(BluetoothUUID.tronForum.name, "TRON Forum")

    }

    /// Test Interaxon Inc.
    func testInteraxon() {

         XCTAssertEqual(BluetoothUUID.interaxon.rawValue, 0xFE8D)
         XCTAssertEqual(BluetoothUUID.interaxon.rawValue, 65165)
         XCTAssertEqual(BluetoothUUID.interaxon, .bit16(0xFE8D))
         XCTAssertEqual(BluetoothUUID.interaxon.name, "Interaxon Inc.")

    }

    /// Test ARM Ltd
    func testArm() {

         XCTAssertEqual(BluetoothUUID.arm.rawValue, 0xFE8E)
         XCTAssertEqual(BluetoothUUID.arm.rawValue, 65166)
         XCTAssertEqual(BluetoothUUID.arm, .bit16(0xFE8E))
         XCTAssertEqual(BluetoothUUID.arm.name, "ARM Ltd")

    }

    /// Test CSR
    func testCsr() {

         XCTAssertEqual(BluetoothUUID.csr.rawValue, 0xFE8F)
         XCTAssertEqual(BluetoothUUID.csr.rawValue, 65167)
         XCTAssertEqual(BluetoothUUID.csr, .bit16(0xFE8F))
         XCTAssertEqual(BluetoothUUID.csr.name, "CSR")

    }

    /// Test JUMA
    func testJuma() {

         XCTAssertEqual(BluetoothUUID.juma.rawValue, 0xFE90)
         XCTAssertEqual(BluetoothUUID.juma.rawValue, 65168)
         XCTAssertEqual(BluetoothUUID.juma, .bit16(0xFE90))
         XCTAssertEqual(BluetoothUUID.juma.name, "JUMA")

    }

    /// Test Shanghai Imilab Technology Co.,Ltd
    func testShanghaiImilabTechnology() {

         XCTAssertEqual(BluetoothUUID.shanghaiImilabTechnology.rawValue, 0xFE91)
         XCTAssertEqual(BluetoothUUID.shanghaiImilabTechnology.rawValue, 65169)
         XCTAssertEqual(BluetoothUUID.shanghaiImilabTechnology, .bit16(0xFE91))
         XCTAssertEqual(BluetoothUUID.shanghaiImilabTechnology.name, "Shanghai Imilab Technology Co.,Ltd")

    }

    /// Test Jarden Safety & Security
    func testJardenSafetySecurity() {

         XCTAssertEqual(BluetoothUUID.jardenSafetySecurity.rawValue, 0xFE92)
         XCTAssertEqual(BluetoothUUID.jardenSafetySecurity.rawValue, 65170)
         XCTAssertEqual(BluetoothUUID.jardenSafetySecurity, .bit16(0xFE92))
         XCTAssertEqual(BluetoothUUID.jardenSafetySecurity.name, "Jarden Safety & Security")

    }

    /// Test OttoQ Inc.
    func testOttoq() {

         XCTAssertEqual(BluetoothUUID.ottoq.rawValue, 0xFE93)
         XCTAssertEqual(BluetoothUUID.ottoq.rawValue, 65171)
         XCTAssertEqual(BluetoothUUID.ottoq, .bit16(0xFE93))
         XCTAssertEqual(BluetoothUUID.ottoq.name, "OttoQ Inc.")

    }

    /// Test OttoQ Inc.
    func testOttoq2() {

         XCTAssertEqual(BluetoothUUID.ottoq2.rawValue, 0xFE94)
         XCTAssertEqual(BluetoothUUID.ottoq2.rawValue, 65172)
         XCTAssertEqual(BluetoothUUID.ottoq2, .bit16(0xFE94))
         XCTAssertEqual(BluetoothUUID.ottoq2.name, "OttoQ Inc.")

    }

    /// Test Xiaomi Inc.
    func testXiaomi() {

         XCTAssertEqual(BluetoothUUID.xiaomi.rawValue, 0xFE95)
         XCTAssertEqual(BluetoothUUID.xiaomi.rawValue, 65173)
         XCTAssertEqual(BluetoothUUID.xiaomi, .bit16(0xFE95))
         XCTAssertEqual(BluetoothUUID.xiaomi.name, "Xiaomi Inc.")

    }

    /// Test Tesla Motor Inc.
    func testTeslaMotor() {

         XCTAssertEqual(BluetoothUUID.teslaMotor.rawValue, 0xFE96)
         XCTAssertEqual(BluetoothUUID.teslaMotor.rawValue, 65174)
         XCTAssertEqual(BluetoothUUID.teslaMotor, .bit16(0xFE96))
         XCTAssertEqual(BluetoothUUID.teslaMotor.name, "Tesla Motor Inc.")

    }

    /// Test Tesla Motor Inc.
    func testTeslaMotor2() {

         XCTAssertEqual(BluetoothUUID.teslaMotor2.rawValue, 0xFE97)
         XCTAssertEqual(BluetoothUUID.teslaMotor2.rawValue, 65175)
         XCTAssertEqual(BluetoothUUID.teslaMotor2, .bit16(0xFE97))
         XCTAssertEqual(BluetoothUUID.teslaMotor2.name, "Tesla Motor Inc.")

    }

    /// Test Currant, Inc.
    func testCurrant() {

         XCTAssertEqual(BluetoothUUID.currant.rawValue, 0xFE98)
         XCTAssertEqual(BluetoothUUID.currant.rawValue, 65176)
         XCTAssertEqual(BluetoothUUID.currant, .bit16(0xFE98))
         XCTAssertEqual(BluetoothUUID.currant.name, "Currant, Inc.")

    }

    /// Test Currant, Inc.
    func testCurrant2() {

         XCTAssertEqual(BluetoothUUID.currant2.rawValue, 0xFE99)
         XCTAssertEqual(BluetoothUUID.currant2.rawValue, 65177)
         XCTAssertEqual(BluetoothUUID.currant2, .bit16(0xFE99))
         XCTAssertEqual(BluetoothUUID.currant2.name, "Currant, Inc.")

    }

    /// Test Estimote
    func testEstimote() {

         XCTAssertEqual(BluetoothUUID.estimote.rawValue, 0xFE9A)
         XCTAssertEqual(BluetoothUUID.estimote.rawValue, 65178)
         XCTAssertEqual(BluetoothUUID.estimote, .bit16(0xFE9A))
         XCTAssertEqual(BluetoothUUID.estimote.name, "Estimote")

    }

    /// Test Samsara Networks, Inc
    func testSamsaraNetworks() {

         XCTAssertEqual(BluetoothUUID.samsaraNetworks.rawValue, 0xFE9B)
         XCTAssertEqual(BluetoothUUID.samsaraNetworks.rawValue, 65179)
         XCTAssertEqual(BluetoothUUID.samsaraNetworks, .bit16(0xFE9B))
         XCTAssertEqual(BluetoothUUID.samsaraNetworks.name, "Samsara Networks, Inc")

    }

    /// Test GSI Laboratories, Inc.
    func testGsiLaboratories() {

         XCTAssertEqual(BluetoothUUID.gsiLaboratories.rawValue, 0xFE9C)
         XCTAssertEqual(BluetoothUUID.gsiLaboratories.rawValue, 65180)
         XCTAssertEqual(BluetoothUUID.gsiLaboratories, .bit16(0xFE9C))
         XCTAssertEqual(BluetoothUUID.gsiLaboratories.name, "GSI Laboratories, Inc.")

    }

    /// Test Mobiquity Networks Inc
    func testMobiquityNetworks() {

         XCTAssertEqual(BluetoothUUID.mobiquityNetworks.rawValue, 0xFE9D)
         XCTAssertEqual(BluetoothUUID.mobiquityNetworks.rawValue, 65181)
         XCTAssertEqual(BluetoothUUID.mobiquityNetworks, .bit16(0xFE9D))
         XCTAssertEqual(BluetoothUUID.mobiquityNetworks.name, "Mobiquity Networks Inc")

    }

    /// Test Dialog Semiconductor B.V.
    func testDialogSemiconductorBV() {

         XCTAssertEqual(BluetoothUUID.dialogSemiconductorBV.rawValue, 0xFE9E)
         XCTAssertEqual(BluetoothUUID.dialogSemiconductorBV.rawValue, 65182)
         XCTAssertEqual(BluetoothUUID.dialogSemiconductorBV, .bit16(0xFE9E))
         XCTAssertEqual(BluetoothUUID.dialogSemiconductorBV.name, "Dialog Semiconductor B.V.")

    }

    /// Test Google
    func testGoogle() {

         XCTAssertEqual(BluetoothUUID.google.rawValue, 0xFE9F)
         XCTAssertEqual(BluetoothUUID.google.rawValue, 65183)
         XCTAssertEqual(BluetoothUUID.google, .bit16(0xFE9F))
         XCTAssertEqual(BluetoothUUID.google.name, "Google")

    }

    /// Test Google
    func testGoogle2() {

         XCTAssertEqual(BluetoothUUID.google2.rawValue, 0xFEA0)
         XCTAssertEqual(BluetoothUUID.google2.rawValue, 65184)
         XCTAssertEqual(BluetoothUUID.google2, .bit16(0xFEA0))
         XCTAssertEqual(BluetoothUUID.google2.name, "Google")

    }

    /// Test Intrepid Control Systems, Inc.
    func testIntrepidControlSystems() {

         XCTAssertEqual(BluetoothUUID.intrepidControlSystems.rawValue, 0xFEA1)
         XCTAssertEqual(BluetoothUUID.intrepidControlSystems.rawValue, 65185)
         XCTAssertEqual(BluetoothUUID.intrepidControlSystems, .bit16(0xFEA1))
         XCTAssertEqual(BluetoothUUID.intrepidControlSystems.name, "Intrepid Control Systems, Inc.")

    }

    /// Test Intrepid Control Systems, Inc.
    func testIntrepidControlSystems2() {

         XCTAssertEqual(BluetoothUUID.intrepidControlSystems2.rawValue, 0xFEA2)
         XCTAssertEqual(BluetoothUUID.intrepidControlSystems2.rawValue, 65186)
         XCTAssertEqual(BluetoothUUID.intrepidControlSystems2, .bit16(0xFEA2))
         XCTAssertEqual(BluetoothUUID.intrepidControlSystems2.name, "Intrepid Control Systems, Inc.")

    }

    /// Test ITT Industries
    func testIttIndustries() {

         XCTAssertEqual(BluetoothUUID.ittIndustries.rawValue, 0xFEA3)
         XCTAssertEqual(BluetoothUUID.ittIndustries.rawValue, 65187)
         XCTAssertEqual(BluetoothUUID.ittIndustries, .bit16(0xFEA3))
         XCTAssertEqual(BluetoothUUID.ittIndustries.name, "ITT Industries")

    }

    /// Test Paxton Access Ltd
    func testPaxtonAccess() {

         XCTAssertEqual(BluetoothUUID.paxtonAccess.rawValue, 0xFEA4)
         XCTAssertEqual(BluetoothUUID.paxtonAccess.rawValue, 65188)
         XCTAssertEqual(BluetoothUUID.paxtonAccess, .bit16(0xFEA4))
         XCTAssertEqual(BluetoothUUID.paxtonAccess.name, "Paxton Access Ltd")

    }

    /// Test GoPro, Inc.
    func testGopro() {

         XCTAssertEqual(BluetoothUUID.gopro.rawValue, 0xFEA5)
         XCTAssertEqual(BluetoothUUID.gopro.rawValue, 65189)
         XCTAssertEqual(BluetoothUUID.gopro, .bit16(0xFEA5))
         XCTAssertEqual(BluetoothUUID.gopro.name, "GoPro, Inc.")

    }

    /// Test GoPro, Inc.
    func testGopro2() {

         XCTAssertEqual(BluetoothUUID.gopro2.rawValue, 0xFEA6)
         XCTAssertEqual(BluetoothUUID.gopro2.rawValue, 65190)
         XCTAssertEqual(BluetoothUUID.gopro2, .bit16(0xFEA6))
         XCTAssertEqual(BluetoothUUID.gopro2.name, "GoPro, Inc.")

    }

    /// Test UTC Fire and Security
    func testUtcFireAndSecurity() {

         XCTAssertEqual(BluetoothUUID.utcFireAndSecurity.rawValue, 0xFEA7)
         XCTAssertEqual(BluetoothUUID.utcFireAndSecurity.rawValue, 65191)
         XCTAssertEqual(BluetoothUUID.utcFireAndSecurity, .bit16(0xFEA7))
         XCTAssertEqual(BluetoothUUID.utcFireAndSecurity.name, "UTC Fire and Security")

    }

    /// Test Savant Systems LLC
    func testSavantSystems() {

         XCTAssertEqual(BluetoothUUID.savantSystems.rawValue, 0xFEA8)
         XCTAssertEqual(BluetoothUUID.savantSystems.rawValue, 65192)
         XCTAssertEqual(BluetoothUUID.savantSystems, .bit16(0xFEA8))
         XCTAssertEqual(BluetoothUUID.savantSystems.name, "Savant Systems LLC")

    }

    /// Test Savant Systems LLC
    func testSavantSystems2() {

         XCTAssertEqual(BluetoothUUID.savantSystems2.rawValue, 0xFEA9)
         XCTAssertEqual(BluetoothUUID.savantSystems2.rawValue, 65193)
         XCTAssertEqual(BluetoothUUID.savantSystems2, .bit16(0xFEA9))
         XCTAssertEqual(BluetoothUUID.savantSystems2.name, "Savant Systems LLC")

    }

    /// Test Google
    func testGoogle3() {

         XCTAssertEqual(BluetoothUUID.google3.rawValue, 0xFEAA)
         XCTAssertEqual(BluetoothUUID.google3.rawValue, 65194)
         XCTAssertEqual(BluetoothUUID.google3, .bit16(0xFEAA))
         XCTAssertEqual(BluetoothUUID.google3.name, "Google")

    }

    /// Test Nokia Corporation
    func testNokiaCorporation() {

         XCTAssertEqual(BluetoothUUID.nokiaCorporation.rawValue, 0xFEAB)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation.rawValue, 65195)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation, .bit16(0xFEAB))
         XCTAssertEqual(BluetoothUUID.nokiaCorporation.name, "Nokia Corporation")

    }

    /// Test Nokia Corporation
    func testNokiaCorporation2() {

         XCTAssertEqual(BluetoothUUID.nokiaCorporation2.rawValue, 0xFEAC)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation2.rawValue, 65196)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation2, .bit16(0xFEAC))
         XCTAssertEqual(BluetoothUUID.nokiaCorporation2.name, "Nokia Corporation")

    }

    /// Test Nokia Corporation
    func testNokiaCorporation3() {

         XCTAssertEqual(BluetoothUUID.nokiaCorporation3.rawValue, 0xFEAD)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation3.rawValue, 65197)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation3, .bit16(0xFEAD))
         XCTAssertEqual(BluetoothUUID.nokiaCorporation3.name, "Nokia Corporation")

    }

    /// Test Nokia Corporation
    func testNokiaCorporation4() {

         XCTAssertEqual(BluetoothUUID.nokiaCorporation4.rawValue, 0xFEAE)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation4.rawValue, 65198)
         XCTAssertEqual(BluetoothUUID.nokiaCorporation4, .bit16(0xFEAE))
         XCTAssertEqual(BluetoothUUID.nokiaCorporation4.name, "Nokia Corporation")

    }

    /// Test Nest Labs Inc.
    func testNestLabs() {

         XCTAssertEqual(BluetoothUUID.nestLabs.rawValue, 0xFEAF)
         XCTAssertEqual(BluetoothUUID.nestLabs.rawValue, 65199)
         XCTAssertEqual(BluetoothUUID.nestLabs, .bit16(0xFEAF))
         XCTAssertEqual(BluetoothUUID.nestLabs.name, "Nest Labs Inc.")

    }

    /// Test Nest Labs Inc.
    func testNestLabs2() {

         XCTAssertEqual(BluetoothUUID.nestLabs2.rawValue, 0xFEB0)
         XCTAssertEqual(BluetoothUUID.nestLabs2.rawValue, 65200)
         XCTAssertEqual(BluetoothUUID.nestLabs2, .bit16(0xFEB0))
         XCTAssertEqual(BluetoothUUID.nestLabs2.name, "Nest Labs Inc.")

    }

    /// Test Electronics Tomorrow Limited
    func testElectronicsTomorrowLimited() {

         XCTAssertEqual(BluetoothUUID.electronicsTomorrowLimited.rawValue, 0xFEB1)
         XCTAssertEqual(BluetoothUUID.electronicsTomorrowLimited.rawValue, 65201)
         XCTAssertEqual(BluetoothUUID.electronicsTomorrowLimited, .bit16(0xFEB1))
         XCTAssertEqual(BluetoothUUID.electronicsTomorrowLimited.name, "Electronics Tomorrow Limited")

    }

    /// Test Microsoft Corporation
    func testMicrosoftCorporation() {

         XCTAssertEqual(BluetoothUUID.microsoftCorporation.rawValue, 0xFEB2)
         XCTAssertEqual(BluetoothUUID.microsoftCorporation.rawValue, 65202)
         XCTAssertEqual(BluetoothUUID.microsoftCorporation, .bit16(0xFEB2))
         XCTAssertEqual(BluetoothUUID.microsoftCorporation.name, "Microsoft Corporation")

    }

    /// Test Taobao
    func testTaobao() {

         XCTAssertEqual(BluetoothUUID.taobao.rawValue, 0xFEB3)
         XCTAssertEqual(BluetoothUUID.taobao.rawValue, 65203)
         XCTAssertEqual(BluetoothUUID.taobao, .bit16(0xFEB3))
         XCTAssertEqual(BluetoothUUID.taobao.name, "Taobao")

    }

    /// Test WiSilica Inc.
    func testWisilica() {

         XCTAssertEqual(BluetoothUUID.wisilica.rawValue, 0xFEB4)
         XCTAssertEqual(BluetoothUUID.wisilica.rawValue, 65204)
         XCTAssertEqual(BluetoothUUID.wisilica, .bit16(0xFEB4))
         XCTAssertEqual(BluetoothUUID.wisilica.name, "WiSilica Inc.")

    }

    /// Test WiSilica Inc.
    func testWisilica2() {

         XCTAssertEqual(BluetoothUUID.wisilica2.rawValue, 0xFEB5)
         XCTAssertEqual(BluetoothUUID.wisilica2.rawValue, 65205)
         XCTAssertEqual(BluetoothUUID.wisilica2, .bit16(0xFEB5))
         XCTAssertEqual(BluetoothUUID.wisilica2.name, "WiSilica Inc.")

    }

    /// Test Vencer Co, Ltd
    func testVencerCo() {

         XCTAssertEqual(BluetoothUUID.vencerCo.rawValue, 0xFEB6)
         XCTAssertEqual(BluetoothUUID.vencerCo.rawValue, 65206)
         XCTAssertEqual(BluetoothUUID.vencerCo, .bit16(0xFEB6))
         XCTAssertEqual(BluetoothUUID.vencerCo.name, "Vencer Co, Ltd")

    }

    /// Test Facebook, Inc.
    func testFacebook() {

         XCTAssertEqual(BluetoothUUID.facebook.rawValue, 0xFEB7)
         XCTAssertEqual(BluetoothUUID.facebook.rawValue, 65207)
         XCTAssertEqual(BluetoothUUID.facebook, .bit16(0xFEB7))
         XCTAssertEqual(BluetoothUUID.facebook.name, "Facebook, Inc.")

    }

    /// Test Facebook, Inc.
    func testFacebook2() {

         XCTAssertEqual(BluetoothUUID.facebook2.rawValue, 0xFEB8)
         XCTAssertEqual(BluetoothUUID.facebook2.rawValue, 65208)
         XCTAssertEqual(BluetoothUUID.facebook2, .bit16(0xFEB8))
         XCTAssertEqual(BluetoothUUID.facebook2.name, "Facebook, Inc.")

    }

    /// Test LG Electronics
    func testLgElectronics() {

         XCTAssertEqual(BluetoothUUID.lgElectronics.rawValue, 0xFEB9)
         XCTAssertEqual(BluetoothUUID.lgElectronics.rawValue, 65209)
         XCTAssertEqual(BluetoothUUID.lgElectronics, .bit16(0xFEB9))
         XCTAssertEqual(BluetoothUUID.lgElectronics.name, "LG Electronics")

    }

    /// Test Tencent Holdings Limited
    func testTencentHoldingsLimited() {

         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited.rawValue, 0xFEBA)
         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited.rawValue, 65210)
         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited, .bit16(0xFEBA))
         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited.name, "Tencent Holdings Limited")

    }

    /// Test adafruit industries
    func testAdafruitIndustries() {

         XCTAssertEqual(BluetoothUUID.adafruitIndustries.rawValue, 0xFEBB)
         XCTAssertEqual(BluetoothUUID.adafruitIndustries.rawValue, 65211)
         XCTAssertEqual(BluetoothUUID.adafruitIndustries, .bit16(0xFEBB))
         XCTAssertEqual(BluetoothUUID.adafruitIndustries.name, "adafruit industries")

    }

    /// Test Dexcom, Inc.
    func testDexcom() {

         XCTAssertEqual(BluetoothUUID.dexcom.rawValue, 0xFEBC)
         XCTAssertEqual(BluetoothUUID.dexcom.rawValue, 65212)
         XCTAssertEqual(BluetoothUUID.dexcom, .bit16(0xFEBC))
         XCTAssertEqual(BluetoothUUID.dexcom.name, "Dexcom, Inc.")

    }

    /// Test Clover Network, Inc.
    func testCloverNetwork() {

         XCTAssertEqual(BluetoothUUID.cloverNetwork.rawValue, 0xFEBD)
         XCTAssertEqual(BluetoothUUID.cloverNetwork.rawValue, 65213)
         XCTAssertEqual(BluetoothUUID.cloverNetwork, .bit16(0xFEBD))
         XCTAssertEqual(BluetoothUUID.cloverNetwork.name, "Clover Network, Inc.")

    }

    /// Test Bose Corporation
    func testBoseCorporation() {

         XCTAssertEqual(BluetoothUUID.boseCorporation.rawValue, 0xFEBE)
         XCTAssertEqual(BluetoothUUID.boseCorporation.rawValue, 65214)
         XCTAssertEqual(BluetoothUUID.boseCorporation, .bit16(0xFEBE))
         XCTAssertEqual(BluetoothUUID.boseCorporation.name, "Bose Corporation")

    }

    /// Test Nod, Inc.
    func testNod() {

         XCTAssertEqual(BluetoothUUID.nod.rawValue, 0xFEBF)
         XCTAssertEqual(BluetoothUUID.nod.rawValue, 65215)
         XCTAssertEqual(BluetoothUUID.nod, .bit16(0xFEBF))
         XCTAssertEqual(BluetoothUUID.nod.name, "Nod, Inc.")

    }

    /// Test KDDI Corporation
    func testKddiCorporation() {

         XCTAssertEqual(BluetoothUUID.kddiCorporation.rawValue, 0xFEC0)
         XCTAssertEqual(BluetoothUUID.kddiCorporation.rawValue, 65216)
         XCTAssertEqual(BluetoothUUID.kddiCorporation, .bit16(0xFEC0))
         XCTAssertEqual(BluetoothUUID.kddiCorporation.name, "KDDI Corporation")

    }

    /// Test KDDI Corporation
    func testKddiCorporation2() {

         XCTAssertEqual(BluetoothUUID.kddiCorporation2.rawValue, 0xFEC1)
         XCTAssertEqual(BluetoothUUID.kddiCorporation2.rawValue, 65217)
         XCTAssertEqual(BluetoothUUID.kddiCorporation2, .bit16(0xFEC1))
         XCTAssertEqual(BluetoothUUID.kddiCorporation2.name, "KDDI Corporation")

    }

    /// Test Blue Spark Technologies, Inc.
    func testBlueSparkTechnologies() {

         XCTAssertEqual(BluetoothUUID.blueSparkTechnologies.rawValue, 0xFEC2)
         XCTAssertEqual(BluetoothUUID.blueSparkTechnologies.rawValue, 65218)
         XCTAssertEqual(BluetoothUUID.blueSparkTechnologies, .bit16(0xFEC2))
         XCTAssertEqual(BluetoothUUID.blueSparkTechnologies.name, "Blue Spark Technologies, Inc.")

    }

    /// Test 360fly, Inc.
    func testUuid360Fly() {

         XCTAssertEqual(BluetoothUUID.uuid360Fly.rawValue, 0xFEC3)
         XCTAssertEqual(BluetoothUUID.uuid360Fly.rawValue, 65219)
         XCTAssertEqual(BluetoothUUID.uuid360Fly, .bit16(0xFEC3))
         XCTAssertEqual(BluetoothUUID.uuid360Fly.name, "360fly, Inc.")

    }

    /// Test PLUS Location Systems
    func testPlusLocationSystems() {

         XCTAssertEqual(BluetoothUUID.plusLocationSystems.rawValue, 0xFEC4)
         XCTAssertEqual(BluetoothUUID.plusLocationSystems.rawValue, 65220)
         XCTAssertEqual(BluetoothUUID.plusLocationSystems, .bit16(0xFEC4))
         XCTAssertEqual(BluetoothUUID.plusLocationSystems.name, "PLUS Location Systems")

    }

    /// Test Realtek Semiconductor Corp.
    func testRealtekSemiconductorCorp() {

         XCTAssertEqual(BluetoothUUID.realtekSemiconductorCorp.rawValue, 0xFEC5)
         XCTAssertEqual(BluetoothUUID.realtekSemiconductorCorp.rawValue, 65221)
         XCTAssertEqual(BluetoothUUID.realtekSemiconductorCorp, .bit16(0xFEC5))
         XCTAssertEqual(BluetoothUUID.realtekSemiconductorCorp.name, "Realtek Semiconductor Corp.")

    }

    /// Test Kocomojo, LLC
    func testKocomojo() {

         XCTAssertEqual(BluetoothUUID.kocomojo.rawValue, 0xFEC6)
         XCTAssertEqual(BluetoothUUID.kocomojo.rawValue, 65222)
         XCTAssertEqual(BluetoothUUID.kocomojo, .bit16(0xFEC6))
         XCTAssertEqual(BluetoothUUID.kocomojo.name, "Kocomojo, LLC")

    }

    /// Test Apple, Inc.
    func testApple3() {

         XCTAssertEqual(BluetoothUUID.apple3.rawValue, 0xFEC7)
         XCTAssertEqual(BluetoothUUID.apple3.rawValue, 65223)
         XCTAssertEqual(BluetoothUUID.apple3, .bit16(0xFEC7))
         XCTAssertEqual(BluetoothUUID.apple3.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple4() {

         XCTAssertEqual(BluetoothUUID.apple4.rawValue, 0xFEC8)
         XCTAssertEqual(BluetoothUUID.apple4.rawValue, 65224)
         XCTAssertEqual(BluetoothUUID.apple4, .bit16(0xFEC8))
         XCTAssertEqual(BluetoothUUID.apple4.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple5() {

         XCTAssertEqual(BluetoothUUID.apple5.rawValue, 0xFEC9)
         XCTAssertEqual(BluetoothUUID.apple5.rawValue, 65225)
         XCTAssertEqual(BluetoothUUID.apple5, .bit16(0xFEC9))
         XCTAssertEqual(BluetoothUUID.apple5.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple6() {

         XCTAssertEqual(BluetoothUUID.apple6.rawValue, 0xFECA)
         XCTAssertEqual(BluetoothUUID.apple6.rawValue, 65226)
         XCTAssertEqual(BluetoothUUID.apple6, .bit16(0xFECA))
         XCTAssertEqual(BluetoothUUID.apple6.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple7() {

         XCTAssertEqual(BluetoothUUID.apple7.rawValue, 0xFECB)
         XCTAssertEqual(BluetoothUUID.apple7.rawValue, 65227)
         XCTAssertEqual(BluetoothUUID.apple7, .bit16(0xFECB))
         XCTAssertEqual(BluetoothUUID.apple7.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple8() {

         XCTAssertEqual(BluetoothUUID.apple8.rawValue, 0xFECC)
         XCTAssertEqual(BluetoothUUID.apple8.rawValue, 65228)
         XCTAssertEqual(BluetoothUUID.apple8, .bit16(0xFECC))
         XCTAssertEqual(BluetoothUUID.apple8.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple9() {

         XCTAssertEqual(BluetoothUUID.apple9.rawValue, 0xFECD)
         XCTAssertEqual(BluetoothUUID.apple9.rawValue, 65229)
         XCTAssertEqual(BluetoothUUID.apple9, .bit16(0xFECD))
         XCTAssertEqual(BluetoothUUID.apple9.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple10() {

         XCTAssertEqual(BluetoothUUID.apple10.rawValue, 0xFECE)
         XCTAssertEqual(BluetoothUUID.apple10.rawValue, 65230)
         XCTAssertEqual(BluetoothUUID.apple10, .bit16(0xFECE))
         XCTAssertEqual(BluetoothUUID.apple10.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple11() {

         XCTAssertEqual(BluetoothUUID.apple11.rawValue, 0xFECF)
         XCTAssertEqual(BluetoothUUID.apple11.rawValue, 65231)
         XCTAssertEqual(BluetoothUUID.apple11, .bit16(0xFECF))
         XCTAssertEqual(BluetoothUUID.apple11.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple12() {

         XCTAssertEqual(BluetoothUUID.apple12.rawValue, 0xFED0)
         XCTAssertEqual(BluetoothUUID.apple12.rawValue, 65232)
         XCTAssertEqual(BluetoothUUID.apple12, .bit16(0xFED0))
         XCTAssertEqual(BluetoothUUID.apple12.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple13() {

         XCTAssertEqual(BluetoothUUID.apple13.rawValue, 0xFED1)
         XCTAssertEqual(BluetoothUUID.apple13.rawValue, 65233)
         XCTAssertEqual(BluetoothUUID.apple13, .bit16(0xFED1))
         XCTAssertEqual(BluetoothUUID.apple13.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple14() {

         XCTAssertEqual(BluetoothUUID.apple14.rawValue, 0xFED2)
         XCTAssertEqual(BluetoothUUID.apple14.rawValue, 65234)
         XCTAssertEqual(BluetoothUUID.apple14, .bit16(0xFED2))
         XCTAssertEqual(BluetoothUUID.apple14.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple15() {

         XCTAssertEqual(BluetoothUUID.apple15.rawValue, 0xFED3)
         XCTAssertEqual(BluetoothUUID.apple15.rawValue, 65235)
         XCTAssertEqual(BluetoothUUID.apple15, .bit16(0xFED3))
         XCTAssertEqual(BluetoothUUID.apple15.name, "Apple, Inc.")

    }

    /// Test Apple, Inc.
    func testApple16() {

         XCTAssertEqual(BluetoothUUID.apple16.rawValue, 0xFED4)
         XCTAssertEqual(BluetoothUUID.apple16.rawValue, 65236)
         XCTAssertEqual(BluetoothUUID.apple16, .bit16(0xFED4))
         XCTAssertEqual(BluetoothUUID.apple16.name, "Apple, Inc.")

    }

    /// Test Plantronics Inc.
    func testPlantronics() {

         XCTAssertEqual(BluetoothUUID.plantronics.rawValue, 0xFED5)
         XCTAssertEqual(BluetoothUUID.plantronics.rawValue, 65237)
         XCTAssertEqual(BluetoothUUID.plantronics, .bit16(0xFED5))
         XCTAssertEqual(BluetoothUUID.plantronics.name, "Plantronics Inc.")

    }

    /// Test Broadcom Corporation
    func testBroadcomCorporation() {

         XCTAssertEqual(BluetoothUUID.broadcomCorporation.rawValue, 0xFED6)
         XCTAssertEqual(BluetoothUUID.broadcomCorporation.rawValue, 65238)
         XCTAssertEqual(BluetoothUUID.broadcomCorporation, .bit16(0xFED6))
         XCTAssertEqual(BluetoothUUID.broadcomCorporation.name, "Broadcom Corporation")

    }

    /// Test Broadcom Corporation
    func testBroadcomCorporation2() {

         XCTAssertEqual(BluetoothUUID.broadcomCorporation2.rawValue, 0xFED7)
         XCTAssertEqual(BluetoothUUID.broadcomCorporation2.rawValue, 65239)
         XCTAssertEqual(BluetoothUUID.broadcomCorporation2, .bit16(0xFED7))
         XCTAssertEqual(BluetoothUUID.broadcomCorporation2.name, "Broadcom Corporation")

    }

    /// Test Google
    func testGoogle4() {

         XCTAssertEqual(BluetoothUUID.google4.rawValue, 0xFED8)
         XCTAssertEqual(BluetoothUUID.google4.rawValue, 65240)
         XCTAssertEqual(BluetoothUUID.google4, .bit16(0xFED8))
         XCTAssertEqual(BluetoothUUID.google4.name, "Google")

    }

    /// Test Pebble Technology Corporation
    func testPebbleTechnologyCorporation() {

         XCTAssertEqual(BluetoothUUID.pebbleTechnologyCorporation.rawValue, 0xFED9)
         XCTAssertEqual(BluetoothUUID.pebbleTechnologyCorporation.rawValue, 65241)
         XCTAssertEqual(BluetoothUUID.pebbleTechnologyCorporation, .bit16(0xFED9))
         XCTAssertEqual(BluetoothUUID.pebbleTechnologyCorporation.name, "Pebble Technology Corporation")

    }

    /// Test ISSC Technologies Corporation
    func testIsscTechnologiesCorporation() {

         XCTAssertEqual(BluetoothUUID.isscTechnologiesCorporation.rawValue, 0xFEDA)
         XCTAssertEqual(BluetoothUUID.isscTechnologiesCorporation.rawValue, 65242)
         XCTAssertEqual(BluetoothUUID.isscTechnologiesCorporation, .bit16(0xFEDA))
         XCTAssertEqual(BluetoothUUID.isscTechnologiesCorporation.name, "ISSC Technologies Corporation")

    }

    /// Test Perka, Inc.
    func testPerka() {

         XCTAssertEqual(BluetoothUUID.perka.rawValue, 0xFEDB)
         XCTAssertEqual(BluetoothUUID.perka.rawValue, 65243)
         XCTAssertEqual(BluetoothUUID.perka, .bit16(0xFEDB))
         XCTAssertEqual(BluetoothUUID.perka.name, "Perka, Inc.")

    }

    /// Test Jawbone
    func testJawbone() {

         XCTAssertEqual(BluetoothUUID.jawbone.rawValue, 0xFEDC)
         XCTAssertEqual(BluetoothUUID.jawbone.rawValue, 65244)
         XCTAssertEqual(BluetoothUUID.jawbone, .bit16(0xFEDC))
         XCTAssertEqual(BluetoothUUID.jawbone.name, "Jawbone")

    }

    /// Test Jawbone
    func testJawbone2() {

         XCTAssertEqual(BluetoothUUID.jawbone2.rawValue, 0xFEDD)
         XCTAssertEqual(BluetoothUUID.jawbone2.rawValue, 65245)
         XCTAssertEqual(BluetoothUUID.jawbone2, .bit16(0xFEDD))
         XCTAssertEqual(BluetoothUUID.jawbone2.name, "Jawbone")

    }

    /// Test Coin, Inc.
    func testCoin() {

         XCTAssertEqual(BluetoothUUID.coin.rawValue, 0xFEDE)
         XCTAssertEqual(BluetoothUUID.coin.rawValue, 65246)
         XCTAssertEqual(BluetoothUUID.coin, .bit16(0xFEDE))
         XCTAssertEqual(BluetoothUUID.coin.name, "Coin, Inc.")

    }

    /// Test Design SHIFT
    func testDesignShift() {

         XCTAssertEqual(BluetoothUUID.designShift.rawValue, 0xFEDF)
         XCTAssertEqual(BluetoothUUID.designShift.rawValue, 65247)
         XCTAssertEqual(BluetoothUUID.designShift, .bit16(0xFEDF))
         XCTAssertEqual(BluetoothUUID.designShift.name, "Design SHIFT")

    }

    /// Test Anhui Huami Information Technology Co.
    func testAnhuiHuamiInformationTechnologyCo() {

         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo.rawValue, 0xFEE0)
         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo.rawValue, 65248)
         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo, .bit16(0xFEE0))
         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo.name, "Anhui Huami Information Technology Co.")

    }

    /// Test Anhui Huami Information Technology Co.
    func testAnhuiHuamiInformationTechnologyCo2() {

         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo2.rawValue, 0xFEE1)
         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo2.rawValue, 65249)
         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo2, .bit16(0xFEE1))
         XCTAssertEqual(BluetoothUUID.anhuiHuamiInformationTechnologyCo2.name, "Anhui Huami Information Technology Co.")

    }

    /// Test Anki, Inc.
    func testAnki() {

         XCTAssertEqual(BluetoothUUID.anki.rawValue, 0xFEE2)
         XCTAssertEqual(BluetoothUUID.anki.rawValue, 65250)
         XCTAssertEqual(BluetoothUUID.anki, .bit16(0xFEE2))
         XCTAssertEqual(BluetoothUUID.anki.name, "Anki, Inc.")

    }

    /// Test Anki, Inc.
    func testAnki2() {

         XCTAssertEqual(BluetoothUUID.anki2.rawValue, 0xFEE3)
         XCTAssertEqual(BluetoothUUID.anki2.rawValue, 65251)
         XCTAssertEqual(BluetoothUUID.anki2, .bit16(0xFEE3))
         XCTAssertEqual(BluetoothUUID.anki2.name, "Anki, Inc.")

    }

    /// Test Nordic Semiconductor ASA
    func testNordicSemiconductorAsa() {

         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa.rawValue, 0xFEE4)
         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa.rawValue, 65252)
         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa, .bit16(0xFEE4))
         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa.name, "Nordic Semiconductor ASA")

    }

    /// Test Nordic Semiconductor ASA
    func testNordicSemiconductorAsa2() {

         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa2.rawValue, 0xFEE5)
         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa2.rawValue, 65253)
         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa2, .bit16(0xFEE5))
         XCTAssertEqual(BluetoothUUID.nordicSemiconductorAsa2.name, "Nordic Semiconductor ASA")

    }

    /// Test Seed Labs, Inc.
    func testSeedLabs() {

         XCTAssertEqual(BluetoothUUID.seedLabs.rawValue, 0xFEE6)
         XCTAssertEqual(BluetoothUUID.seedLabs.rawValue, 65254)
         XCTAssertEqual(BluetoothUUID.seedLabs, .bit16(0xFEE6))
         XCTAssertEqual(BluetoothUUID.seedLabs.name, "Seed Labs, Inc.")

    }

    /// Test Tencent Holdings Limited
    func testTencentHoldingsLimited2() {

         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited2.rawValue, 0xFEE7)
         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited2.rawValue, 65255)
         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited2, .bit16(0xFEE7))
         XCTAssertEqual(BluetoothUUID.tencentHoldingsLimited2.name, "Tencent Holdings Limited")

    }

    /// Test Quintic Corp.
    func testQuinticCorp() {

         XCTAssertEqual(BluetoothUUID.quinticCorp.rawValue, 0xFEE8)
         XCTAssertEqual(BluetoothUUID.quinticCorp.rawValue, 65256)
         XCTAssertEqual(BluetoothUUID.quinticCorp, .bit16(0xFEE8))
         XCTAssertEqual(BluetoothUUID.quinticCorp.name, "Quintic Corp.")

    }

    /// Test Quintic Corp.
    func testQuinticCorp2() {

         XCTAssertEqual(BluetoothUUID.quinticCorp2.rawValue, 0xFEE9)
         XCTAssertEqual(BluetoothUUID.quinticCorp2.rawValue, 65257)
         XCTAssertEqual(BluetoothUUID.quinticCorp2, .bit16(0xFEE9))
         XCTAssertEqual(BluetoothUUID.quinticCorp2.name, "Quintic Corp.")

    }

    /// Test Swirl Networks, Inc.
    func testSwirlNetworks() {

         XCTAssertEqual(BluetoothUUID.swirlNetworks.rawValue, 0xFEEA)
         XCTAssertEqual(BluetoothUUID.swirlNetworks.rawValue, 65258)
         XCTAssertEqual(BluetoothUUID.swirlNetworks, .bit16(0xFEEA))
         XCTAssertEqual(BluetoothUUID.swirlNetworks.name, "Swirl Networks, Inc.")

    }

    /// Test Swirl Networks, Inc.
    func testSwirlNetworks2() {

         XCTAssertEqual(BluetoothUUID.swirlNetworks2.rawValue, 0xFEEB)
         XCTAssertEqual(BluetoothUUID.swirlNetworks2.rawValue, 65259)
         XCTAssertEqual(BluetoothUUID.swirlNetworks2, .bit16(0xFEEB))
         XCTAssertEqual(BluetoothUUID.swirlNetworks2.name, "Swirl Networks, Inc.")

    }

    /// Test Tile, Inc.
    func testTile() {

         XCTAssertEqual(BluetoothUUID.tile.rawValue, 0xFEEC)
         XCTAssertEqual(BluetoothUUID.tile.rawValue, 65260)
         XCTAssertEqual(BluetoothUUID.tile, .bit16(0xFEEC))
         XCTAssertEqual(BluetoothUUID.tile.name, "Tile, Inc.")

    }

    /// Test Tile, Inc.
    func testTile2() {

         XCTAssertEqual(BluetoothUUID.tile2.rawValue, 0xFEED)
         XCTAssertEqual(BluetoothUUID.tile2.rawValue, 65261)
         XCTAssertEqual(BluetoothUUID.tile2, .bit16(0xFEED))
         XCTAssertEqual(BluetoothUUID.tile2.name, "Tile, Inc.")

    }

    /// Test Polar Electro Oy
    func testPolarElectroOy() {

         XCTAssertEqual(BluetoothUUID.polarElectroOy.rawValue, 0xFEEE)
         XCTAssertEqual(BluetoothUUID.polarElectroOy.rawValue, 65262)
         XCTAssertEqual(BluetoothUUID.polarElectroOy, .bit16(0xFEEE))
         XCTAssertEqual(BluetoothUUID.polarElectroOy.name, "Polar Electro Oy")

    }

    /// Test Polar Electro Oy
    func testPolarElectroOy2() {

         XCTAssertEqual(BluetoothUUID.polarElectroOy2.rawValue, 0xFEEF)
         XCTAssertEqual(BluetoothUUID.polarElectroOy2.rawValue, 65263)
         XCTAssertEqual(BluetoothUUID.polarElectroOy2, .bit16(0xFEEF))
         XCTAssertEqual(BluetoothUUID.polarElectroOy2.name, "Polar Electro Oy")

    }

    /// Test Intel
    func testIntel() {

         XCTAssertEqual(BluetoothUUID.intel.rawValue, 0xFEF0)
         XCTAssertEqual(BluetoothUUID.intel.rawValue, 65264)
         XCTAssertEqual(BluetoothUUID.intel, .bit16(0xFEF0))
         XCTAssertEqual(BluetoothUUID.intel.name, "Intel")

    }

    /// Test CSR
    func testCsr2() {

         XCTAssertEqual(BluetoothUUID.csr2.rawValue, 0xFEF1)
         XCTAssertEqual(BluetoothUUID.csr2.rawValue, 65265)
         XCTAssertEqual(BluetoothUUID.csr2, .bit16(0xFEF1))
         XCTAssertEqual(BluetoothUUID.csr2.name, "CSR")

    }

    /// Test CSR
    func testCsr3() {

         XCTAssertEqual(BluetoothUUID.csr3.rawValue, 0xFEF2)
         XCTAssertEqual(BluetoothUUID.csr3.rawValue, 65266)
         XCTAssertEqual(BluetoothUUID.csr3, .bit16(0xFEF2))
         XCTAssertEqual(BluetoothUUID.csr3.name, "CSR")

    }

    /// Test Google
    func testGoogle5() {

         XCTAssertEqual(BluetoothUUID.google5.rawValue, 0xFEF3)
         XCTAssertEqual(BluetoothUUID.google5.rawValue, 65267)
         XCTAssertEqual(BluetoothUUID.google5, .bit16(0xFEF3))
         XCTAssertEqual(BluetoothUUID.google5.name, "Google")

    }

    /// Test Google
    func testGoogle6() {

         XCTAssertEqual(BluetoothUUID.google6.rawValue, 0xFEF4)
         XCTAssertEqual(BluetoothUUID.google6.rawValue, 65268)
         XCTAssertEqual(BluetoothUUID.google6, .bit16(0xFEF4))
         XCTAssertEqual(BluetoothUUID.google6.name, "Google")

    }

    /// Test Dialog Semiconductor GmbH
    func testDialogSemiconductorGmbh() {

         XCTAssertEqual(BluetoothUUID.dialogSemiconductorGmbh.rawValue, 0xFEF5)
         XCTAssertEqual(BluetoothUUID.dialogSemiconductorGmbh.rawValue, 65269)
         XCTAssertEqual(BluetoothUUID.dialogSemiconductorGmbh, .bit16(0xFEF5))
         XCTAssertEqual(BluetoothUUID.dialogSemiconductorGmbh.name, "Dialog Semiconductor GmbH")

    }

    /// Test Wicentric, Inc.
    func testWicentric() {

         XCTAssertEqual(BluetoothUUID.wicentric.rawValue, 0xFEF6)
         XCTAssertEqual(BluetoothUUID.wicentric.rawValue, 65270)
         XCTAssertEqual(BluetoothUUID.wicentric, .bit16(0xFEF6))
         XCTAssertEqual(BluetoothUUID.wicentric.name, "Wicentric, Inc.")

    }

    /// Test Aplix Corporation
    func testAplixCorporation() {

         XCTAssertEqual(BluetoothUUID.aplixCorporation.rawValue, 0xFEF7)
         XCTAssertEqual(BluetoothUUID.aplixCorporation.rawValue, 65271)
         XCTAssertEqual(BluetoothUUID.aplixCorporation, .bit16(0xFEF7))
         XCTAssertEqual(BluetoothUUID.aplixCorporation.name, "Aplix Corporation")

    }

    /// Test Aplix Corporation
    func testAplixCorporation2() {

         XCTAssertEqual(BluetoothUUID.aplixCorporation2.rawValue, 0xFEF8)
         XCTAssertEqual(BluetoothUUID.aplixCorporation2.rawValue, 65272)
         XCTAssertEqual(BluetoothUUID.aplixCorporation2, .bit16(0xFEF8))
         XCTAssertEqual(BluetoothUUID.aplixCorporation2.name, "Aplix Corporation")

    }

    /// Test PayPal, Inc.
    func testPaypal() {

         XCTAssertEqual(BluetoothUUID.paypal.rawValue, 0xFEF9)
         XCTAssertEqual(BluetoothUUID.paypal.rawValue, 65273)
         XCTAssertEqual(BluetoothUUID.paypal, .bit16(0xFEF9))
         XCTAssertEqual(BluetoothUUID.paypal.name, "PayPal, Inc.")

    }

    /// Test PayPal, Inc.
    func testPaypal2() {

         XCTAssertEqual(BluetoothUUID.paypal2.rawValue, 0xFEFA)
         XCTAssertEqual(BluetoothUUID.paypal2.rawValue, 65274)
         XCTAssertEqual(BluetoothUUID.paypal2, .bit16(0xFEFA))
         XCTAssertEqual(BluetoothUUID.paypal2.name, "PayPal, Inc.")

    }

    /// Test Stollmann E+V GmbH
    func testStollmannEVGmbh2() {

         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh2.rawValue, 0xFEFB)
         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh2.rawValue, 65275)
         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh2, .bit16(0xFEFB))
         XCTAssertEqual(BluetoothUUID.stollmannEVGmbh2.name, "Stollmann E+V GmbH")

    }

    /// Test Gimbal, Inc.
    func testGimbal() {

         XCTAssertEqual(BluetoothUUID.gimbal.rawValue, 0xFEFC)
         XCTAssertEqual(BluetoothUUID.gimbal.rawValue, 65276)
         XCTAssertEqual(BluetoothUUID.gimbal, .bit16(0xFEFC))
         XCTAssertEqual(BluetoothUUID.gimbal.name, "Gimbal, Inc.")

    }

    /// Test Gimbal, Inc.
    func testGimbal2() {

         XCTAssertEqual(BluetoothUUID.gimbal2.rawValue, 0xFEFD)
         XCTAssertEqual(BluetoothUUID.gimbal2.rawValue, 65277)
         XCTAssertEqual(BluetoothUUID.gimbal2, .bit16(0xFEFD))
         XCTAssertEqual(BluetoothUUID.gimbal2.name, "Gimbal, Inc.")

    }

    /// Test GN ReSound A/S
    func testGnResoundAS() {

         XCTAssertEqual(BluetoothUUID.gnResoundAS.rawValue, 0xFEFE)
         XCTAssertEqual(BluetoothUUID.gnResoundAS.rawValue, 65278)
         XCTAssertEqual(BluetoothUUID.gnResoundAS, .bit16(0xFEFE))
         XCTAssertEqual(BluetoothUUID.gnResoundAS.name, "GN ReSound A/S")

    }

    /// Test GN Netcom
    func testGnNetcom() {

         XCTAssertEqual(BluetoothUUID.gnNetcom.rawValue, 0xFEFF)
         XCTAssertEqual(BluetoothUUID.gnNetcom.rawValue, 65279)
         XCTAssertEqual(BluetoothUUID.gnNetcom, .bit16(0xFEFF))
         XCTAssertEqual(BluetoothUUID.gnNetcom.name, "GN Netcom")

    }

    /// Test Fast IDentity Online Alliance (FIDO)
    func testFastIdentityOnlineAllianceFido() {

         XCTAssertEqual(BluetoothUUID.fastIdentityOnlineAllianceFido.rawValue, 0xFFFD)
         XCTAssertEqual(BluetoothUUID.fastIdentityOnlineAllianceFido.rawValue, 65533)
         XCTAssertEqual(BluetoothUUID.fastIdentityOnlineAllianceFido, .bit16(0xFFFD))
         XCTAssertEqual(BluetoothUUID.fastIdentityOnlineAllianceFido.name, "Fast IDentity Online Alliance (FIDO)")

    }

    /// Test Alliance for Wireless Power (A4WP)
    func testAllianceForWirelessPowerA4Wp() {

         XCTAssertEqual(BluetoothUUID.allianceForWirelessPowerA4Wp.rawValue, 0xFFFE)
         XCTAssertEqual(BluetoothUUID.allianceForWirelessPowerA4Wp.rawValue, 65534)
         XCTAssertEqual(BluetoothUUID.allianceForWirelessPowerA4Wp, .bit16(0xFFFE))
         XCTAssertEqual(BluetoothUUID.allianceForWirelessPowerA4Wp.name, "Alliance for Wireless Power (A4WP)")

    }

}
